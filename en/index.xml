<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0"><channel><title>Maserhe</title><link>https://jpg6.com/en/</link><description>Recent content on Maserhe</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 08 Feb 2024 00:00:00 +0800</lastBuildDate><atom:link href="https://jpg6.com/en/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://jpg6.com/en/about/</link><pubDate>Thu, 04 Mar 2021 16:03:46 +0800</pubDate><guid>https://jpg6.com/en/about/</guid><description>&lt;h2 id="-hi-im-maserhehttpswwwjpg6com">✋ Hi, I&amp;rsquo;m &lt;a href="https://www.jpg6.com">Maserhe&lt;/a>&lt;/h2>
&lt;p>Backend development engineer, blockchain &amp;amp; Web3 enthusiast, with a Master&amp;rsquo;s degree in Software Engineering from Donghua University (DHU). Enjoys learning and building things.&lt;a href="https://github.com/maserhe">Follow me on GitHub&lt;/a>&lt;/p>
&lt;p>I want to learn things and become a better person. I enjoy reading, thinking and writing in my leisure time.&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/dino.gif" alt="picture">&lt;/p>
&lt;h3 id="-my-goals">🎓 My Goals&lt;/h3>
&lt;p>&lt;em>&lt;strong>About my life&lt;/strong>&lt;/em>, I hope I can establish a life-long friendship with my best friends, keep close relationship with my families, and face future challenges with my beloved. Also, I hope to meet interesting friends of diverse background.&lt;/p>
&lt;p>&lt;em>&lt;strong>About my career&lt;/strong>&lt;/em>, I hope I could always be learning and growing during my life and play an active role in the open source software movement.&lt;/p>
&lt;p>&lt;em>&lt;strong>Economically&lt;/strong>&lt;/em>, I hope to be able to choose what to do and shape my own the lifestyle freely.&lt;/p>
&lt;p>&lt;em>&lt;strong>About the society&lt;/strong>&lt;/em>, I hope to have the opportunity to participate in some public welfare or other form of kindness to contribute to the world.&lt;/p>
&lt;h3 id="-about-maserhe">⌛️ About Maserhe&lt;/h3>
&lt;p>&lt;strong>jpg6&lt;/strong> This is not my first website, but I hope it will be my last one to record some of my life, study and odd thoughts. First used the domain name maserhe before basing it on WordPress and placing it on my own personal server. The top was later moved to the domain name day1.cn. Finally, for the sake of stability and freedom, I decided to use Hugo to generate my own static web page, host it on GitHub and bind it to &lt;a href="https://www.jpg6.com/zh/">jpg6.com&lt;/a> domain name.&lt;/p>
&lt;p>&lt;strong>jpg6&lt;/strong> is named, jpg just corresponds to the first letter of the Chinese pinyin of the word &amp;ldquo;bundle&amp;rdquo;, and 6 corresponds to slip. There is a saying that goes like this, either pack it up or pack it up, I might pack it up and run away. When talking about &amp;ldquo;original intention&amp;rdquo; or &amp;ldquo;meaning&amp;rdquo; when chatting with close friends, I always choose to escape. Even if I achieve some small worldly achievements, it is difficult to feel joy or satisfaction from the bottom of my heart. I always feel that everything is as insignificant as &amp;ldquo;fake&amp;rdquo;. Meaningless. As I grow older and experience more, I wrote in another article &lt;a href="https://www.jpg6.com/zh/2020/06/06/yearly_review_23/">&lt;em>Confessions of a 24-year-old: Pursuing meaning&lt;/em>&lt;/a> &amp;ldquo;&lt;em>Perhaps thinking itself is the process of constructing meaning, which makes me no longer expect to have an epiphany in a certain moment, but just hope to move forward, experience and pursue my own life.&lt;/em>&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>jpg6&lt;/strong> This name also means that you should no longer struggle with meaning, but should continue to learn, experience and challenge new things, and you can accept it happily even if you are judged as &amp;ldquo;changed&amp;rdquo; or &amp;ldquo;not like yourself&amp;rdquo;.&lt;/p>
&lt;p>I hope that in my spare time I can output more new knowledge and ideas, and write more output.&lt;/p>
&lt;h3 id="-recent-digests">🎧 Recent Digests&lt;/h3>
&lt;!-- douban starts -->
&lt;ul>
&lt;li>&lt;a href='https://book.douban.com/subject/37016658/' target='_blank'>读过小城与不确定性的墙&lt;/a> - 2024-11-30&lt;/li>
&lt;li>&lt;a href='http://movie.douban.com/subject/35604181/' target='_blank'>看过企鹅人&lt;/a> - 2024-11-30&lt;/li>
&lt;li>&lt;a href='http://movie.douban.com/subject/36154853/' target='_blank'>想看好东西&lt;/a> - 2024-11-30&lt;/li>
&lt;li>&lt;a href='https://book.douban.com/subject/25844039/' target='_blank'>最近在读創作者的日常生活&lt;/a> - 2024-11-24&lt;/li>
&lt;li>&lt;a href='https://book.douban.com/subject/26606009/' target='_blank'>读过精力管理&lt;/a> - 2024-11-24&lt;/li>
&lt;/ul>
&lt;!-- douban ends -->
&lt;h3 id="-this-week-i-code-with">👨🏻‍💻 This Week I Code With&lt;/h3>
&lt;!-- code_time starts -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">TypeScript 14 hrs 46 mins ████████████▌░░░░░░░░ 59.6%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Markdown 3 hrs 17 mins ██▊░░░░░░░░░░░░░░░░░░ 13.2%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">JSON 1 hr 34 mins █▎░░░░░░░░░░░░░░░░░░░ 6.3%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">YAML 1 hr 31 mins █▎░░░░░░░░░░░░░░░░░░░ 6.1%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Other 50 mins ▋░░░░░░░░░░░░░░░░░░░░ 3.4%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;!-- code_time ends -->
&lt;h3 id="-recent-releases">💻 Recent Releases&lt;/h3>
&lt;!-- recent_releases starts -->
&lt;ul>
&lt;li>&lt;a href=https://github.com/Maserhe/Acer-A515-51G-84v3-Hackintosh-OpenCore/releases/tag/aaaa target='_blank'>Acer-A515-51G-84v3-Hackintosh-OpenCore Acer-A515-51G-Hackintosh-OpenCore8.0&lt;/a>&lt;/li>
&lt;li>&lt;a href=https://github.com/Maserhe/LeetCode/releases/tag/Algorithm target='_blank'>LeetCode &lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- recent_releases ends --></description></item><item><title>24 岁的自白：去追寻意义</title><link>https://jpg6.com/en/2024/02/08/yearly_review_23/</link><pubDate>Thu, 08 Feb 2024 00:00:00 +0800</pubDate><guid>https://jpg6.com/en/2024/02/08/yearly_review_23/</guid><description>&lt;h2 id="24-岁的自白去追寻意义">24 岁的自白：去追寻意义&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mtr_window_me.jpeg" alt="mtr_window_me">&lt;/p>
&lt;p>现在是 2024 年 2 月 8 日，我 24 岁了，这个年纪似乎是一个尴尬的存在，距离18和距离30一样远。若按照人生阶段来界定，本科毕业已经是两年之前，处在第二个本命年，人生阅历远不足以去给予他人什么忠告，却也想写点东西对自己过去的几年有个交代。&lt;/p>
&lt;p>高中三年的人生很容易概括，不断学习取得更好的成绩就已经足以填满生活的大部分意义，也幸而收获几个挚友，以及一份不圆满的单恋。而高考更像是一个休止符，在打破原有的生活平衡后却并未给自己多少喘息的机会，就似乎一切都戛然而止。很害怕，那之后生活的意义是什么呢？&lt;/p>
&lt;p>高考结束后的暑假和挚友加入了高考复读阵营，开始了高四生涯，复读的过程时很压抑的，我也不愿多提这段经历。&lt;/p>
&lt;p>18 年 9 月，一个人带着行李前往沈阳 —— 一个过去十几年未有过任何交集的城市，陌生感与新鲜感在最初的几周后也都渐渐化为迷茫与恐慌，不知道自己是在寻找什么，人在没有找到自己追求的事物时，往往会去寻求一个替代性的简单目标。&lt;/p>
&lt;p>当课程渐渐变得乏味，学生工作也渐渐趋于稳定，内心又开始陷入极重的焦虑和恐慌，对编程的兴趣和付出也就仅仅能够支撑我到本科结束，对于工作岗位却也毫无头绪，想更多探索未来的可能性，但在各个赛道上都难以具备足够的竞争力，甚至也不知道该为了什么目标前进。&lt;/p>
&lt;p>大三时，有幸结识了一位在阿里的学长，通过了解学长的过往和他的文章，自己已经有找实习的意识，三月份机缘巧合拿到了暑期实习offer，开心却也害怕，担心自己偷偷去实习被发现，也担心专业课被打低分影响保研。犹豫再三后还是决定飞往杭州实习，又开启了一段新的旅程。自此，开启了人生第一份实习工作，过得很开心，现在跟许多当时的同事仍是很好的朋友，即使大多都已经是我父辈的年纪。站在现在的视角回看，对“单刀赴会”之举心有余悸，却也暗自庆幸当时的冲动能带来这些经历与改变。记得实习中途回了学校一次，当时返回杭州时，由于沈阳飞杭州机票太贵，选择了沈阳飞温州的机票，那晚半夜又由机场辗转到高铁站，需要赶清晨温州到杭州的首班高铁，庆幸没有耽误那天上班。回想实习那段时间，我觉得这就是自己理想的生活状态 —— 足够的自由，足够的成长。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/trip.jpeg" alt="trip">&lt;/p>
&lt;p>实习返校后，当自己逐渐迈入大四，在学校仅仅需要写一篇毕业论文，或许是没有就业或者升学压力，在那段时间丧失了目标，是颓废的、整天无所事事的、没有成长的。毕业前的三个月，猛然发觉自己所是躲进自己的世界里自得其乐罢了，还有很多不一样的生活方式，终究缺少了体验所带来的思考过程。那天给自己定了一个目标，减肥！毕业回到家时，已经减了30斤，有了很大变化。&lt;/p>
&lt;p>对毕业其实也没有什么实感，就似乎离别一些人，不知道是否能再见到。
我仍然不觉得自己触碰到了一直在找寻的意义，如今的一切成败是非也仅仅是妥协所形成的答案，也许永远找不到了，但这个过程却给了前进的勇气，也许思考本身就是建构意义的过程，让我不再期待某个瞬间能够顿悟，只是希望继续向前，体验和追寻着自己的人生。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sea_kids.jpeg" alt="sea_kids">&lt;/p>
&lt;p>祝 24 岁的自己，快乐。&lt;/p></description></item><item><title>通过 mover.io 服务无缝迁移云端网盘文件至 OneDrive</title><link>https://jpg6.com/en/2022/05/22/migrate_your_files_to_onedrive_using_mover_io/</link><pubDate>Sun, 22 May 2022 13:06:12 +0800</pubDate><guid>https://jpg6.com/en/2022/05/22/migrate_your_files_to_onedrive_using_mover_io/</guid><description>&lt;figure >
&lt;audio controls preload="metadata">
&lt;source src="https://jpg6.com/audios/here_after_us.mp3" type="audio/mpeg">
&lt;/audio>
&lt;i>&lt;figcaption>《后来的我们 - 五月天》&lt;/figcaption>&lt;/i>
&lt;/figure>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近学校发了邮件说要把邮箱服务从 Google 转移到 Microsoft，而且原先的 Google Drive 无限流量也将取消，转移为 5T 的 OneDrive。我原先一直用着 Google Drive 的文件服务，在我的多个设备之间同步和备份文件，到现在也差不多占了 300 多 GB 的空间。因为 Google Drive 在内地需要代理，下载速度很慢，因此，我采用了官方推荐的 &lt;a href="https://mover.io">mover.io&lt;/a> 服务来进行云端迁移，无需下载到本地转存，记录一下迁移过程。&lt;/p>
&lt;h2 id="moverio-服务">mover.io 服务&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_io.png" alt="mover_io">&lt;/p>
&lt;p>mover.io 服务是微软提供的一个网盘迁移服务，支持将很多云服务商提供的网盘文件迁移到 Microsoft OneDrive 上，比如 Google Drive、Dropbox、Box 等。它为机构、学校以及个人都提供了迁移服务。&lt;/p>
&lt;p>对于个人用户，我们使用 Transfer Wizard 来进行迁移。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_transfer_wizard.png" alt="mover_transfer_wizard">&lt;/p>
&lt;h2 id="迁移流程">迁移流程&lt;/h2>
&lt;h3 id="注册登录-moverio-账户">注册/登录 mover.io 账户&lt;/h3>
&lt;p>首先，我们需要注册一个 mover.io 账户，并登录，可以使用 Microsoft 授权登录或使用原来的 mover.io 账户。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_io_login.png" alt="mover_io_login">&lt;/p>
&lt;h3 id="授权迁移数据源">授权迁移数据源&lt;/h3>
&lt;p>登录成功后，界面清晰地给出了操作说明，按照步骤操作即可。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_transfer_wizard_setting.png" alt="mover_transfer_wizard_setting">&lt;/p>
&lt;h4 id="选择迁移来源">选择迁移来源&lt;/h4>
&lt;p>点击 Authorize New Connector 按钮，选择 Google Drive (Single User)，选择需要迁移文件所在的 Google 账户并授权。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_source_google.png" alt="mover_source_google">&lt;/p>
&lt;p>授权完成后，就会出现所有需要迁移的文件列表。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_source_done.png" alt="mover_source_done">&lt;/p>
&lt;h4 id="选择迁移目标">选择迁移目标&lt;/h4>
&lt;p>点击 Authorize New Connector 按钮，选择 OneDrive for Business (Single User)，选择该数据源并授权。目前目标数据源只支持微软家族的 OneDrive 和 SharePoint 等。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_choose_dest.png" alt="mover_choose_dest">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_dest_onedrive.png" alt="mover_dest_onedrive">&lt;/p>
&lt;p>授权完成后，就会出现迁移目标网盘的文件列表。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_dest_onedrive_done.png" alt="mover_dest_onedrive_done">&lt;/p>
&lt;h3 id="迁移数据">迁移数据&lt;/h3>
&lt;p>来源数据源与目标数据源都迁移完成后，即可选择 Start Copy 开始迁移流程。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_start_copy.png" alt="mover_start_copy">&lt;/p>
&lt;h3 id="等待迁移完成">等待迁移完成&lt;/h3>
&lt;p>完成上述操作后，迁移流程已经开始，仅需等待完成即可，可以通过登录后的 Migration Manager 进行进度查看。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_wait_migration_done.png" alt="mover_wait_migration_done">&lt;/p>
&lt;p>因为源文件大小不同，迁移时间每个人各不相同，经测试，迁移速度参照如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mover_migration_speed.png" alt="mover_migration_speed">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是我用过 mover.io 服务将所有 Google Drive 文件迁移到 OneDrive 上的过程，希望对大家有所帮助。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://mover.io/">mover.io 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://its.hku.hk/kb/ways-on-reducing-storage-on-google-drive-google-photos-and-gmail/#b-transfer-google-drive">Transfer Google Drive
(HKU Connect Google Drive &amp;gt; HKU Microsoft OneDrive)&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>从零开始搭建一个免费的个人博客数据统计系统（umami + Vercel + Heroku）</title><link>https://jpg6.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/</link><pubDate>Sat, 21 May 2022 16:56:47 +0800</pubDate><guid>https://jpg6.com/en/2022/05/21/free_blog_analysis_using_umami_vercel_and_heroku/</guid><description>&lt;figure >
&lt;audio controls preload="metadata">
&lt;source src="https://jpg6.com/audios/here_after_us.mp3" type="audio/mpeg">
&lt;/audio>
&lt;i>&lt;figcaption>《后来的我们 - 五月天》&lt;/figcaption>&lt;/i>
&lt;/figure>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/umami_dashboard_white.png" alt="umami_dashboard_white">&lt;/p>
&lt;p>之前写了一篇《&lt;a href="https://www.jpg6.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/">免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）&lt;/a>》，讲述了一下我使用 Serverless 和一些开源项目搭建的博客系统，也开了个系列来记录搭建过程。&lt;/p>
&lt;p>前几天看到 &lt;a href="https://reorx.com">Reorx&lt;/a> 写的一篇 《&lt;a href="https://reorx.com/blog/deploy-umami-for-personal-website/">搭建 umami 收集个人网站统计数据&lt;/a>》，他介绍了 &lt;a href="https://umami.is">umami&lt;/a> 这个项目，并使用 &lt;a href="https://railway.app">Railway&lt;/a> 进行无服务搭建部署。&lt;/p>
&lt;p>只不过我因为之前部署 &lt;a href="https://cusdis.com">Cusdis&lt;/a> 的时候使用的是 &lt;a href="https://www.heroku.com/">Heroku&lt;/a> 提供的免费 Postgres 数据库服务并用 &lt;a href="http://vercel.com/">Vercel&lt;/a> 进行部署，于是在部署 umami 的时候还是想沿用原来的平台，减少搭建和维护成本。&lt;/p>
&lt;p>下文会对具体搭建部署流程做个记录，因为官方支持一键部署方式，整个搭建流程很顺畅。&lt;/p>
&lt;h2 id="搭建部署说明">搭建部署说明&lt;/h2>
&lt;h3 id="使用-heroku-创建-postgres-数据库">使用 Heroku 创建 Postgres 数据库&lt;/h3>
&lt;h4 id="创建-postgres-数据库">创建 Postgres 数据库&lt;/h4>
&lt;p>首先注册一个 Heroku 账号，登录成功后，点击右上角按钮创建一个新的应用。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cretae_app_in_heroku_1.png" alt="cretae_app_in_heroku_1">&lt;/p>
&lt;p>输入实例名称，地区可以自行选择，我选择的是 United States，点击创建。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cretae_app_in_heroku_2.png" alt="cretae_app_in_heroku_2">&lt;/p>
&lt;p>创建完成后，在 Resources Tab 的 Adds-on 中搜索选择 Postgres 数据库。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/add_heroku_postgres.png" alt="add_heroku_postgres">&lt;/p>
&lt;p>选择 Free Plan 即可，Heroku 中的 Postgres 数据库是免费的，可以持续使用，免去了搭建维护成本。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/heroku_postgres_plan.png" alt="heroku_postgres_plan">&lt;/p>
&lt;p>创建完成后，在 Setting 中查看 &lt;code>DATABASE_URL&lt;/code>，后面部署要用到。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/postgres_data_url.jpeg" alt="postgres_data_url">&lt;/p>
&lt;p>点击新增的 Postgres add-on 跳转进行设置。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/postgres_addon_details.png" alt="postgres_addon_details">&lt;/p>
&lt;p>进入后，选择 Setting 页面的 View Credentials，并且记录配置参数。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/heroku_credentials.png" alt="heroku_credentials">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/postgres_settings.jpeg" alt="postgres_settings">&lt;/p>
&lt;h4 id="初始化-postgres-数据库">初始化 Postgres 数据库&lt;/h4>
&lt;p>因为需要初始化数据库，我使用的是 DataGrip 数据库管理工具进行连接，比较方便，也可以通过 Heroku CLI 进行连接和配置。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/postgres_config.jpeg" alt="postgres_config">&lt;/p>
&lt;p>umami 需要通过官方提供的 &lt;a href="https://github.com/mikecao/umami/blob/master/sql/schema.postgresql.sql">umami/sql/schema.postgresql.sql&lt;/a> 脚本进行初始化。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/postgres_init_script.png" alt="postgres_init_script">&lt;/p>
&lt;p>执行完成后，数据库有了五张表与初始化数据，可以进行后续部署工作。&lt;/p>
&lt;h3 id="使用-vercel-一键部署-umami-服务">使用 Vercel 一键部署 umami 服务&lt;/h3>
&lt;h4 id="部署-umami-服务">部署 umami 服务&lt;/h4>
&lt;p>创建好数据库实例之后，可以通过 Vercel 一键部署 umami 服务了。&lt;/p>
&lt;p>访问 &lt;a href="https://umami.is">umami 官方文档&lt;/a> 的 &lt;a href="https://umami.is/docs/running-on-vercel">Running on Vercel&lt;/a> 模块，有操作说明与一键部署脚本。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/running_on_vercel.png" alt="running_on_vercel">&lt;/p>
&lt;p>点击一键部署按钮后，会跳转至 Vercel 的一键部署页面，创建 umami 的 Github 仓库。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/vercel_create_umami_repo.png" alt="vercel_create_umami_repo">&lt;/p>
&lt;p>接下来需要填入之前在部署 Heroku Postgres 实例时记录到 &lt;code>DATABASE_URL&lt;/code> 参数地址，并且需要填写一个自定义字符串 &lt;code>HASH_SLAT&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/vercel_config_umami.png" alt="vercel_config_umami">&lt;/p>
&lt;p>点击 Deploy 进行部署，等待几分钟后部署完成即可。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/vercel_deploy.png" alt="vercel_deploy">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/vecel_deploy_done.png" alt="vecel_deploy_done">&lt;/p>
&lt;h4 id="访问-umami-服务">访问 umami 服务&lt;/h4>
&lt;p>部署完成后，点击 Dashboard 或分配的 Vercel 域名访问服务，可以看到 umami 的登录界面。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/umami_login.png" alt="umami_login">&lt;/p>
&lt;p>初次登录输入默认用户名 &lt;code>admin&lt;/code> 与默认密码 &lt;code>umami&lt;/code>，登录成功后，会跳转至 umami 的管理页面，登录后可以点击右上角头像自行修改密码。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/umami_change_password.png" alt="umami_change_password">&lt;/p>
&lt;h4 id="配置个人网站至-umami-服务">配置个人网站至 umami 服务&lt;/h4>
&lt;p>完成基础帐号配置后，点击侧边栏网站 Tab，点击添加网站。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/umami_add_website_1.png" alt="umami_add_website_1">&lt;/p>
&lt;p>填写网站基本信息，如果勾选共享链接可以生成一个可公开访问的网址，我把它添加了一个书签放在 iPad 主屏幕上，作为一个数据看板也很不错。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/umami_add_website_2.png" alt="umami_add_website_2">&lt;/p>
&lt;h4 id="配置-umami-脚本至个人博客网站">配置 umami 脚本至个人博客网站&lt;/h4>
&lt;p>网站创建完成，获取 umami 脚本。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/get_umami_script.jpeg" alt="get_umami_script">&lt;/p>
&lt;p>获取后，在个人网站添加 umami 脚本。我使用的是静态博客 Hugo，在主题中的 &lt;code>&amp;lt;head&amp;gt;&lt;/code> 标签内添加。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/set_umami_script.jpeg" alt="set_umami_script">&lt;/p>
&lt;p>配置完成部署，即可开始追踪网站数据。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/umami_dashboard_white.png" alt="umami_dashboard_white">&lt;/p>
&lt;h4 id="配置自定义脚本名称">配置自定义脚本名称&lt;/h4>
&lt;p>使用官方的 &lt;code>umami.js&lt;/code> 脚本名称，可能会被一些过滤规则拦截，因此我们可以自定义脚本名称，实现更准确地网站数据追踪。&lt;/p>
&lt;p>官方也提供了便捷的修改方式，可以在 Vercel 中已经部署的 umami 服务中增加 &lt;code>TRACKER_SCRIPT_NAME&lt;/code> 环境变量，配置为自定义名称。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/umami_script_environment_varible.png" alt="umami_script_environment_varible">&lt;/p>
&lt;p>配置完成后重新部署，再在个人网站脚本中更改脚本名称即可。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/change_umami_script.jpeg" alt="change_umami_script">&lt;/p>
&lt;h4 id="配置自定义域名">配置自定义域名&lt;/h4>
&lt;p>如果不想要使用 Vercel 提供的 &lt;code>vercel.app&lt;/code> 域名，可以在 Vercel 中添加自定义域名，按照 Vercel 官方指引对域名提供商进行 &lt;code>CANME&lt;/code> 等配置。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/set_custom_domain.png" alt="set_custom_domain">&lt;/p>
&lt;p>例如，我使用的是 &lt;a href="https://www.cloudflare.com">Cloudflare&lt;/a> 托管的域名，需要先添加一下域名解析。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cloudflare_canme_config.png" alt="cloudflare_canme_config">&lt;/p>
&lt;p>根据官方说明，Cloudflare 还需要添加一个页面规则，配置完成后即可完成自定义域名配置。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cloudflare_page_rule.png" alt="cloudflare_page_rule">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是我们为网站添加 umami 网站统计服务的全流程，配置完成后无需后续维护，可以便捷地通过看板来进行网站数据追踪。这是我的博客搭建部署系列教程之一，请持续关注，希望能对大家有所参考。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://umami.is">umami&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://reorx.com/blog/deploy-umami-for-personal-website/">搭建 umami 收集个人网站统计数据&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://vercel.com">Vercel 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.heroku.com">Heroku 官方网站&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>[译] 用 Go 编写一个简单的内存键值数据库</title><link>https://jpg6.com/en/2022/05/21/writing_a_simple_in_memory_key_value_database_in_go/</link><pubDate>Sat, 21 May 2022 14:53:51 +0800</pubDate><guid>https://jpg6.com/en/2022/05/21/writing_a_simple_in_memory_key_value_database_in_go/</guid><description>&lt;figure >
&lt;audio controls preload="metadata">
&lt;source src="https://jpg6.com/audios/here_after_us.mp3" type="audio/mpeg">
&lt;/audio>
&lt;i>&lt;figcaption>《后来的我们 - 五月天》&lt;/figcaption>&lt;/i>
&lt;/figure>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>从 Postgres 到 Redis，再到 Prometheus，我们都使用并从事过各种数据库的开发。我花了很多时间来阅读其中一些数据库的源代码，对于那些像我一样好奇的少数人来说，他们有兴趣学习如何编写一个数据库。本书旨在记录这一过程。&lt;/p>
&lt;p>&lt;a href="https://github.com/arriqaaq/flashdb">GitHub - arriqaaq/flashdb: FlashDB is an embeddable, in-memory key/value database in Go (with Redis like commands)&lt;/a>&lt;/p>
&lt;h2 id="内存数据库">内存数据库&lt;/h2>
&lt;p>与传统数据库的数据主要保存在机械硬盘或者固态硬盘不同的是, 内存数据库主要将数据保存在内存中。 内存数据库主要是通过消除对磁盘的访问来实现最小的响应时间，两者的不同主要体现在内存数据库是将数据保存在主存或者 RAM 中。然而, 传统的数据库则是通过驱动磁盘来获取数据。由于所有的数据都存储与管理在主存中，内存数据库相比传统的数据库更不稳定，因为当计算机断电或 RAM 崩溃时，数据将会丢失。内存数据库可以通过将每个操作存储在日志中或采取快照的方式在磁盘上持久化数据。&lt;/p>
&lt;h2 id="目标">目标&lt;/h2>
&lt;p>我们的目标是用 Go 编写一个简单、快速、嵌入式和可持久化的键/值数据库，并且实现以下功能&lt;/p>
&lt;ul>
&lt;li>支持类似 Redis 的数据结构：&lt;code>string&lt;/code>, &lt;code>hash&lt;/code>, &lt;code>set&lt;/code>, &lt;code>zset&lt;/code>&lt;/li>
&lt;li>具有低延时和高吞吐量&lt;/li>
&lt;li>支持事务，ACID 语义&lt;/li>
&lt;li>&lt;a href="https://github.com/arriqaaq/flashdb#append-only-file">仅可写入的持久化文件&lt;/a>格式&lt;/li>
&lt;li>可以通过使用 TTL 来处理&lt;a href="https://github.com/arriqaaq/flashdb#data-expiration">数据过期&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="开始">开始&lt;/h2>
&lt;p>我们的目的是建立一个非常简单的 KV（键/值）存储，以便让每个人都能轻松理解和实现。在 Go 中，有相当多的嵌入式键/值存储可用，以下是一些例子：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dgraph-io/badger">BadgerDB&lt;/a> - BadgerDB 是一个完全用 Go 编写的嵌入式、可持久化、简单而快速的键值（KV）数据库。它旨在成为 RocksDB 等非基于 Go 实现的键值存储的高性能替代品&lt;/li>
&lt;li>&lt;a href="https://github.com/boltdb/bolt">BoltDB&lt;/a> - BoltDB 是一个基于 B+ 树的嵌入式 Go 键/值数据库&lt;/li>
&lt;li>&lt;a href="https://github.com/tidwall/buntdb">BuntDB&lt;/a> - BuntDB 是一个应用于 Go 的嵌入式内存键/值数据库，具有自定义索引和地理空间支持&lt;/li>
&lt;li>&lt;a href="https://github.com/hashicorp/go-memdb">go-memdb&lt;/a> - 基于不可变基数树的 Golang 内存数据库&lt;/li>
&lt;li>&lt;a href="https://github.com/xujiajun/nutsdb">nutsdb&lt;/a> - 一个基于磁盘的键值存储&lt;/li>
&lt;/ul>
&lt;p>读起来比做起来容易，我们可以通过阅读庞大的代码库来了解其内部结构，但这对很多人来说是开始的障碍。&lt;a href="https://github.com/xujiajun/nutsdb">NutsDB&lt;/a> 是我在 2-3 年前读到的第一批简单易懂的代码之一。&lt;/p>
&lt;p>因此，FlashDB 是由易于理解的组合库组成的。我们的想法是为任何想学习关于如何编写一个简单的 ACID 数据库的新手提供桥梁。&lt;/p>
&lt;h2 id="架构">架构&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/flashdb_architecture.png" alt="flashdb_architecture">&lt;/p>
&lt;p>FlashDB 的架构很简单并且支持各种 Redis 命令。Redis 本质上不是一个普通的键值存储，而是一个数据结构服务器，支持不同种类的值。事实上 Redis 使用以下数据结构实现了各种类型。&lt;/p>
&lt;h3 id="字符串">字符串&lt;/h3>
&lt;p>Redis 字符串类型是你能与 Redis 键关联的最简单的值类型。由于 Redis 键是字符串，当我们把字符串类型也作为一个值时，我们是把一个字符串映射到另一个字符串。这是用&lt;a href="https://github.com/arriqaaq/art">可变基数树&lt;/a>（ART）实现的，这样可以很容易进行扫描。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/arriqaaq/skiplist">String&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="哈希">哈希&lt;/h3>
&lt;p>用哈希表示对象很方便，而实际上哈希中可放入的字段数量并没有实际限制（除了可用的内存），所以你可以在应用程序中以许多不同的方式使用哈希。这是用一个非常简单的 HashMap 数据结构实现的。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/arriqaaq/hash">Hash&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="集合">集合&lt;/h3>
&lt;p>Redis 集合是无序的字符串集合。我们可以对集合进行一些操作，比如检测某个元素是否已经存在，查找多个集合之间的交集、并集或差集等。这也是用一个简单的 HashMap 数据结构实现的。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/arriqaaq/set">Set&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="有序集合">有序集合&lt;/h3>
&lt;p>有序集合是一种数据类型，类似于集合与哈希的混合体。和集合一样，有序集合也是由唯一的、不重复的字符串元素组成的。所以从某种意义上说，有序集合也是一个集合。&lt;/p>
&lt;p>虽然集合内的元素并不是有序的，但有序集合中的每个元素都与一个浮点值相关，称为分数（该类型类似于哈希，因为每个元素都被映射到一个值）。&lt;/p>
&lt;p>这是对用于字符串的跳表结构稍加修改实现的。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/arriqaaq/zset">ZSet&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="持久化">持久化&lt;/h2>
&lt;p>虽然已经有了很多持久化机制，我选择了一个简单的 append-only 日志设计方式，因为它比较容易实现和理解。&lt;strong>AOF&lt;/strong>(仅可写入的文件)记录了服务器收到的每一个写操作，这些操作将在服务器启动时再重放，重建原始数据集。命令的记录格式与 API 协议本身相同，以只写入的方式进行。当日志过大时，FlashDB 能够在后台分片处理日志。这是基于 &lt;a href="https://github.com/tidwall/wal">wal&lt;/a> 实现的。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/arriqaaq/aol">Append Only Log&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>综上，&lt;a href="https://github.com/arriqaaq/flashdb">FlashDB&lt;/a> 仅依靠上述五个简单的库就完成了，具有事务与 ACID 支持。它很易于理解，但我希望这对任何有兴趣学习如何编写数据库的人来说是一个有用的教程。&lt;/p>
&lt;p>&lt;a href="https://github.com/arriqaaq/flashdb">GitHub - arriqaaq/flashdb: FlashDB is an embeddable, in-memory key/value database in Go (with Redis like commands)&lt;/a>&lt;/p>
&lt;h2 id="讲座">讲座&lt;/h2>
&lt;p>我最近在 Golang meetup 上分享了这个项目，这是幻灯片的内容。&lt;/p>
&lt;p>&lt;a href="https://www.canva.com/design/DAE8sGRyC2o/ZCuCaezQ6dYA0Oq24QxjUQ/view?utm_content=DAE8sGRyC2o&amp;amp;utm_campaign=designshare&amp;amp;utm_medium=link&amp;amp;utm_source=publishsharelink">https://www.canva.com/design/DAE8sGRyC2o/ZCuCaezQ6dYA0Oq24QxjUQ/view?utm_content=DAE8sGRyC2o&amp;amp;utm_campaign=designshare&amp;amp;utm_medium=link&amp;amp;utm_source=publishsharelink&lt;/a>&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://aly.arriqaaq.com/building-a-database-in-go">原文地址&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gocn/translator/blob/master/2022/w17_Writing_a_simple_in-memory_key-value_Database_in_Go.md">本文永久链接&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gocn/translator">GoCN &amp;lt;每周译 Go&amp;gt;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pseudoyu">译者：张宇&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/xkkhy">校对：小超人&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>个人工具箱（2022 年 5 月）</title><link>https://jpg6.com/en/2022/05/08/personal_tools_in_2022_may/</link><pubDate>Sun, 08 May 2022 15:47:16 +0800</pubDate><guid>https://jpg6.com/en/2022/05/08/personal_tools_in_2022_may/</guid><description>&lt;figure >
&lt;audio controls preload="metadata">
&lt;source src="https://jpg6.com/audios/here_after_us.mp3" type="audio/mpeg">
&lt;/audio>
&lt;i>&lt;figcaption>《后来的我们 - 五月天》&lt;/figcaption>&lt;/i>
&lt;/figure>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>自己一直是个工具控，也一直信奉着“工欲善其事，必先利其器”的理念，总是不断折腾和优化自己的硬件与软件，针对自己的一个特定需求会试图找到最优解，现在也慢慢找到了最适合自己使用习惯的解决方案。因为工作、学习和个人兴趣，设备经过很多次迭代，在这个时间节点作一下记录，后续也会不断更新，希望能够对其他人有所参考。&lt;/p>
&lt;p>&lt;em>&lt;strong>本文仅为 2022 年 5 月所整理的软硬件工具箱，最新版本请访问我在 GitHub 上维护的个人工具箱项目 『&lt;a href="https://github.com/pseudoyu/yu-tools">GitHub - pseudoyu/yu-tools&lt;/a>』。&lt;/strong>&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>注：下文所提及的所有软件服务均为本人购买/订阅或学生资格所享有的教育授权，请支持正版！&lt;/p>
&lt;/blockquote>
&lt;h2 id="主要设备">主要设备&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/my_desktop_setup_in_2022_may.jpeg" alt="my_desktop_setup_in_2022_may">&lt;/p>
&lt;h3 id="-电脑及配件">💻 电脑及配件&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Apple Mac Studio (2022)，M1 Max，64GB RAM，1T SSD&lt;/strong>，家里主力电脑，疫情在家很提升工作学习幸福感&lt;/li>
&lt;li>&lt;strong>Apple MacBook Pro (16-inch，2019) 银色，2.4 GHz 八核 Intel Core i9，32GB RAM，2T SSD&lt;/strong>，高频使用，基本走哪都会背着，在公司外接显示屏使用&lt;/li>
&lt;li>&lt;strong>明基（BenQ）EW3270U 4K 显示器&lt;/strong>，配合 Mac Studio 使用，在这个价位的 4K 里已经很不错了&lt;/li>
&lt;li>&lt;strong>明基（BenQ）ScreenBar Halo 屏幕挂灯&lt;/strong>，有了这个后基本上家里没开过主光源了，可以无线控制调节，很有氛围感&lt;/li>
&lt;li>&lt;strong>HHKB Professional Hybrid Type-S 双模静音版键盘，白色有刻&lt;/strong>，目前最爱的键盘&lt;/li>
&lt;li>&lt;strong>RealForce PFU 联名版 87 键，黑色&lt;/strong>，备用键盘，也是静电容经典了，但是没有很习惯，可能后面玩游戏会用，毕竟 HHKB 键位特殊&lt;/li>
&lt;li>&lt;del>&lt;strong>MM-Studio Class65 V2 客制化双模机械键盘，复古白&lt;/strong>（原本想通过这把入坑客制化，但是没心情折腾了，等了三个月发团，刚到手就原价转卖了）&lt;/del>&lt;/li>
&lt;li>&lt;strong>Apple Magic Keyboard 键盘，白色&lt;/strong>，开始用 HHKB 后就基本上不用了&lt;/li>
&lt;li>&lt;strong>Logitech MX Master 3 鼠标，灰色&lt;/strong>，主力鼠标，手感和侧键功能都很棒，配合剪视频也很棒&lt;/li>
&lt;li>&lt;strong>Apple Magic Mouse 2 鼠标，白色&lt;/strong>，手感不太行，基本上不用了&lt;/li>
&lt;li>&lt;strong>Apple Magic Trackpad 触控板，白色&lt;/strong>，在家配合着鼠标使用，体验感不错&lt;/li>
&lt;li>&lt;strong>闪极 100W Pro 氮化镓 GaN 充电器，黄色&lt;/strong>，外出携带，终于摆脱了苹果 96w 的大块头充电器&lt;/li>
&lt;/ul>
&lt;h3 id="-手机及平板">📱 手机及平板&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Apple iPhone 13 蓝色，256GB&lt;/strong>，主力手机，配合苹果全家桶体验很好，不过手机基本上戒了，主要就用作沟通和看看资讯，应该很久都不会换了&lt;/li>
&lt;li>&lt;strong>OnePlus 7 Pro，6.67&amp;quot;，Snapdragon 855，256GB&lt;/strong>，之前在香港的时候刷机 Root 了，配合 Google 全家桶很适合留学用，而且拍照风格很自然，不过现在也很少用了&lt;/li>
&lt;li>&lt;strong>Apple iPad Air (第三代)，256GB&lt;/strong>，主要用来作拓展屏或者放视频了，很少作什么生产力工具使用，大部分电脑能做的都不会放到 iPad 上做&lt;/li>
&lt;/ul>
&lt;h3 id="-相机及配件">🎥 相机及配件&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Sony A7M3 微单相机，黑色&lt;/strong>，大学攒了好久才买的第一台微单，摄影和视频都很全能，跟着我好多年了，到现在依然很够用&lt;/li>
&lt;li>&lt;strong>Sony 24-105mm F4 相机镜头&lt;/strong>，跟相机一起买的，出门基本上这一只大师镜头就足够应对绝大多数场景，虽然光圈只有 F4，但是成像品质真的高&lt;/li>
&lt;li>&lt;strong>Sony 55mm F1.8 蔡司相机镜头&lt;/strong>，收到的礼物，也是最喜欢的定焦镜头，主要用来拍人像&lt;/li>
&lt;li>&lt;strong>罗德 Wireless Go 无线麦克风&lt;/strong>，之前录视频用得比较多，便携易用，声音也很不错，后面会考虑多录一些视频&lt;/li>
&lt;/ul>
&lt;h3 id="-音箱及耳机">🎧 音箱及耳机&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Apple Airpods Pro 降噪耳机&lt;/strong>，原本不太习惯入耳式，后来体验了降噪后就离不开了&lt;/li>
&lt;li>&lt;strong>Apple HomePod mini 音箱&lt;/strong>，家里电脑主要输出设备，家里 Mac Studio 和显示器自带音质都不太行&lt;/li>
&lt;li>&lt;strong>Divoom Ditoo 像素复古音箱&lt;/strong>，收到的礼物，现在放在桌面作装饰，基本上没放过音乐&lt;/li>
&lt;li>&lt;strong>小爱智能音箱&lt;/strong>，联动家里的各类智能家居&lt;/li>
&lt;/ul>
&lt;h3 id="-存储设备">📦 存储设备&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>三星 T5 SSD，1TB&lt;/strong>，主要用来存储摄影和视频素材，很小，传输速度很快&lt;/li>
&lt;li>&lt;strong>希捷移动硬盘，1TB&lt;/strong>，Mac Studio 用来 Time Machine 备份使用的&lt;/li>
&lt;/ul>
&lt;h3 id="-休闲娱乐">🎮 休闲娱乐&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Kindle Oasis 2 电子书阅读器&lt;/strong>，以前看得比较多，现在基本上看实体书以及手机 Books 上看&lt;/li>
&lt;li>&lt;strong>Nintendo Switch 主机，动物森友会特别版&lt;/strong>，主要用来玩宝可梦，&lt;a href="https://pseudoyu.notion.site/f5f9e6e31b4744a7a1284eaf55451462?v=6e3be0ced2f44305b9ff3a8298e72de5">从 18 年开始陆陆续续也买了不少游戏&lt;/a>，很多都还没来得及玩，卡带收藏爱好者&lt;/li>
&lt;li>&lt;strong>Nintendo Switch Pro 手柄，任天堂明星大乱斗特别版&lt;/strong>，体验感比自带的 Joy-Con 好多了&lt;/li>
&lt;/ul>
&lt;h2 id="软件工具">软件工具&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/my_softwares_in_may_2022.png" alt="my_softwares_in_may_2022">&lt;/p>
&lt;h3 id="-系统拓展">🛠 系统拓展&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>CleanMyMac X&lt;/strong>，电脑管家，主要用来清理缓存和软件卸载&lt;/li>
&lt;li>&lt;strong>AppCleaner&lt;/strong>，功能很单一的应用卸载工具&lt;/li>
&lt;li>&lt;strong>One Switch&lt;/strong>，菜单栏快捷工具，主要用来组织电脑休眠使用的&lt;/li>
&lt;li>&lt;strong>Alfred 4&lt;/strong>，快捷启动工具，配合一些 Workflow 功能很丰富，现在主要还用了它的剪贴板历史功能&lt;/li>
&lt;li>&lt;strong>Hammperspoon&lt;/strong>，主要用来通过 &lt;code>Option + hjkl&lt;/code> 组合键来弥补 HHKB 没有上下左右键的一些场景&lt;/li>
&lt;li>&lt;strong>Bartender 4&lt;/strong>，菜单栏管理工具，主要隐藏一些软件服务菜单栏图标&lt;/li>
&lt;li>&lt;strong>BetterTouchTool&lt;/strong>，触控板及 Touchbar 管理，主要给 Macbook Pro 配置触控版用的&lt;/li>
&lt;li>&lt;strong>Magnet&lt;/strong>，分屏工具&lt;/li>
&lt;li>&lt;strong>iStat Menus&lt;/strong>，系统状态显示，主要显示 CPU、内存和网络等状态&lt;/li>
&lt;li>&lt;strong>AirBuddy&lt;/strong>，耳机管理工具，感觉连接耳机更顺滑了一些&lt;/li>
&lt;li>&lt;strong>HazeOver&lt;/strong>，桌面效果工具，显示效果很不错&lt;/li>
&lt;li>&lt;strong>Plash&lt;/strong>，动态桌面拓展，在主屏幕放了一个简约的动态时间显示，也几乎不耗资源&lt;/li>
&lt;li>&lt;strong>DaisyDisk&lt;/strong>，磁盘管理，偶尔用来追踪大文件&lt;/li>
&lt;li>&lt;strong>Menubar X&lt;/strong>，菜单栏网页拓展，之前偶尔挂一些小工具，现在用得也少了&lt;/li>
&lt;li>&lt;strong>Logi Options+&lt;/strong>，罗技配置工具，配置鼠标功能按键用的，不过基本上用的默认值&lt;/li>
&lt;/ul>
&lt;h3 id="-文件管理">📁 文件管理&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>OneDrive&lt;/strong>，5TB 空间，存储大部分个人数据，通过客户端挂载本地目录来同步，速度不错&lt;/li>
&lt;li>&lt;strong>iCloud&lt;/strong>，200GB 空间，主要用于照片备份与软件数据同步&lt;/li>
&lt;li>&lt;strong>Dropbox&lt;/strong>，2GB 空间，主要配合 Cryptomator 对敏感数据加密备份&lt;/li>
&lt;li>&lt;del>&lt;strong>Google Drive&lt;/strong>，1TB 空间（因学校从 Google 服务转向 Microsoft 服务，已弃用）&lt;/del>&lt;/li>
&lt;li>&lt;del>&lt;strong>百度网盘&lt;/strong>，存储影音及备份工具（以前存储大量视频剪辑文件用，已弃用）&lt;/del>&lt;/li>
&lt;/ul>
&lt;h3 id="-安全工具">🔐 安全工具&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>ElPass&lt;/strong>，密码管理工具，界面很喜欢，OTP 以及 Server 管理功能很惊艳，现在所有帐号、密码、证件和银行卡都在这里管理了，用 iCloud 和 Dropbox 进行同步和备份&lt;/li>
&lt;li>&lt;strong>GPG Keychain&lt;/strong>，macOS GPG 加密工具客户端，主要用来为 Git 提交进行签名&lt;/li>
&lt;li>&lt;strong>Cryptomator&lt;/strong>，文件目录加密工具，用于加密备份证件等隐私数据，配合网盘使用&lt;/li>
&lt;li>&lt;strong>DAMA&lt;/strong>，图片隐私打码工具，通过 TestFlight 尝鲜了测试版&lt;/li>
&lt;/ul>
&lt;h3 id="-网络工具">🌏 网络工具&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Surge&lt;/strong>，网络代理、调试工具，家里的 Mac Studio 通过 Surge 来作为家里 Wifi 的 DHCP 服务器，接管家里的网络实现全网代理，主要给 iPad 访问外网以及 Switch 下载游戏加速用&lt;/li>
&lt;li>&lt;strong>AdGuard Home&lt;/strong>，通过网络流量过滤与 DNS 实现去广告，很强大&lt;/li>
&lt;li>&lt;strong>ClashX&lt;/strong>，网络代理工具，买 Surge 前主力用的，现在留了一个备用线路&lt;/li>
&lt;li>&lt;strong>OpenVPN Connect&lt;/strong>，openvpn 客户端，连接公司内网服务器使用&lt;/li>
&lt;li>&lt;del>&lt;strong>Tunnelblick&lt;/strong>，上一个项目在用，不过界面没有上面的好，已弃用&lt;/del>&lt;/li>
&lt;li>&lt;strong>Safari&lt;/strong>，主力浏览器，通过 iCloud 多设备同步
&lt;ul>
&lt;li>&lt;strong>AdGuard Home&lt;/strong>，去广告插件&lt;/li>
&lt;li>&lt;strong>Elpass&lt;/strong>，自动填充密码&lt;/li>
&lt;li>&lt;strong>Downie&lt;/strong>，下载插件，一键识别媒体并下载&lt;/li>
&lt;li>&lt;strong>NetNewsWire&lt;/strong>，自动抓取网站订阅链接&lt;/li>
&lt;li>&lt;strong>Vinegar+Baking Soda&lt;/strong>，把 YouTube 以及其他一些视频网站的视频播放器转回 HTML5 播放器，简约，体验感很不错&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Brave&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>MetaMask&lt;/strong>，钱包插件&lt;/li>
&lt;li>&lt;strong>Elpass&lt;/strong>，自动填充密码&lt;/li>
&lt;li>&lt;strong>豆伴&lt;/strong>，备份和查看豆瓣数据&lt;/li>
&lt;li>&lt;strong>YouTube Dual Subtitles&lt;/strong>，支持多语言字幕&lt;/li>
&lt;li>&lt;strong>YouTubeEnhancer&lt;/strong>，增强 YouTube 播放器功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;strong>Chrome&lt;/strong>（迁移至 Brave，已弃用）&lt;/del>&lt;/li>
&lt;/ul>
&lt;h3 id="-实用工具">🧰 实用工具&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Bob&lt;/strong>，划词/截图翻译工具，配合 &lt;a href="https://github.com/clubxdev/bob-plugin-deeplx">DeepL X 拓展插件&lt;/a>和 &lt;a href="https://zu1k.com">zu1k&lt;/a> 大佬发布的 &lt;a href="https://github.com/zu1k/deepl-api-rs">DeepL Free Api Docker 镜像&lt;/a>，完美体验，后面还更新了独立的 OCR 功能，更强大了&lt;/li>
&lt;li>&lt;strong>Tern-Subtitle File Translator&lt;/strong>，我配合了 IBM 提供的 API，进行字幕自动中英翻译&lt;/li>
&lt;li>&lt;strong>qBittorrent&lt;/strong>，通过 RSS 管理器来订阅特定 PT 站的番剧等媒体资源，自动更新下载&lt;/li>
&lt;li>&lt;strong>Downie&lt;/strong>，视频源下载工具，下载 YouTube 或者 B 站的一些视频，作剪辑素材用&lt;/li>
&lt;li>&lt;strong>PicGo&lt;/strong>，图床管理工具，主要写博客的时候上传图片到 GitHub 图床并且生成自定义的 Markdown 格式，可以直接嵌入文章&lt;/li>
&lt;li>&lt;strong>BetterZip&lt;/strong>，压缩/解压工具，基本上装机必备了，目前遇到的格式都支持了&lt;/li>
&lt;li>&lt;strong>PDF Expert&lt;/strong>，PDF 查看编辑工具，主要用来做一些合并和编辑，查看的话经常还是用自带的 Preview&lt;/li>
&lt;li>&lt;strong>PDF Squeezer&lt;/strong>，PDF 压缩工具，压缩效果很不错，使用也很方便&lt;/li>
&lt;li>&lt;strong>Image Smith&lt;/strong>，图片压缩工具，刚尝试的一个新工具，很不错，之后作主力压缩了&lt;/li>
&lt;li>&lt;strong>TinyPNG4Mac&lt;/strong>，之前博客图片上传前都会压一些，功能很简单，现在作为备用了&lt;/li>
&lt;li>&lt;strong>Rime 鼠须管&lt;/strong>，定制化输入法，体验很好且数据本地保存，安全稳定&lt;/li>
&lt;li>&lt;strong>Time Machine&lt;/strong>，备份工具，主要给 Mac Studio 作实时备份用&lt;/li>
&lt;li>&lt;strong>brew&lt;/strong>，Homebrew 安装工具，基本上开发有关的都用 brew 装了，方便管理升级&lt;/li>
&lt;li>&lt;strong>TestFlight&lt;/strong>，尝鲜一些测试版软件用&lt;/li>
&lt;/ul>
&lt;h3 id="-记录工具">📝 记录工具&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Logseq&lt;/strong>，现在主力的生活记录、任务管理和笔记工具，基于双向链接打造了自己的信息管理系统，而且通过 Journal 以文本条目的形式记录没有心智负担，建议可以看一下 &lt;a href="https://lutaonan.com">Randy&lt;/a> 的 &amp;lt;&lt;a href="https://www.bilibili.com/video/BV1X44y1K7X1">我如何使用 Logseq 管理我的生活和笔记&lt;/a>&amp;gt;，很有启发&lt;/li>
&lt;li>&lt;strong>Notion&lt;/strong>，原本作笔记和任务管理，后来都迁移到了 Logseq，所以就只作为软件订阅管理、游戏记录的一些工具，数据库还是很强大的&lt;/li>
&lt;li>&lt;strong>Hook&lt;/strong>，文件资源双向链接工具，目前主要用来追踪本地的一些视频之类的大文件，可以以链接的形式嵌入到 Logseq 里&lt;/li>
&lt;li>&lt;strong>Office 365&lt;/strong>，主要文档/PPT/表格处理工具，其实工作后已经主要都是 Markdown 写为主了，但是最后还是得通过 Word 来排版&lt;/li>
&lt;li>&lt;strong>iWork 全家桶&lt;/strong>，Apple 自带文档处理工具&lt;/li>
&lt;li>&lt;strong>Typora&lt;/strong>，主要 Markdown 编辑器，最完美的 Markdown 编辑器了，偶尔要转存一些文本的时候也会通过 Alfred 唤出来&lt;/li>
&lt;li>&lt;strong>MarginNote 3&lt;/strong>，用来阅读一些论文、书籍的工具，用得不算很多&lt;/li>
&lt;li>&lt;strong>XMind8 Pro&lt;/strong>，主要思维导图工具，之前在学校的时候做笔记用的比较多，工作后反而系统性学习整理得少了，需要保持习惯&lt;/li>
&lt;/ul>
&lt;h3 id="-开发工具">👨🏻‍💻 开发工具&lt;/h3>
&lt;ul>
&lt;li>编辑器
&lt;ul>
&lt;li>&lt;strong>JetBrains GoLand&lt;/strong>，主力工作 Go 开发 IDE，很强大，目前用 Edu 身份订阅着全家桶，希望后面能通过开源项目续着
&lt;ul>
&lt;li>&lt;strong>Material Theme UI + Atom Material Icons&lt;/strong>，很美观的主题&lt;/li>
&lt;li>&lt;strong>GitHub Copilot&lt;/strong>，代码 AI 补全，很智能&lt;/li>
&lt;li>&lt;strong>GitToolBox&lt;/strong>，提示一些 Git 状态信息&lt;/li>
&lt;li>&lt;strong>IdeaVim&lt;/strong>，配置 Vim 键位&lt;/li>
&lt;li>&lt;strong>PlantUML Integration&lt;/strong>，用来画 UML 图，目前感觉写和预览体验最好的平台了&lt;/li>
&lt;li>&lt;strong>WakaTime&lt;/strong>，用来记录编码项目、语言和所用时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>VS Code&lt;/strong>，代码编辑工具，辅助开发
&lt;ul>
&lt;li>&lt;strong>Serendipity&lt;/strong>，新尝试的一个很喜欢的主题&lt;/li>
&lt;li>&lt;strong>GitHub Copilot&lt;/strong>，代码 AI 补全，重度依赖&lt;/li>
&lt;li>&lt;strong>Beancount&lt;/strong>，用来复式记账，配合 fava 工具进行可视化&lt;/li>
&lt;li>&lt;strong>Markdown All in One&lt;/strong>，用来增强对 Markdown 的支持，主要用来写博客&lt;/li>
&lt;li>&lt;strong>Rainbow Brackets&lt;/strong>，给配对的括号加上颜色&lt;/li>
&lt;li>&lt;strong>go&lt;/strong>，Go 语言环境支持&lt;/li>
&lt;li>&lt;strong>solidity&lt;/strong>，智能合约编写支持&lt;/li>
&lt;li>&lt;strong>WakaTime&lt;/strong>，用来记录编码项目、语言和所用时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Atom&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>go-plus&lt;/strong>，Go 语言环境支持&lt;/li>
&lt;li>&lt;strong>fabric-go&lt;/strong>，用来调试 fabric 1.4 版本的链码，可以自动通过镜像部署，很方便，这也是我 Atom 编辑器的唯一用途了&lt;/li>
&lt;li>&lt;strong>wakatime&lt;/strong>，用来记录编码项目、语言和所用时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>JetBrains PyCharm Professional Edition&lt;/strong>，Python 编辑器
&lt;ul>
&lt;li>&lt;strong>Material Theme UI + Atom Material Icons&lt;/strong>，很美观的主题&lt;/li>
&lt;li>&lt;strong>GitHub Copilot&lt;/strong>，代码 AI 补全，很智能&lt;/li>
&lt;li>&lt;strong>GitToolBox&lt;/strong>，提示一些 Git 状态信息&lt;/li>
&lt;li>&lt;strong>IdeaVim&lt;/strong>，配置 Vim 键位&lt;/li>
&lt;li>&lt;strong>WakaTime&lt;/strong>，用来记录编码项目、语言和所用时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Xcode&lt;/strong>，macOS 及 iOS 开发 IDE&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>终端
&lt;ul>
&lt;li>&lt;strong>Warp&lt;/strong>，新尝试的 Rust 编写的终端，体验感很棒，完全作为主力终端了&lt;/li>
&lt;li>&lt;strong>iTerm2&lt;/strong>，之前一直用，现在主要用来切多个服务器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>服务器管理
&lt;ul>
&lt;li>&lt;strong>ssh&lt;/strong>，配合 Warp 和 iTerm2 的 Profile 来连接服务器用&lt;/li>
&lt;li>&lt;strong>Termius&lt;/strong>，服务器管理工具，主要是可以云端同步配置，跟公司同事调试测试的时候都不需要自己再配本地环境，比较方便，然后也使用 SFTP 来传文件&lt;/li>
&lt;li>&lt;strong>ServerCat&lt;/strong>，服务器状态监控，界面很不错&lt;/li>
&lt;li>&lt;strong>Fetch&lt;/strong>，备用远程文件传输工具，很老牌了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据库管理
&lt;ul>
&lt;li>&lt;strong>Sequel Ace&lt;/strong>，主力数据库管理工具，是之前开源版本 Sequel Pro 的一个维护版本，界面简约但是功能很强大&lt;/li>
&lt;li>&lt;strong>JetBrains DataGrip&lt;/strong>，主要通过 Groovy 脚本来自动导出数据库的 Markdown 文件，很方便写文档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接口调试
&lt;ul>
&lt;li>&lt;strong>Paw&lt;/strong>，主力接口调试工具，限免的时候注册的，速度很快，多环境以及分支管理很强大&lt;/li>
&lt;li>&lt;del>&lt;strong>Postman&lt;/strong>，以前用的接口调试工具，但是界面太繁杂了，而且反应有点慢，弃用了&lt;/del>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文档查看: &lt;strong>Dash&lt;/strong>，配合 Alfred 查文档很方便&lt;/li>
&lt;li>容器: &lt;strong>Docker Desktop&lt;/strong>，虽然占资源很高，但是确实方便&lt;/li>
&lt;li>绘图工具
&lt;ul>
&lt;li>&lt;strong>PlantUML&lt;/strong>，配合 GoLand 里插件通过语法画流程图，修改和版本维护很方便&lt;/li>
&lt;li>&lt;strong>Draw.io&lt;/strong>，一些很复杂的架构图和部署图通过这个客户端画，有点简陋但是够用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>版本控制
&lt;ul>
&lt;li>&lt;strong>git&lt;/strong>，版本管理工具
&lt;ul>
&lt;li>&lt;a href="https://github.com/commitizen/cz-cli">git-cz&lt;/a>，交互式规范化提交信息&lt;/li>
&lt;li>&lt;a href="https://github.com/git-chglog/git-chglog">git-chglog&lt;/a>，用来自动生成格式化 CHANGELOG&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;strong>Fork&lt;/strong>，git 客户端工具（已弃用，改为命令行配合 alias）&lt;/del>&lt;/li>
&lt;li>&lt;strong>GitHub&lt;/strong>，我的个人博客、图床以及开发项目都通过 GitHub 管理&lt;/li>
&lt;li>&lt;strong>GitLab&lt;/strong>，工作项目通过公司 GitLab 进行管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="-视频剪辑">📹 视频剪辑&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Final Cut Pro X&lt;/strong>，当时优惠价买了全家桶，从 PR 转到了 FCPX 作为主力剪辑工具，在 macOS 上比 PR 体验好多了&lt;/li>
&lt;li>&lt;strong>剪映专业版&lt;/strong>，语音识别智能匹配字幕的功能很强大，3.0 版本还支持导出 &lt;code>.srt&lt;/code> 格式了，再通过一个开源的 &lt;a href="https://github.com/GanymedeNil/srt2fcpxml">srt2fcpxml&lt;/a> 工具转回 FCPX 兼容的的字幕格式导入回 FCPX，简化字幕制作工作流，再也不用自己一点点对时间轴了&lt;/li>
&lt;li>&lt;strong>Compressor&lt;/strong>，主力压制工具，配合 FCPX 一些预设可以很便捷联动导出&lt;/li>
&lt;li>&lt;strong>HandBrake&lt;/strong>，备用开源视频压制工具，作一些简单压缩转码使用了&lt;/li>
&lt;li>&lt;strong>大拍档剪辑助手&lt;/strong>，用来清理 FCPX 的缓存，也有一些无版权音乐下载、素材管理的小工具&lt;/li>
&lt;li>&lt;del>&lt;strong>IINA&lt;/strong>，之前的主力视频播放器，订阅了 Infuse 后弃用了&lt;/del>&lt;/li>
&lt;/ul>
&lt;h3 id="-图片处理">📷 图片处理&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Affinity Photo&lt;/strong>，替代 Photoshop 的修图和调色工具，我拍完照后会用来处理和套 Luts&lt;/li>
&lt;li>&lt;strong>Pixelmator Pro&lt;/strong>，黑五半价买的，据说很强大，不过还没怎么用&lt;/li>
&lt;li>&lt;strong>Luminar 4&lt;/strong>，做一些简单的效果处理会比 Affinity Photo 这些便捷一些&lt;/li>
&lt;/ul>
&lt;h3 id="-邮件管理">📮 邮件管理&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Spark&lt;/strong>，电子邮件聚合工具，多端同步也很快，现在所有邮箱都通过 Spark 来管理了&lt;/li>
&lt;li>&lt;strong>Alimail&lt;/strong>，工作用邮箱&lt;/li>
&lt;li>&lt;strong>Outlook&lt;/strong>，主要用来管理 Office365 开发者帐号&lt;/li>
&lt;li>&lt;strong>Mail&lt;/strong>，Apple 自带邮件客户端&lt;/li>
&lt;/ul>
&lt;h3 id="-信息管理">📨 信息管理&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>NetNewsWire&lt;/strong>，RSS 订阅工具，多端同步很方便，慢慢转向 RSS 为自己的主要信息输入了&lt;/li>
&lt;li>&lt;strong>TweetBot&lt;/strong>，在电脑端用来发布和刷 Twitter 的客户端，主要是可以通过时间轴排列&lt;/li>
&lt;li>&lt;strong>Books&lt;/strong>，Apple 自带图书应用，可导入 epub 或 pdf 文件阅读&lt;/li>
&lt;li>域名及个人网站
&lt;ul>
&lt;li>&lt;strong>GitHub Pages&lt;/strong>，配合 GitHub Action 实现自动部署&lt;/li>
&lt;li>&lt;strong>Cloudflare&lt;/strong>，管理域名，以及对网站进行 CDN 加速&lt;/li>
&lt;li>&lt;strong>Vercel&lt;/strong>，配合 Heroku 的数据库部署了博客的 Cusdis 评论系统&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.douban.com/people/pseudo-yu">&lt;strong>豆瓣&lt;/strong>&lt;/a>，通过 GitHub Action 每天抓取豆瓣提供的 RSS，统计我的影音和书籍并更新到 GitHub 主页和个人网站介绍页里，也通过 Brave 的一个叫“豆伴”的插件来定时备份和导出&lt;/li>
&lt;/ul>
&lt;h3 id="-通讯社交">💬 通讯社交&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>微信&lt;/strong>，生活和工作大部分都还是会通过微信沟通&lt;/li>
&lt;li>&lt;strong>腾讯会议&lt;/strong>，工作用，主要会议工具&lt;/li>
&lt;li>&lt;strong>Microsoft Teams&lt;/strong>，偶尔参加一些线上研讨会使用&lt;/li>
&lt;li>&lt;strong>Gather&lt;/strong>，有趣的线上交流，正在推荐身边的朋友用，像宝可梦一样，能减轻疫情带来的距离感&lt;/li>
&lt;li>&lt;strong>钉钉&lt;/strong>，工作沟通以及偶尔处理我妹妹学校的一些信息用&lt;/li>
&lt;li>&lt;strong>Telegram&lt;/strong>，主要加了一些科技资讯、软件技巧的群，偶尔看看&lt;/li>
&lt;li>&lt;strong>Discord&lt;/strong>，主要参加一些项目获取资讯用的&lt;/li>
&lt;li>&lt;del>&lt;strong>QQ&lt;/strong>，大学时学校常用，已弃用&lt;/del>&lt;/li>
&lt;/ul>
&lt;h3 id="-影音娱乐">🎸 影音娱乐&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Infuse&lt;/strong>，视频播放及媒体管理工具，全平台可用且支持格式很多，配合 Plex 这些媒体服务器可以建立自己本地的动漫、电影和剧集库&lt;/li>
&lt;li>&lt;strong>Plex Media Server&lt;/strong>，流媒体管理服务器，可以指定本地目录自动获取元数据进行媒体库管理&lt;/li>
&lt;li>&lt;strong>Apple Music&lt;/strong>，主要听歌软件，配合 iOS 上的 Music Mate 慢慢建立自己的音乐库&lt;/li>
&lt;li>&lt;strong>Apple Podcasts&lt;/strong>，主要用来听一些博客&lt;/li>
&lt;li>&lt;strong>爱奇艺&lt;/strong>，送的会员，偶尔用来追一些热门自制剧&lt;/li>
&lt;li>&lt;strong>Netflix&lt;/strong>，用来追一些最新剧集，新加坡订阅&lt;/li>
&lt;li>&lt;strong>Disney+&lt;/strong>，用来看一些迪士尼动画、漫威剧集和电影，不过用得也不多了，也是新加坡订阅&lt;/li>
&lt;/ul>
&lt;h3 id="-手机-app">📲 手机 App&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/yu_ios_apps.png" alt="yu_ios_apps">&lt;/p>
&lt;ul>
&lt;li>🛠 系统拓展
&lt;ul>
&lt;li>&lt;strong>熊猫吃短信&lt;/strong>，过滤垃圾短信，很好用&lt;/li>
&lt;li>&lt;strong>AdGuard&lt;/strong>，浏览网页去广告工具&lt;/li>
&lt;li>&lt;strong>AT&lt;/strong>，重要日期纪念日/倒计时&lt;/li>
&lt;li>&lt;strong>OffScreen&lt;/strong>，使用手机时间追踪&lt;/li>
&lt;li>&lt;strong>谜底时钟&lt;/strong>，个性化时钟组件&lt;/li>
&lt;li>&lt;strong>谜底黑胶&lt;/strong>，个性化音乐播放组件&lt;/li>
&lt;li>&lt;strong>谜底空白&lt;/strong>，在屏幕中设置空白位置&lt;/li>
&lt;li>&lt;strong>Vinegar+Baking Soda&lt;/strong>，浏览器看视频使用 HTML5 播放器插件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>📁 文件管理
&lt;ul>
&lt;li>&lt;strong>文件&lt;/strong>，Apple 自带本地及 iCloud 文件管理&lt;/li>
&lt;li>&lt;strong>OneDrive&lt;/strong>，iOS 端&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🔐 安全工具
&lt;ul>
&lt;li>&lt;strong>Elpass&lt;/strong>，密码管理工具 iOS 端，支持双重验证&lt;/li>
&lt;li>&lt;strong>Google Authenticator&lt;/strong>，Google 双重验证工具&lt;/li>
&lt;li>&lt;strong>Microsoft Authenticator&lt;/strong>，Microsoft 双重验证工具&lt;/li>
&lt;li>&lt;strong>DAMA&lt;/strong>，图片隐私打码工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🌏 网络工具
&lt;ul>
&lt;li>&lt;strong>Surge&lt;/strong>，Surge 代理工具 iOS 端&lt;/li>
&lt;li>&lt;strong>Shadowrocket&lt;/strong>，备用代理工具&lt;/li>
&lt;li>&lt;strong>Speedtest&lt;/strong>，网络测速工具&lt;/li>
&lt;li>&lt;strong>小米 WIFI&lt;/strong>，管理家庭 Wifi 及设备&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🧰 实用工具
&lt;ul>
&lt;li>&lt;strong>欧陆词典&lt;/strong>，字典应用，可导入不同源&lt;/li>
&lt;li>&lt;strong>翻译&lt;/strong>，苹果自带翻译工具&lt;/li>
&lt;li>&lt;strong>ServerCat&lt;/strong>，服务器状态检测工具移动端&lt;/li>
&lt;li>&lt;strong>快捷指令&lt;/strong>，进行各类自动化操作&lt;/li>
&lt;li>&lt;strong>TestFlight&lt;/strong>，尝鲜一些测试版应用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>📝 记录工具
&lt;ul>
&lt;li>&lt;strong>Logseq&lt;/strong>，iOS 端，主要用来查看&lt;/li>
&lt;li>&lt;strong>Office 365&lt;/strong>，iOS 端，通过 Office365 帐号和 OneDrive 进行同步&lt;/li>
&lt;li>&lt;strong>iWork 全家桶&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>Notability&lt;/strong>，笔记工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🪙 数字资产
&lt;ul>
&lt;li>&lt;strong>imToken&lt;/strong>，iOS 数字钱包&lt;/li>
&lt;li>&lt;strong>TokenPocket&lt;/strong>，iOS 数字钱包&lt;/li>
&lt;li>&lt;strong>币安&lt;/strong>，Binance 交易所 iOS 客户端&lt;/li>
&lt;li>&lt;strong>欧易&lt;/strong>，OKEX 交易所 iOS 客户端&lt;/li>
&lt;li>&lt;strong>火币&lt;/strong>，Huobi 交易所 iOS 客户端&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🏚 家庭管理
&lt;ul>
&lt;li>&lt;strong>Home&lt;/strong>，苹果自带家庭应用，目前主要用来管 HomePod mini&lt;/li>
&lt;li>&lt;strong>米家&lt;/strong>，管理小米智能家居设备&lt;/li>
&lt;li>&lt;strong>小爱音箱&lt;/strong>，连接和管理小爱智能音箱，语音控制智能家居&lt;/li>
&lt;li>&lt;strong>点音&lt;/strong>，Divoom 像素音箱管理&lt;/li>
&lt;li>&lt;strong>Yeelight&lt;/strong>，控制氛围灯模式&lt;/li>
&lt;li>&lt;strong>小佩宠物&lt;/strong>，控制宠物智能家居&lt;/li>
&lt;li>&lt;strong>Health&lt;/strong>，苹果自带健康数据记录应用，主要用来记录睡眠&lt;/li>
&lt;li>&lt;strong>Grow&lt;/strong>，联动健康应用，生成健康数据&lt;/li>
&lt;li>&lt;strong>Zepp Life&lt;/strong>，联动小米体重秤等，记录健康数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>📨 信息管理
&lt;ul>
&lt;li>&lt;strong>Spark&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>NetNewsWire&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>Apple Books&lt;/strong>，电子书阅读器，主要导入 epub 格式看&lt;/li>
&lt;li>&lt;strong>Patreon&lt;/strong>，订阅及赞助支持某些技术大佬的平台&lt;/li>
&lt;li>&lt;strong>Twitter&lt;/strong>，iOS 端，主要国外资讯获取与发布平台&lt;/li>
&lt;li>&lt;strong>Instagram&lt;/strong>，iOS 端，主要用来发布摄影和日常照片&lt;/li>
&lt;li>&lt;strong>Facebook&lt;/strong>，iOS 端，个人状态更新平台，离开香港后用得比较少&lt;/li>
&lt;li>&lt;strong>微博&lt;/strong>，官方客户端，主要股票内资讯获取与发布平台&lt;/li>
&lt;li>&lt;strong>豆瓣&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>少数派&lt;/strong>，用来看一些工具类资讯&lt;/li>
&lt;li>&lt;strong>Outlook&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>Mail&lt;/strong>，苹果自带邮件应用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>👨🏻‍💻 工作求职
&lt;ul>
&lt;li>&lt;strong>LinkedIn&lt;/strong>，看一些外企的机会&lt;/li>
&lt;li>&lt;strong>BOSS 直骋&lt;/strong>，国内找工作主要用&lt;/li>
&lt;li>&lt;strong>脉脉&lt;/strong>，查询一些公司资讯用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>💰 支付工具
&lt;ul>
&lt;li>&lt;strong>支付宝&lt;/strong>，日常最主要支付工具&lt;/li>
&lt;li>&lt;strong>招商银行&lt;/strong>，招行卡管理&lt;/li>
&lt;li>&lt;strong>掌上生活&lt;/strong>，招行信用卡管理&lt;/li>
&lt;li>&lt;strong>中国工商银行&lt;/strong>，工行卡管理&lt;/li>
&lt;li>&lt;strong>AlipayHK&lt;/strong>，香港支付宝账户&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🚆 交通出行
&lt;ul>
&lt;li>&lt;strong>Maps&lt;/strong>，苹果自带地图应用，主要用来搜路线&lt;/li>
&lt;li>&lt;strong>高德地图&lt;/strong>，公司加班打车用这个&lt;/li>
&lt;li>&lt;strong>携程旅行&lt;/strong>，用来定机票和酒店&lt;/li>
&lt;li>&lt;strong>铁路 12306&lt;/strong>，用来定高铁票，不过后面大多在携程里直接定了&lt;/li>
&lt;li>&lt;strong>航旅纵横 Pro&lt;/strong>，用来查询航班信息、值机以及统计自己的出行，很好用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🛍 生活工具
&lt;ul>
&lt;li>&lt;strong>饿了么&lt;/strong>，点外卖和水果&lt;/li>
&lt;li>&lt;strong>淘宝&lt;/strong>，买一些日常用品&lt;/li>
&lt;li>&lt;strong>京东&lt;/strong>，主要买数码产品和小家电&lt;/li>
&lt;li>&lt;strong>大众点评&lt;/strong>，查询一些店的评价&lt;/li>
&lt;li>&lt;strong>大麦&lt;/strong>，看一些演出展览&lt;/li>
&lt;li>&lt;strong>闲鱼&lt;/strong>，偶尔会看下一些二手&lt;/li>
&lt;li>&lt;strong>当当&lt;/strong>，买纸质书，大多技术为主&lt;/li>
&lt;li>&lt;strong>个人所得税&lt;/strong>，年度汇算用的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>💬 通讯社交
&lt;ul>
&lt;li>&lt;strong>微信&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>腾讯会议&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>钉钉&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>Telegram&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>Discord&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>Clubhouse&lt;/strong>，语音聊天室工具，热度过去了现在用得也比较少了&lt;/li>
&lt;li>&lt;del>&lt;strong>QQ&lt;/strong>，iOS 客户端，已弃用&lt;/del>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>🎸 影音娱乐
&lt;ul>
&lt;li>&lt;strong>Infuse&lt;/strong>，iOS 端，可以局域网连接 Mac Studio 的 Plex 媒体库服务器&lt;/li>
&lt;li>&lt;strong>YouTube&lt;/strong>，用来看各类国外博主与技术视频&lt;/li>
&lt;li>&lt;strong>哔哩哔哩&lt;/strong>，主要用来看关注的各类博主更新&lt;/li>
&lt;li>&lt;strong>爱奇艺&lt;/strong>，iOS 客户端&lt;/li>
&lt;li>&lt;strong>Apple Music&lt;/strong>，iOS 端&lt;/li>
&lt;li>&lt;strong>Music Mate&lt;/strong>，探索新音乐，慢慢建立自己的音乐库&lt;/li>
&lt;li>&lt;strong>Apple Podcasts&lt;/strong>，主要通过 iOS 端收听播客&lt;/li>
&lt;li>&lt;strong>Pokémon Go&lt;/strong>，最爱的游戏了，在香港留下了很多记忆，可惜回来后玩不了了&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是我在 2022 年 5 月所自用的工具箱，花了好几天，把电脑和手机的 App 都彻底整理分类了一遍，随着使用时间越来越长，一直在做减法，也在不断优化自己的使用，希望能够对大家有所参考。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://blog.gasolin.idv.tw/tools/tooling-in-2021-Dec">個人工具箱（2021 十二月）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pseudoyu/yu-tools">GitHub - pseudoyu/yu-tools&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>免费的个人博客系统搭建及部署解决方案（Hugo + GitHub Pages + Cusdis）</title><link>https://jpg6.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/</link><pubDate>Thu, 24 Mar 2022 01:19:28 +0800</pubDate><guid>https://jpg6.com/en/2022/03/24/free_blog_deploy_using_hugo_and_cusdis/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;a href="https://www.jpg6.com">jpg6&lt;/a> 是我的个人博客网站，最早使用 &lt;a href="https://wordpress.com/">WordPress&lt;/a> 搭建在自己的 Vultr vps 上，因为网络访问比较慢所以迁移到了腾讯云服务器上并且进行备案，虽然访问速度有提升，但是发布博客的流程很繁琐，服务器的维护长期也是一笔不小的开支。&lt;/p>
&lt;p>因此，一直在探索能够既能保障国内外访问体验，又能够托管在一些平台上，实现部署和发布流程的最优化体验。后来也一直不断在改善博客系统搭建和发布流程，迄今为止对自己的全流程解决方案还是比较满意的，虽然部署和搭建上需要进行一些配置，但后续更新维护都很方便，因此，本文将这套免费、开源的个人博客系统搭建及部署解决方案进行全流程记录，希望对大家有所帮助。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;h3 id="博客平台">博客平台&lt;/h3>
&lt;p>目前已经有很多比较成熟的博客平台，如前文所提到的 WordPress，虽然功能强大，但对于个人博客站点来说有些太重了，&lt;del>也不够酷&lt;/del>，经过一番调研，最后选择了 &lt;a href="https://gohugo.io">Hugo&lt;/a> 这个静态网站生成器。&lt;/p>
&lt;p>Hugo 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。除了 Hugo 外， 还有 Gatsby、Jekyll、Hexo、Ghost 等选择，实现和使用都差不多，可以根据自己的偏好进行选择。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/pseudoyu_homepage.png" alt="pseudoyu_homepage">&lt;/p>
&lt;p>因为 Hugo 开源社区中 &lt;a href="https://github.com/shaform/hugo-theme-den">hugo-theme-den&lt;/a> 完全在我的审美上，所以我选择了 Hugo 并在这个主题基础上进行了一些个人定制化改造和配置，满足了自己的需求。&lt;/p>
&lt;h3 id="博客托管">博客托管&lt;/h3>
&lt;p>静态博客需要托管在一个平台上才能够实现外部访问，可以是自己的 vps 主机，也可以是 &lt;a href="https://pages.github.com">GitHub Pages&lt;/a>，或者是 &lt;a href="http://vercel.com">Vercel&lt;/a> 这样的 Serverless 平台，后两者都可以通过 GitHub 仓库进行关联。&lt;/p>
&lt;p>我选择了 GitHub Pages 这种方式，完全免费且和 GitHub 代码仓库无缝对接，能够满足我博客源文件备份和版本管理的需求，还可以通过强大且同样免费的 &lt;a href="https://github.com/features/actions">GitHub Action&lt;/a> 实现各种 CI/CD 的功能，如提交/更新博客源文件后自动构建生成博客静态文件并推送到 GitHub Pages 仓库进行部署，还可以配合一些定时任务实现自我介绍页面更新等功能。&lt;/p>
&lt;h3 id="博客域名">博客域名&lt;/h3>
&lt;p>使用 GitHub Pages 生成网站会自动分配一个 xxx.github.io 的默认域名，通过这个域名就可以直接对生成的博客网站进行访问，也可以通过域名解析配置自己的域名，如我的网站就是解析了 &lt;a href="https://www.jpg6.com">jpg6.com&lt;/a> 这个域名。&lt;/p>
&lt;p>我的域名是在 &lt;a href="https://www.namesilo.com">NameSilo&lt;/a> 购买的，并通过 &lt;a href="https://www.cloudflare.com">Cloudflare&lt;/a> 平台进行 CDN 加速，提升访问体验，并实现了域名重定向等功能，关于博客访问优化这一点后续会单独讲解。&lt;/p>
&lt;h3 id="访客分析">访客分析&lt;/h3>
&lt;p>作为一个持续更新运营的博客平台，我们一定很好奇我们哪篇文章阅读量最高、哪个关键词检索最频繁等，帮助我们专注在更有价值的内容创作与分享上，类似的工具也很多，我选择了 &lt;a href="https://splitbee.io">splitbee&lt;/a> 与 &lt;a href="https://search.google.com/search-console">Google Console&lt;/a> 来统计分析我的访客信息与搜索权重，此外，&lt;a href="https://www.cloudflare.com">Cloudflare&lt;/a> 也能够对网络流量进行分析，不过因为有很多网络无关流量，如爬虫等，所以参考性没有前两者强。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/splitbee_statistics.png" alt="splitbee_statistics">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/google_console_performance.png" alt="google_console_performance">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cloudflare_statistics.png" alt="cloudflare_statistics">&lt;/p>
&lt;h3 id="评论系统">评论系统&lt;/h3>
&lt;p>一个博客系统当然需要评论系统，像 WordPress 这种自身具备了评论插件，而静态博客则需要自己对接一些评论系统，我最开始选择的是第三方的 &lt;a href="https://disqus.com">Disqus&lt;/a>，简单易用，但是会自带很多广告推广，也不够简约，后来选择了 &lt;a href="https://lutaonan.com">Randy&lt;/a> 的 &lt;a href="https://cusdis.com">Cusdis&lt;/a>，一个轻量级的开源评论系统解决方案（从名字看也是深受 Disqus 其害忍不住自己开坑了哈哈），我通过 Vercel 自建，并链接了 &lt;a href="https://www.heroku.com">Heroku&lt;/a> 的免费 &lt;a href="https://www.postgresql.org">PostgreSQL&lt;/a> 数据库进行评论数据存储，实现了免费、稳定的评论系统，还支持邮件推送、Telegram Bot 提醒/快捷回复等功能。&lt;/p>
&lt;p>![cusdis_overview](&lt;a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/&lt;/a>
/image-hosting@master/images/cusdis_overview.png)&lt;/p>
&lt;h3 id="图片管理">图片管理&lt;/h3>
&lt;p>日常发布的文章中可能会涉及很多图片，将图片存储在静态博客源项目仓库中的话会使项目过于庞大，并且很难二次使用和管理，因此，我同样选择了 GitHub 作为图床工具，并使用 &lt;a href="https://molunerfinn.com/PicGo/">PicGo&lt;/a> 客户端进行图床管理，在上传前使用 &lt;a href="https://tinypng.com">TinyPNG&lt;/a> 进行压缩，并使用 &lt;a href="https://www.jsdelivr.com">jsDelivr&lt;/a> 服务为 GitHub 图床进行加速，这样就可以将所有图片存储在 GitHub 图床仓库，文章中以外链的方式嵌入图片。&lt;/p>
&lt;h2 id="发布流程">发布流程&lt;/h2>
&lt;p>通常 GitHub Pages 发布博客需要本地 &lt;code>hugo&lt;/code> 命令生成静态站点文件目录，&lt;code>cd&lt;/code> 到 &lt;code>public&lt;/code> 目录，并使用 &lt;code>git add&lt;/code>、&lt;code>git commit&lt;/code>、&lt;code>git push&lt;/code> 等命令提交到 GitHub Pages 仓库，实现博客的发布，因为每次更新都需要进行重复操作，且博客源 Markdown 文件无法进行很好的备份和版本管理。&lt;/p>
&lt;p>因此，我建立了一个博客源文件仓库，通过 GitHub Action 实现了一套自动化发布流程，仅需将 Hugo 博客源文件上传至 GitHub 仓库，会自动触发 CI 生成静态站点文件并推送到 GitHub Pages 仓库。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是我的个人博客解决方案，前期搭建有些繁琐，但一番折腾后，完美实现了我的需求，关于整个过程的详细步骤，我将会分多篇文章进行讲解，请持续关注，希望能够对大家有所帮助。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://gohugo.io">Hugo 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/shaform/hugo-theme-den">hugo-theme-den 主题仓库&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pages.github.com">GitHub Pages 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/features/actions">GitHub Action 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://vercel.com">Vercel 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cusdis.com">Cusdis 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.heroku.com">Heroku 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://molunerfinn.com/PicGo/">PicGo 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://splitbee.io">splitbee 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://search.google.com/search-console">Google Console 官方网站&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudflare.com">Cloudflare 官方网站&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>[译] 理解并用 Go 语言实现一个 HTTP 中间件</title><link>https://jpg6.com/en/2022/02/15/building_middlewares_with_golang/</link><pubDate>Tue, 15 Feb 2022 18:24:01 +0800</pubDate><guid>https://jpg6.com/en/2022/02/15/building_middlewares_with_golang/</guid><description>&lt;h2 id="简介">简介&lt;/h2>
&lt;p>当运行在不同计算机上的客户端与服务器进行通信时，就需要使用中间件。通过本文，读者将会了解什么是中间件、中间件使用场景以及它们是如何在 Go 语言中构建的。&lt;/p>
&lt;h3 id="什么是-http-中间件">什么是 HTTP 中间件&lt;/h3>
&lt;p>为了更好理解 HTTP 中间件是什么，先要解释一些基本概念。假如一个开发者想要建立两台计算机之间的通信（其中一台计算机为另一台提供资源或服务），他将会构建一个 client/server 系统来实现。服务器等待客户端请求资源或服务，并将请求的资源转发给客户端作为响应。请求的资源或服务可能为：&lt;/p>
&lt;ul>
&lt;li>客户端身份校验&lt;/li>
&lt;li>确认客户端对服务器提供的特定服务是否有访问权限&lt;/li>
&lt;li>提供服务&lt;/li>
&lt;li>保障数据安全，确保客户端无法访问未授权数据，防止数据被窃取&lt;/li>
&lt;/ul>
&lt;p>服务器分为无状态和有状态两类，无状态服务器不关心客户端通信状态，而有状态服务器则关心。&lt;/p>
&lt;p>中间件是一种将软件或企业应用连接到另一个软件应用，并构成分布式系统的软件实体。HTTP 请求被发送到 API 服务器，而服务器向客户端返回 HTTP 响应。&lt;/p>
&lt;p>中间件具备接收请求功能，可以在请求到达处理方法之前对其进行预处理。然后，它将处理具体方法，并将其响应结果发送给客户端。&lt;/p>
&lt;h2 id="中间件使用场景">中间件使用场景&lt;/h2>
&lt;p>最常见的使用场景为：&lt;/p>
&lt;ul>
&lt;li>日志记录器，用于记录每个 REST API 访问请求&lt;/li>
&lt;li>验证用户 session，并保持通信存活&lt;/li>
&lt;li>用户鉴权&lt;/li>
&lt;li>编写自定义逻辑以抽取请求数据&lt;/li>
&lt;li>为客户端提供服务时将属性附在响应信息&lt;/li>
&lt;/ul>
&lt;h2 id="中间件-handlers">中间件 Handlers&lt;/h2>
&lt;p>在 Go 语言中，中间件 Handler 是封装另一个 &lt;code>http.Handler&lt;/code> 以对请求进行预处理或后续处理的 &lt;code>http.Handler&lt;/code>。它介于 Go Web 服务器与实际的处理程序之间，因此被称为“中间件”。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/go_middleware_handlers.png" alt="go_middleware_handlers">&lt;/p>
&lt;p>下面是一个基本的中间件 Handler：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">middleware&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handler&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandlerFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Executing middleware before request phase!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将控制权交回 Handler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">handler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ServeHTTP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Executing middleware after response phase!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">mainLogic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 业务逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Executing mainHandler...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;OK&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// HandlerFunc 返回 HTTP Handler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">mainLogicHandler&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandlerFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mainLogic&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">middleware&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mainLogicHandler&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在终端运行代码，得到以下输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">go run middleware.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing middleware before request phase!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing mainHandler...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Executing middleware after response phase!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="日志中间件-handler">日志中间件 Handler&lt;/h3>
&lt;p>为了更好讲解日志中间件 Handler 是如何工作的，我们将实际构建一个并执行一些方法。以下示例创建了两个中间件 Handler：&lt;code>middlewareGreetingsHandler&lt;/code> 和 &lt;code>middlewareTimeHandler&lt;/code>。Gorilla Mux 路由的 &lt;code>HandleFunc()&lt;/code> 方法用于处理中间件方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">middlewareGreetingsHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Happy New Year, 2022!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">middlewareTimeHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">curTime&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Kitchen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the current time is %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">curTime&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">addr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ADDR&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServeMux&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/v1/greetings&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">middlewareHelloHandler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/v1/time&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">middlewareTimeHandler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;server is listening at %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mux&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先设置 ADDR 环境变量为空闲端口，并执行 &lt;code>go run main.go&lt;/code> 命令来运行服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ADDR&lt;/span>&lt;span class="o">=&lt;/span>localhost:8080
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>服务运行成功后，在浏览器中访问 &lt;code>localhost:8080/v1/greetings&lt;/code> 查看 &lt;code>middlewareGreetingsHandler&lt;/code> 的响应信息，访问 &lt;code>localhost:8080/v1/time&lt;/code> 查看 &lt;code>middlewareTimeHandler&lt;/code> 的响应信息。完成后，我们需要创建日志中间件来记录所有服务访问请求信息，列举请求方法、资源路径以及处理时间。首先我们要初始化一个新的结构体来实现 &lt;code>http.Handler&lt;/code> 接口的 &lt;code>ServeHTTP()&lt;/code> 方法。这个结构体将会有一个字段来追溯进程调用中的 &lt;code>http.Handler&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建一个名为 Logger 的请求日志中间件 Handler 结构体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">type&lt;/span> &lt;span class="nx">Logger&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handler&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ServeHTTP 将请求传递给真正的 Handler 并记录请求细节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">l&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Logger&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">ServeHTTP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">start&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">l&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ServeHTTP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s %s %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Method&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">URL&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Since&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// NewLogger 构造了一个新的日志中间件 Handler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handlerToWrap&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Handler&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Logger&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Logger&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">handlerToWrap&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>NewLogger()&lt;/code> 接收 &lt;code>http.Handler&lt;/code>，并返回一个新的封装后的 &lt;code>Logger&lt;/code> 实例。由于 &lt;code>http.ServeMux&lt;/code> 满足 &lt;code>http.Handler&lt;/code> 接口，可以使用日志中间件封装整个 mux。除此之外，由于 &lt;code>Logger&lt;/code> 实现了 &lt;code>ServeHTTP()&lt;/code> 方法并满足 &lt;code>http.Handler&lt;/code> 接口，它也可以被传递至 &lt;code>http.ListenAndServe()&lt;/code> 方法而非封装 mux。最后，修改 &lt;code>main()&lt;/code> 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">addr&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ADDR&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServeMux&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/v1/greetings&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">middlewareGreetingsHandler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/v1/time&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">middlewareTimeHandler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用日志中间件封装 mux
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">wrappedMux&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mux&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;server is listening at %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用 wrappedMux 而不是 mux 作为根 handler
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">addr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">wrappedMux&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新启动服务并请求 API，不论请求路径是什么，所有的请求日志都会展示在终端。&lt;/p>
&lt;h2 id="使用-gorillas-handlers-中间件进行日志记录">使用 Gorilla&amp;rsquo;s &lt;code>Handlers&lt;/code> 中间件进行日志记录&lt;/h2>
&lt;p>Gorilla Mux 路由有一个 &lt;code>Handlers&lt;/code> 包，为常见任务提供各种中间件，包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>LoggingHandler&lt;/code>：以 Apache 通用日志格式进行记录&lt;/li>
&lt;li>&lt;code>CompressionHandler&lt;/code>：压缩响应信息&lt;/li>
&lt;li>&lt;code>RecoveryHandler&lt;/code>: 从 panic 错误中恢复&lt;/li>
&lt;/ul>
&lt;p>在以下示例中，我们使用 &lt;code>LoggingHandler&lt;/code> 来实现 API 日志记录。首先，使用 &lt;code>go get&lt;/code> 命令安装包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">go get &lt;span class="s2">&amp;#34;github.com/gorilla/handlers&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入包，并在 &lt;code>loggingMiddleware.go&lt;/code> 程序中使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/gorilla/handlers&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/gorilla/mux&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">mainLogic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ResponseWriter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Processing request!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">w&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Write&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;OK&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Finished processing request&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">mux&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewRouter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mainLogic&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loggedRouter&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">handlers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LoggingHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Stdout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8080&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">loggedRouter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">go run loggingMiddleware.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器中访问 &lt;code>localhost:8080&lt;/code>，会显示以下输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">2022/01/05 10:51:44 Processing request!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2022/01/01 10:51:44 Finished processing request
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">127.0.0.1 - - &lt;span class="o">[&lt;/span>05/January/2022:10:51:44 +0530&lt;span class="o">]&lt;/span> &lt;span class="s2">&amp;#34;GET / HTTP/1.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">200&lt;/span> &lt;span class="m">2&lt;/span> 127.0.0.1 - - &lt;span class="o">[&lt;/span>05/January/2017:10:51:44 +0530&lt;span class="o">]&lt;/span> &lt;span class="s2">&amp;#34;GET /favicon.ico HTTP/1.1&amp;#34;&lt;/span> &lt;span class="m">404&lt;/span> &lt;span class="m">19&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本示例仅介绍了 Gorilla Mux &lt;code>Handlers&lt;/code> 包的用法。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文向读者介绍了什么是中间件。为了便于理解，从零开始构建了一个日志中间件程序，并通过 API 实现了一个使用场景。此外，还介绍并实践了一种在 Go 程序中构造中间件更简单的解决方案（即使用 Gorilla Mux Handler）。在未来的文章中，我将讲解如何在 Go 中构建 RPC 服务与客户端。&lt;/p>
&lt;h2 id="文章信息">文章信息&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://ghostmac.hashnode.dev/understanding-and-crafting-http-middlewares-in-go">原文地址&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ghostmac.hashnode.dev">原文作者：MacBobby Chibuzor&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gocn/translator/blob/master/2022/w07_building_middlewares_with_golang.md">本文永久链接&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gocn/translator">GoCN &amp;lt;每周译 Go&amp;gt;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pseudoyu">译者：张宇&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/xkkhy">校对：小超人&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>SonarQube 代码质量检查工具配置</title><link>https://jpg6.com/en/2021/10/27/sonarqube_code_check_setup/</link><pubDate>Wed, 27 Oct 2021 01:57:23 +0800</pubDate><guid>https://jpg6.com/en/2021/10/27/sonarqube_code_check_setup/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近负责公司一部分项目的代码仓库管理及 code review 等，用到了 SonarQube 这一代码质量检查工具，通过集成 GitLab CI，能够实现在每次合并请求/提交时自动执行代码质量检查并输出检测报告。&lt;/p>
&lt;p>本文记录了通过 GitLab 仓库导入项目的配置全流程，以便其他项目配置时参考。&lt;/p>
&lt;h2 id="sonarqube-项目配置">SonarQube 项目配置&lt;/h2>
&lt;h3 id="项目面板">项目面板&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sonarqube_homepage.png" alt="sonarqube_homepage">&lt;/p>
&lt;p>SonarQube 项目面板如上图所示，会以评级的方式对项目代码质量进行分析。每次进行代码分析后，可以很直观地对代码进行多维度的分析，在合并分支前，提交人员可参照分析结果对代码进行修改完善，减少了代码审阅人员不必要的工作量。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sonarqube_code_detail.png" alt="sonarqube_code_detail">&lt;/p>
&lt;p>点击具体指标则可以深入代码文件对检测出的问题进行标识，为人工 code review 提供了有效参照。&lt;/p>
&lt;h3 id="项目配置">项目配置&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/how_to_analyze.png" alt="how_to_analyze">&lt;/p>
&lt;p>点击右上角「新增项目」，可选择不同的分析方式，支持 Jenkins, GitLab CI 及 GitHub Actions 等常用代码仓库自动化工作流方式，本文将主要说明 GitLab CI 的配置方式。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/import_gitlab_project.png" alt="import_gitlab_project">&lt;/p>
&lt;p>选择 GitLab CI 后，选择关联 GitLab 帐号中的项目仓库，进行后续配置。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/project_code.png" alt="project_code">&lt;/p>
&lt;p>以 Go 项目为例，首先，我们需要按照提示手动创建 &lt;code>sonar-project.properties&lt;/code> 文件并粘贴配置信息。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/create_token.png.png" alt="create_token.png">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/config_cicd_var.png" alt="config_cicd_var">&lt;/p>
&lt;p>然后需要为项目创建 Token，并在 GitLab 中 「设置」-「CI/CD」-「变量」配置选项中填写 Token 及 URL 变量值。&lt;/p>
&lt;h3 id="ci-配置">CI 配置&lt;/h3>
&lt;p>进行基本项目配置后，需要通过 &lt;code>.gitlab-ci.yml&lt;/code> 配置 GitLab CI 工作流，我的配置如下图所示：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/config_gitlan_ci.png" alt="config_gitlan_ci">&lt;/p>
&lt;p>我主要设置了当仓库进行合并请求时，如 &lt;code>src&lt;/code> 目录下的代码有改变，则执行 &lt;code>testing&lt;/code> 流水线，通过 SonarQube 进行代码质量检查。&lt;/p>
&lt;p>GitLab CI 中还可以添加部署等脚本，与 SonarQube 工具配合使用，以实现工作流的优化。项目的 CI 脚本需要添加相应的 Runner 运行。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sonar_check_begin.png" alt="sonar_check_begin">&lt;/p>
&lt;p>当检测到合并请求时，sonarqube-check 会被触发执行，最终返回执行结果。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sonar_check_success.png" alt="sonar_check_success">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sonarqube_status.png" alt="sonarqube_status">&lt;/p>
&lt;p>此时点开 SonarQube 中项目的页面，则已经有了分析信息，本次代码质量检查完成。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对 GitLab 仓库中现有 Go 项目配置 SonarQube 代码质量检查工具的全流程。代码质量自动化检查是开发运维规范流程中重要的环节，尤其是在团队项目中，好的规范有助于工作流的优化，提升项目的整体质量。&lt;/p>
&lt;p>后续也将会对工作中用到的开发运维规范开源工具配置与使用进行记录，如有错漏，敬请交流指正。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://docs.sonarqube.org/latest/">SonarQube Document&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>BitXHub 跨链插件（Fabric）源码解读</title><link>https://jpg6.com/en/2021/09/09/blockchain_crosschain_bitxhub/</link><pubDate>Thu, 09 Sep 2021 15:14:26 +0800</pubDate><guid>https://jpg6.com/en/2021/09/09/blockchain_crosschain_bitxhub/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>之前提到过趣链科技的 BitXHub 跨链平台是业界较为完善的跨链开源解决方案，主要通过中继链、网关和插件机制对跨链流程中的功能、安全性和灵活性等进行了优化。&lt;/p>
&lt;p>目前公司团队在做一个 BaaS 平台的跨链模块，我在其中负责跨链适配器部分，对应 BitXHub 平台就是监听模块和应用链插件模块。适配器将对应用链上的跨链事件作监听，并将相应参数传给网关作跨链相关的业务逻辑需求。&lt;/p>
&lt;p>因此，打算对 BitXHub 的 &lt;a href="https://github.com/meshplus/pier-client-fabric">meshplus/pier-client-fabric&lt;/a> 插件源码作深入解读，学习其优秀的代码结构和功能模块，以便更好地实现自己的适配器功能。&lt;/p>
&lt;h2 id="跨链交易流程">跨链交易流程&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cross_chain_plugin.svg" alt="cross_chain_plugin">&lt;/p>
&lt;p>根据跨链业务需求，典型的跨链调用流程如上图所示。&lt;/p>
&lt;ol>
&lt;li>需要进行跨链交易的子链需要安装适配器并部署提供的跨链合约和业务合约&lt;/li>
&lt;li>用户通过 SDK 调用业务合约时，合约将调用跨链合约并抛出跨链事件&lt;/li>
&lt;li>子链相应适配器将会轮询或订阅跨链合约抛出的跨链事件并发送到跨链网关的监听模块&lt;/li>
&lt;li>跨链网关将从跨链事件中提取的响应方法和参数转换为目标子链可识别的交易&lt;/li>
&lt;li>跨链网关将转换后的交易提交到目标子链并执行&lt;/li>
&lt;/ol>
&lt;h2 id="适配器机制">适配器机制&lt;/h2>
&lt;h3 id="接口设计">接口设计&lt;/h3>
&lt;p>适配器主要负责与子链之间的交互，并以接口调用的方式参与跨链交互。主要提供以下接口。&lt;/p>
&lt;h4 id="调用链码">调用链码&lt;/h4>
&lt;p>适配器接收跨链网关发送的交易参数，封装为已适配子链接受的数据结构并调用链码。&lt;/p>
&lt;h4 id="查询跨链交易">查询跨链交易&lt;/h4>
&lt;p>子链将跨链相关细节存在 payload 字段中，如合约、用户等，适配器对这些信息进行解析与封装，提供相应接口给跨链网关查询。&lt;/p>
&lt;h4 id="查询历史交易信息">查询历史交易信息&lt;/h4>
&lt;p>适配器需要提供历史交易查询接口，以便于当跨链事件因网络传输等原因未收到时主动进行查询。&lt;/p>
&lt;h4 id="查询应用链基本信息">查询应用链基本信息&lt;/h4>
&lt;p>适配器需要提供其所适配子链相关信息的查询接口以便于跨链网关进行查询，如名称、类型等。&lt;/p>
&lt;h2 id="源码解读">源码解读&lt;/h2>
&lt;p>接下来将对 BitXHub 跨链插件（Fabric）的核心功能模块源码进行解读。&lt;/p>
&lt;h3 id="设计模式">设计模式&lt;/h3>
&lt;p>插件项目采用的是典型的“生产者-消费者”模型，很适合这样需要轮询/订阅接收数据的并发场景。这种模型用到了任意时刻只有一个 goroutine 对 channel 中的某一个数据进行访问的特性。&lt;/p>
&lt;h4 id="订阅轮询跨链事件">订阅/轮询跨链事件&lt;/h4>
&lt;p>插件需要构建一个生产者对象来订阅自己相应子链的跨链事件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 构造生产者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">ec&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">channelProvider&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithBlockEvents&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to create fabcli, error: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">eventClient&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">ec&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 订阅跨链事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">registration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">notifier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ec&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterChaincodeEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">meta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CCID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">meta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventFilter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to register chaincode event, error: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">registration&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">registration&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>订阅事件的方法是调用了 &lt;code>fabric-sdk-go&lt;/code> 的 &lt;code>RegisterChaincodeEvent()&lt;/code> 方法，需要注意的是，当不需要监听事件时，需要调用 &lt;code>Unregister()&lt;/code> 方法来取消订阅。&lt;/p>
&lt;p>方法中的 &lt;code>ccID&lt;/code> 是需要监听的链码 ID，&lt;code>eventFilter&lt;/code> 是需要监听的链码时间，而这个方法会返回一个 channel 接收数据（当取消订阅时，channel 会关闭）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">RegisterChaincodeEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ccID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventFilter&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Registration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">fab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CCEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">eventService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterChaincodeEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ccID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventFilter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将订阅了跨链合约的对象（即生产者）与消费者都置于无限循环中，当有跨链事件抛出时，生产者将会不断地向 channel 中放入数据，而消费者也不断从通道中取出数据。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 生产者将跨链事件写入通道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="nx">ccEvent&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">notifier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">ccEvent&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ccEvent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 消费者从通道中取出跨链事件数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ctx&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为生产者和消费者都在无限循环中，生产者的 goroutine 不会退出，channel 持续写入数据，而当没有新事件时，消费者将会阻塞，等待生产者接收新的数据并写入 channel。&lt;/p>
&lt;h3 id="插件初始化运行与关闭">插件初始化、运行与关闭&lt;/h3>
&lt;p>看了整体的设计模式，我们从程序的主入口看看整个插件项目运行的机制。&lt;/p>
&lt;h4 id="初始化">初始化&lt;/h4>
&lt;p>在 client 程序初始化中，首先根据自定义的结构构造了消费者对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 构造消费者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mgh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">newFabricHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">contractmeta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EventFilter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">appchainID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">done&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">csm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewConsumer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">configPath&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">contractmeta&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mgh&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="运行">运行&lt;/h4>
&lt;p>程序运行的入口很简单，就是对跨链合约进行轮询，并启动消费者对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Fabric consumer started&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">go&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">polling&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">consumer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关闭">关闭&lt;/h4>
&lt;p>关闭插件也很简单，即停止程序运行并取消订阅事件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 关闭插件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Stop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ticker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Stop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">consumer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Shutdown&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 consumer 包中取消订阅事件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Consumer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Shutdown&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">eventClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unregister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">registration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再深一层看，取消订阅事件是调用了 &lt;code>fabric-sdk-go&lt;/code> 的 &lt;code>Unregister()&lt;/code> 方法，会取消该事件的订阅并关闭相应通道。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Unregister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reg&lt;/span> &lt;span class="nx">fab&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Registration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">eventService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unregister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口实现">接口实现&lt;/h3>
&lt;p>除了对事件进行订阅监听外，插件还提供了一系列查询接口供网关调用，以完成相应跨链操作。&lt;/p>
&lt;h4 id="getproof">getProof()&lt;/h4>
&lt;p>如获取 Proof 信息等&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">getProof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span> &lt;span class="nx">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">proof&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">handle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span> &lt;span class="nx">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">([]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// query proof from fabric
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ledger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">consumer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">channelProvider&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">l&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransactionID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pd&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">common&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Payload&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unmarshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransactionEnvelope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Payload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pd&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pt&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">peer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Transaction&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">proto&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unmarshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pd&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pt&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">pt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Actions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">Payload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">retry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Retry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">attempt&lt;/span> &lt;span class="kt">uint&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">proof&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Can&amp;#39;t get proof&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="nx">strategy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Can&amp;#39;t get proof&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;error&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">proof&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="getchainid">getChainID()&lt;/h4>
&lt;p>该接口用于获取链的 ID&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Client&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetChainID&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">request&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ChaincodeID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">meta&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CCID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Fcn&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">GetChainId&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">consumer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ChannelClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Payload&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">chainIds&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Payload&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chainIds&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">chainIds&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">chainIds&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="其他接口">其他接口&lt;/h4>
&lt;p>其他更多接口实现细节详见 &lt;a href="https://github.com/meshplus/pier-client-fabric/blob/master/client.go">meshplus/pier-client-fabric/client.go&lt;/a>。&lt;/p>
&lt;h3 id="跨链合约">跨链合约&lt;/h3>
&lt;p>跨链合约是实现插件监听的重要部分，当业务需要跨链时，将会统一调用跨链合约，并与跨链网关进行交互。&lt;/p>
&lt;p>跨链合约提供了一系列接口供业务合约进行实现，因此按照一定的规范撰写业务合约则能简化跨链业务的开发和维护，跨链合约编写的规范详见&amp;lt;&lt;a href="https://github.com/meshplus/bitxhub/wiki/%E8%B7%A8%E9%93%BE%E5%90%88%E7%BA%A6%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3">跨链合约编写文档&lt;/a>&amp;gt;。&lt;/p>
&lt;h4 id="事件实现">事件实现&lt;/h4>
&lt;p>跨链合约是怎样将跨链事件抛出给插件的呢？&lt;/p>
&lt;p>在跨链合约的 &lt;code>Invoke()&lt;/code> 方法中，跨链合约首先通过 &lt;code>GetFunctionAndParameters()&lt;/code> 方法获取了合约调用者（也就是业务合约）的调用方法和相应参数，然后通过对方法名进行判断，从而调用不同的合约。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">broker&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Broker&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ChaincodeStubInterface&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">function&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetFunctionAndParameters&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">switch&lt;/span> &lt;span class="nx">function&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;getChainId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getChainId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;getInMessage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getInMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;getOutMessage&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getOutMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;EmitInterchainEvent&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">EmitInterchainEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid function: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">function&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, args: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们着重来分析一下当调用了 &lt;code>EmitInterchainEvent()&lt;/code> 时，跨链合约做了什么，相应说明见注释。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">broker&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Broker&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">EmitInterchainEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ChaincodeStubInterface&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 判断传入参数数量是否正确
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 跨链合约需要传入很多参数，如调用失败在链上容易产生安全问题
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;incorrect number of arguments, expecting 7&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 读取参数并存入相应变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 目标链 ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">dstServiceID&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 自己的链码 ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">cid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">getChaincodeID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取 bxhID 和 appchainID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">curFullID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">genFullServiceID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将当前链 ID 和目标链 ID 组合成输出跨链服务组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">outServicePair&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">genServicePair&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">curFullID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dstServiceID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 获取输出值的键值对
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">outMeta&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">getMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outterMeta&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 查询输出跨链服务组是否在键值对中，否则设为 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">outMeta&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">outServicePair&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">outMeta&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">outServicePair&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 封装交易信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">tx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">Event&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Index&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">outMeta&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">outServicePair&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">DstFullID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">dstServiceID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">SrcFullID&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">curFullID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Func&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Argscb&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Argsrb&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 输出服务自增
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">outMeta&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">outServicePair&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将交易信息转为 json 格式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">txValue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Marshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将输出事件消息格式化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">key&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">outMsgKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">outServicePair&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">FormatUint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">tx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将消息与交易信息写入账本（持久化）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">PutState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">txValue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;persist event: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 设定相应跨链交易事件名称，并将交易信息存入 payload 中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">interchainEventName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">txValue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;set event: %w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将元数据状态写入账本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">broker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">putMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outterMeta&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">outMeta&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上就是调用跨链合约时所做的，本质上其实只是在跨链合约中通过 &lt;code>SetEvent()&lt;/code> 设置了一个触发一个事件，再在插件中通过 &lt;code>RegisterChaincodeEvent()&lt;/code> 进行订阅监听。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">SetEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">payload&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>SetEvent()&lt;/code> 是 &lt;code>shim&lt;/code> 包下的一个接口，主要传入名称与 payload 数组，关于链码事件监听原理与细节详见 &amp;lt;&lt;a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析&lt;/a>&amp;gt;。&lt;/p>
&lt;h3 id="业务合约">业务合约&lt;/h3>
&lt;p>分析完了跨链合约，我们来看看业务合约是如何调用跨链合约的呢，以示例中的 &lt;code>data_swapper.go&lt;/code> 数据交换合约为例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">DataSwapper&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ChaincodeStubInterface&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">pb&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// args[0]: key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// args[0]: destination service id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// args[1]: key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">util&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ToChaincodeArgs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">emitInterchainEventFunc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;interchainGet,interchainSet,&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">response&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">InvokeChaincode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">brokerContractName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">channelID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OK&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invoke broker chaincode %s error: %s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">brokerContractName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Message&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;incorrect number of arguments&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如想在 &lt;code>data_swapper.go&lt;/code> 业务合约中获取其他链的信息，通过 &lt;code>switch...case...&lt;/code> 在调用 &lt;code>get&lt;/code> 方法时首先对输入参数数组 &lt;code>args []string&lt;/code> 的长度进行判断，当长度为 1 时，正常调用自身合约进行查询，而当长度为 2 时，首先通过 fabric 提供的 &lt;code>ToChaincodeArgs()&lt;/code> 方法将参数从 &lt;code>string&lt;/code> 转为链码参数数组格式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">ToChaincodeArgs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bargs&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([][]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bargs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">bargs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后直接在业务链码中通过 &lt;code>InvokeChaincode()&lt;/code> 方法调用跨链合约，并传入参数和通道 ID，至此就完成了一次跨链数据查询链码调用。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对跨链交易流程与 BitXHub 跨链插件（Fabric）源码解读，也希望在此过程中加深对跨链机制和相关平台的理解，未来能更好地参与到其开源建设中。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://github.com/gocn/opentalk/tree/main/PhaseTen_BitXHub">跨链技术平台 BitXHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://meshplus.github.io/bitxhub/bitxhub/introduction/summary/">BitXHub Document&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/meshplus/pier-client-fabric">meshplus/pier-client-fabric&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tech.hyperchain.cn/bitxhub-design-thinking/">十问 BitXHub:谈谈跨链平台的架构设计&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/meshplus/bitxhub/wiki/%E8%B7%A8%E9%93%BE%E5%90%88%E7%BA%A6%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3">跨链合约编写文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>分布式系统与区块链共识机制</title><link>https://jpg6.com/en/2021/09/08/blockchain_consensus/</link><pubDate>Wed, 08 Sep 2021 11:03:55 +0800</pubDate><guid>https://jpg6.com/en/2021/09/08/blockchain_consensus/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>随着互联网系统日益复杂，大多数系统都从单体架构转向分布式架构，而在区块链这样以分布式技术为基础的技术更是高度依赖数据一致性和共识机制。&lt;/p>
&lt;p>本文将介绍分布式系统一致性、共识的概念与其在区块链中的实际应用与发展。&lt;/p>
&lt;h2 id="分布式系统">分布式系统&lt;/h2>
&lt;h3 id="一致性问题">一致性问题&lt;/h3>
&lt;p>随着业务场景的复杂化，同一个业务往往也由多台服务器组成集群提供服务，但如何在这些物理位置和运行状态都不同的系统中达成一致成为了分布式领域的重要问题。&lt;/p>
&lt;p>一般而言，分布式系统达成一致有以下三点规范：&lt;/p>
&lt;ol>
&lt;li>可终止性&lt;/li>
&lt;li>约同性&lt;/li>
&lt;li>合法性&lt;/li>
&lt;/ol>
&lt;p>分布式事务需要保障能在有限的时间内达成一致的结果，该结果必须是由某个节点提出的提案且不同节点必须完成相同的决策。&lt;/p>
&lt;h3 id="强一致性">强一致性&lt;/h3>
&lt;p>想在单体应用或者各个节点的性能、网络带宽等配置在理想状况下做到这一点很容易，然而，在真实的业务场景中，要实现这样的强一致性成本非常高，需要保障系统的绝对稳定性、系统与系统之间的通讯没有延迟，此外，强一致性也会降低系统的性能和拓展性。&lt;/p>
&lt;p>在强一致性情况下，任何时刻所有节点中的数据都是一样的。强一致性通常又包括顺序一致性和线性一致性两种。&lt;/p>
&lt;h4 id="顺序一致性">顺序一致性&lt;/h4>
&lt;p>顺序一致性要求所有进程的全局执行顺序和各个进程自身的顺序保持一致，但并不要求物理时间上对各个进程保持全局的顺序。因此，这也是一种相对实践性较强的做法。&lt;/p>
&lt;h4 id="线性一致性">线性一致性&lt;/h4>
&lt;p>线性一致性在顺序一致增加了需要对进程间进行全局排序的规则，要求所有时刻所有进程的操作都是实时同步的。这种绝对一致性往往在实践中很难实现，需要通过全局锁或者一些复杂的同步算法实现，且往往以牺牲性能为代价。&lt;/p>
&lt;h3 id="弱一致性">弱一致性&lt;/h3>
&lt;p>而在真实的业务场景里，往往并不需要实时同步这样的绝对一致状态，因此可以容忍部分访问或在一段时间后最终达成一致。这些在某些方面弱化了的一致性称为弱一致性。&lt;/p>
&lt;h3 id="共识机制">共识机制&lt;/h3>
&lt;p>共识机制是指在分布式系统中多个节点对某个事务达成一致的机制，关于共识的达成，有以下几种理论和原则：&lt;/p>
&lt;ul>
&lt;li>FLP 不可能原理&lt;/li>
&lt;li>CAP 原则&lt;/li>
&lt;li>ACID 原则&lt;/li>
&lt;li>BASE 理论&lt;/li>
&lt;li>多阶段提交&lt;/li>
&lt;/ul>
&lt;h4 id="flp-不可能原理">FLP 不可能原理&lt;/h4>
&lt;p>FLP 不可能原理是 Fischer、Lynch 和 Patterson 三位科学家提出的一种理论，即在一个网络可靠但允许节点失效（如停机）的异步系统中，不可能在有限时间内完成共识。&lt;/p>
&lt;p>异步是指系统各个节点之间的时间等存在差异性，导致无法判断消息未响应是由于节点故障还是传输过程中的故障，因此无法判断消息是否丢失。&lt;/p>
&lt;h4 id="cap-原则">CAP 原则&lt;/h4>
&lt;p>而在工程实践中，往往会弱化某一部分的需求以满足真实业务场景的需求。CAP 原则就是来解决这一问题，CAP 是指：&lt;/p>
&lt;ul>
&lt;li>Consistency，一致性&lt;/li>
&lt;li>Availability，可用性&lt;/li>
&lt;li>Partition，分区容错性&lt;/li>
&lt;/ul>
&lt;p>分布式系统无法同时保障这三点，最多能保障其中两个特性，那这个原理有哪些实际应用呢？&lt;/p>
&lt;ol>
&lt;li>AP 系统，在静态网站、非实时性数据库等业务场景下，可以弱化其一致性，如新版本上线后一段时间才达成一致。&lt;/li>
&lt;li>CP 系统，在银行转账等对一致性要求绝对敏感的场景下，可以弱化其可用性，如当系统故障或失败时拒绝服务。&lt;/li>
&lt;li>AC 系统，两阶段提交和一些关系性数据库则弱化网络分区，如 ZooKeeper 等。&lt;/li>
&lt;/ol>
&lt;h4 id="acid-原则">ACID 原则&lt;/h4>
&lt;p>分布式数据库的事务需要牺牲部分可用性来达到一致性，需要遵循 ACID 原则，具体如下：&lt;/p>
&lt;ul>
&lt;li>Atomicity，原子性。事务的所有操作要么全部执行，要么全部不执行，失败则全部回退。&lt;/li>
&lt;li>Consistency，一致性。事务执行前后状态需要一致，不存在中间状态。&lt;/li>
&lt;li>Isolation，隔离性。多个事务可以并发执行但彼此之间相互独立。&lt;/li>
&lt;li>Durability，持久性。状态改变是永久的。&lt;/li>
&lt;/ul>
&lt;h4 id="base-原则">BASE 原则&lt;/h4>
&lt;p>BASE 原则是指：&lt;/p>
&lt;ul>
&lt;li>Basically Available，基本可用&lt;/li>
&lt;li>Soft State，软状态&lt;/li>
&lt;li>Eventual Consistency，最终一致&lt;/li>
&lt;/ul>
&lt;p>这是一种牺牲强一致性来实现整个系统的方案，即只保障最终一致性。&lt;/p>
&lt;h4 id="多阶段提交">多阶段提交&lt;/h4>
&lt;p>两阶段提交是将事务提交过程分解为预提交和正式提交两个阶段以避免冲突，但仍然存在同步阻塞、单点故障、数据一致性等问题。&lt;/p>
&lt;p>TCC 事务机制则主要分为：&lt;/p>
&lt;ul>
&lt;li>Try 阶段&lt;/li>
&lt;li>Confirm 阶段&lt;/li>
&lt;li>Cancel 阶段&lt;/li>
&lt;/ul>
&lt;p>在 Try 阶段对业务进行检查并预留业务资源，在 Confirm 阶段使用资源执行业务，Cancel 阶段取消执行并释放资源。这种方式是对两阶段提交多作了一些业务上的处理，但因为拆分成了三个接口进行，代码复杂性提升了。&lt;/p>
&lt;p>三阶段提交引入了超时机制，并在两阶段提交的第一阶段加入了一个尝试预提交环节，主要解决了单点故障和阻塞问题。&lt;/p>
&lt;h2 id="共识算法">共识算法&lt;/h2>
&lt;p>根据容错类型（是否会有恶意节点），我们把共识算法分为非拜占庭容错（Crash Fault Tolerance, CFT）和拜占庭容错（BFT, Byzantine Fault Tolerance）两种。&lt;/p>
&lt;h3 id="cft-crash-fault-tolerance">CFT (Crash Fault Tolerance)&lt;/h3>
&lt;p>分布式系统中存在故障节点但不存在错误节点的场景称为 CFT，在这种场景下，消息可能丢失或者重复，但不会错误，在这种条件下如何达成共识是真实世界中非常常见的需求。&lt;/p>
&lt;h4 id="paxos">Paxos&lt;/h4>
&lt;p>Paxos 算法原理类似于两阶段提交，设定了三种逻辑节点，提案者、接受者和学习者。由提案者提出提案，接受者对提案进行投票并接受提案，而学习者获取提案结果并广播。&lt;/p>
&lt;p>只有提案者提出的提案才可能会批准，而所有节点都可以竞选成为提案者，但每一轮共识只有唯一的一个提案者提提案，这种机制保障了一定的公平性。&lt;/p>
&lt;p>然而，Paxos 只能保障一定条件下的共识，当超过半数的节点参与时才会正常运作。&lt;/p>
&lt;h4 id="raft">Raft&lt;/h4>
&lt;p>由于 Paxos 算法实现起来比较困难，出现了许多变体，如 Fast Paxos、Multi-Paxos 等，其中比较有代表性的就是 Raft 算法。&lt;/p>
&lt;p>Raft 将一致性过程拆分为领导者选举、日志复制和安全性三个子问题，设定了领导者、候选者和跟随者三种逻辑节点。&lt;/p>
&lt;p>所有节点的初始状态都是跟随者，想参与领导者竞选则转变为候选者并提出选举请求，如超过一半票数则成功在本次任期称为领导者。&lt;/p>
&lt;p>领导者会处理所有请求并将日志同步至跟随者，并且会定期给所有跟随者发送心跳消息，如果出现故障，心跳消息超时未收到，则会发起新的选举过程。&lt;/p>
&lt;h3 id="bft-byzantine-fault-tolerance">BFT (Byzantine Fault Tolerance)&lt;/h3>
&lt;h4 id="byzantine-fault-tolerance-bft">Byzantine Fault Tolerance, BFT&lt;/h4>
&lt;p>拜占庭容错算法则主要是用来处理网络中存在恶意节点的场景，主要是对拜占庭问题的解决，在恶意节点不超过 1/3 的情况下可以有效达成共识，但复杂度非常高（指数级）。&lt;/p>
&lt;h4 id="practical-byzantine-fault-tolerance-pbft">Practical Byzantine Fault Tolerance, PBFT&lt;/h4>
&lt;p>PBFT 是对 BFT 算法的优化，采用了 RSA 签名算法、消息验证、摘要等密码学技术，结合 Paxos 等相关算法，最后将算法复杂度降到了平方级。&lt;/p>
&lt;p>在 PBFT 算法实现中，首先选取（随机/轮换）某个节点，设定其逻辑节点为主节点。主节点在自己的 View 内接收客户端的请求并广播（使用三阶段提交机制，见上文）至其他节点，当所有节点完成处理请求后将结果返回给客户端，如果收到了至少来自 2f + 1 个不同节点的相同结果，则共识完成。&lt;/p>
&lt;ul>
&lt;li>尝试预提交：主节点收到消息后进行签名并向其他节点广播&lt;/li>
&lt;li>预提交：其他节点收到消息后进行核对，合法则向签名并向其他节点广播，其他节点也进行核对&lt;/li>
&lt;li>正式提交：对消息签名并广播提交状态，如经过 2f + 1 个验证，则系统完成共识&lt;/li>
&lt;/ul>
&lt;h4 id="其他">其他&lt;/h4>
&lt;p>除了 PBFT 外，PoW、PoS、HotStuff 等也广泛应用于比特币、以太坊、Libra 等区块链项目，并在不断优化中，拜占庭容错类算法因为效率不高，大多用于公有链环境，而联盟链则多采用 非拜占庭容错的方式，辅之以权限控制等方式来平衡性能和安全性。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对分布式系统与区块链共识机制的概念和实际应用总结，之后也会对各类业界投入使用的共识算法作更深入的剖析。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://book.douban.com/subject/27127839/">区块链原理、设计与应用&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://xiaomi-info.github.io/2020/01/02/distributed-transaction/">分布式事务，这一篇就够了&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://anruence.com/2018/03/05/tcc-2pc-3pc/">理解 TCC、2PC 和 3PC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tech.hyperchain.cn/gong-shi-zhuan-lan-gong-shi-de-fen-lei-shang/">【共识专栏】共识的分类（上）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tech.hyperchain.cn/gong-shi-zhuan-lan-gong-shi-de-fen-lei-xia/">【共识专栏】共识的分类（下）&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>区块链服务平台 (BaaS) 简介及架构</title><link>https://jpg6.com/en/2021/09/07/blockchain_baas_platform/</link><pubDate>Tue, 07 Sep 2021 10:00:52 +0800</pubDate><guid>https://jpg6.com/en/2021/09/07/blockchain_baas_platform/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>目前工作中负责一个针对 Hyperledger Fabric 的区块链即服务 (Blockchain as a Service, BaaS) 平台的链码管理部分，对这 BaaS 平台的架构与实现很感兴趣，作为一个能为开发者提供一站式应用创建、管理和维护区块链的平台，其架构是怎么样的呢？&lt;/p>
&lt;p>本文是对 BaaS 平台架构的总结和梳理。&lt;/p>
&lt;h2 id="baas-简介">BaaS 简介&lt;/h2>
&lt;p>区块链是一个复杂的分布式系统，尤其是像 Hyperledger Fabric 这样的企业联盟链平台，其部署和运维都非常复杂，作为应用开发者需要处理许多环境问题（如证书、docker 环境等），带来了许多挑战。&lt;/p>
&lt;p>因此，BaaS 平台应运而生，它是一种帮助用户创建、管理和维护企业级区块链的应用平台，用户能够通过友好的 Web 界面对区块链进行操作。通过 BaaS 平台，用户可以很灵活地搭建区块链网络、管理区块链业务和各个模块的功能、进行智能合约的研发和部署以及实时监控和运维。&lt;/p>
&lt;p>通过 BaaS 平台，开发者可以快速进行区块链业务的研发，综合成本大大降低，且有助于系统稳定性、安全性和易用性等的提升。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/baas_framework.svg" alt="baas_framework">&lt;/p>
&lt;h2 id="平台架构">平台架构&lt;/h2>
&lt;p>BaaS 平台作为一个一站式应用服务，自下而上主要分为以下几层：&lt;/p>
&lt;ol>
&lt;li>资源层&lt;/li>
&lt;li>监控运维层&lt;/li>
&lt;li>区块链底层&lt;/li>
&lt;li>区块链服务层&lt;/li>
&lt;li>应用层&lt;/li>
&lt;/ol>
&lt;p>而根据每个系统的业务差异，各个层的架构与功能模块会有所差异，下面将会对几大主流平台层次结构做一些描述。&lt;/p>
&lt;h3 id="hyperledger-cello">Hyperledger Cello&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_cello_overview.png" alt="hyperledger_cello_overview">&lt;/p>
&lt;p>&lt;a href="https://github.com/hyperledger/cello">Hyperledger Cello&lt;/a> 作为 IBM Hyperledger 的顶级项目之一，是一个开源区块链管理平台，支持部署、运行时管理和数据分析等功能。&lt;/p>
&lt;p>Cello 目前支持 Hyperledger Fabric 区块链，可以有效管理 Fabric 链的生命周期，主要包含以下模块：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_cello_architecture.png" alt="hyperledger_cello_architecture">&lt;/p>
&lt;p>除了高效地创建部署网络外，Cello 提供了一些对于区块链的管理功能：&lt;/p>
&lt;ul>
&lt;li>区块链生命周期管理&lt;/li>
&lt;li>底层支持多种架构，如 Docker、Swarm、Kubernetes 等&lt;/li>
&lt;li>支持多种底层区块链平台并可以自定义配置&lt;/li>
&lt;li>支持运行时监控与运维&lt;/li>
&lt;li>可插拔的框架设计，可以通过插件的形式拓展第三方功能，如资源调度、驱动代理等&lt;/li>
&lt;/ul>
&lt;h3 id="趣链-baas">趣链 BaaS&lt;/h3>
&lt;p>根据官网介绍，BlocFace 是由趣链科技为企业及开发者全新推出的区块链服务平台，为用户提供一键部署联盟链、可视化监控运维和智能合约研发等一站式研发服务，其平台架构如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperchain_baas.png" alt="hyperchain_baas">&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对区块链服务平台 (BaaS) 的简介及架构分析，因为目前的 Leader 是 Hyperledger Cello 的项目发起人和核心开发者，鼓励我积极参与 Cello 的开源建设，要加油啦！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://book.douban.com/subject/27127839/">区块链原理、设计与应用&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hyperledger/cello">Hyperledger Cello 项目地址&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.hyperchain.cn/products/blocface">BlocFace 官网&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>跨链技术原理与实战</title><link>https://jpg6.com/en/2021/09/06/blockchain_crosschain/</link><pubDate>Mon, 06 Sep 2021 15:34:40 +0800</pubDate><guid>https://jpg6.com/en/2021/09/06/blockchain_crosschain/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>目前区块链底层平台日渐多样，如老牌的 Hyperledger Fabric、Ethereum 等，以及国内的 Hyperchain、Z-ledger 等，而随着区块链应用生态越来越复杂，单链的性能有一定瓶颈，链与链之间的协同与交互（信息同步、共享、合约互操作等）也成为了链和应用生态发展的重要部分。&lt;/p>
&lt;p>本文是对跨链技术的概念与主流解决方案的梳理。&lt;/p>
&lt;h2 id="跨链技术概览">跨链技术概览&lt;/h2>
&lt;p>因为底层链设计、共识算法、网络结构等组件的相似性，同构区块链之间的交互比较容易，但异构区块链则相对复杂，往往难以直接进行交互，而需要两条链之间有一些辅助平台/服务来进行数据格式转换等。&lt;/p>
&lt;h3 id="跨链机制">跨链机制&lt;/h3>
&lt;p>目前跨链主要由以下几种解决方案：&lt;/p>
&lt;ol>
&lt;li>公证人机制&lt;/li>
&lt;li>哈希锁定&lt;/li>
&lt;li>分布式私钥控制&lt;/li>
&lt;li>侧链/中继链&lt;/li>
&lt;/ol>
&lt;h4 id="公证人机制">公证人机制&lt;/h4>
&lt;p>公证人机制是一种通过第三方中介协助不同链之间交互的机制，本质上是两方共同信任一个第三方，让其对跨链数据或跨链交互操作进行验证和转发。这种方式能很好地支持异构区块链，但是是一种中心化方式。&lt;/p>
&lt;p>很多数字货币交易所就是通过这样的方式进行不同数字货币之间的交易和转换，本质上是交易所在撮合交易，效率等都较高，但是存在一定安全风险，且只支持资产的交换。&lt;/p>
&lt;h4 id="哈希锁定">哈希锁定&lt;/h4>
&lt;p>哈希锁定最早出现在比特币的闪电网络，是通过哈希锁和时间锁保障跨链双方资产的一种方式。其中时间锁是将交易限制在一定时间内，超时则交易失效，从而避免损失，但这种方式同样只能实现资产的交换，而无法实现资产的转移。&lt;/p>
&lt;h4 id="侧链">侧链&lt;/h4>
&lt;p>侧链是一种双向锚定的技术，最开始的侧链是相对于比特币主链而言的，如 BTC-Relay，在这条侧链上可以对比特币进行新特性的研发和测试，且当大量用户在比特币网络上进行交易时，使用侧链可以有效地拓展网络的吞吐量。例如，在 Ethereum 主链上进行资产交易和价值转移，而在 Ethereum 侧链上可以进行一些对 tps 要求较高的 DApp 运行等。&lt;/p>
&lt;p>而同一条主链的不同侧链也可以借助主链来进行一些交互，这就是借助测链进行跨链的基本原理。&lt;/p>
&lt;h4 id="中继链">中继链&lt;/h4>
&lt;p>中继链则是上述侧链和公证人机制的一种综合应用，通过设定跨链交互机制（如 Cosmos 的 IBC）来实现异构链之间的信息共享与交互。需要进行跨链的各个平行链连接到一个中继链来辅助交易的验证和交互。&lt;/p>
&lt;h2 id="跨链技术实践">跨链技术实践&lt;/h2>
&lt;h3 id="开发实战">开发实战&lt;/h3>
&lt;p>目前在做一个 BaaS 平台的跨链功能，其基础架构如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cross_chain_framework.svg" alt="cross_chain_framework">&lt;/p>
&lt;p>子链主要是实现各类业务和应用的链，当子链要与其他链进行跨链业务交互时，它需要执行跨链合约，而我们提供了一个跨链网关来对这些跨链合约进行监听。针对异构区块链。如 Hyperledger Fabric、Ethereum，我们将提供不同的适配器来实现跨链 SDK 与跨链网关之间的交互，适配器提供跨链合约信息查询功能。当另一条业务链的 SDK 接收到跨链合约方法时，如果是合约互调用或数据传递，则直接调用对应的合约方法。&lt;/p>
&lt;p>我主要做的是跨链适配器接口这一部分，适配器作为针对不同链的插件嵌入跨链网关中从而适配不同的应用链，能够很好地协助跨链网关实现对交易的监听、同步与执行。&lt;/p>
&lt;p>而在具体实现中，如在 Fabric 网络中，则是通过子链调用跨链业务合约，而跨链业务合约统一调用一个适配器的合约，在这个适配器合约中，我们实现了交易信息传入，通过 Fabric 事件机制来进行监听（即在合约中实现 &lt;code>SetEvent&lt;/code> 方法，而在适配器中对相应事件进行注册，从而实现对跨链合约的监听。&lt;/p>
&lt;p>关于 Fabric 事件监听相关细节及实现详情见 《&lt;a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析&lt;/a>》。&lt;/p>
&lt;h3 id="功能拓展">功能拓展&lt;/h3>
&lt;p>目前趣链科技的 &lt;a href="https://meshplus.github.io/bitxhub/bitxhub/introduction/summary/">BitXHub 跨链平台&lt;/a>是业界实现得比较完善的开源跨链解决方案，其架构如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/bitxhub_structure.png" alt="bitxhub_structure">&lt;/p>
&lt;p>主要通过中继链、网关和插件机制对跨链流程中的功能、安全性和灵活性等进行了优化，并且设计了 IBTP 链间通用传输协议配合“网关+中继链”的架构来解决跨链交易中的验证、路由等问题。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对跨链技术的概念梳理与实战总结，为了对跨链机制的各个环节有更深入的了解，之后也将会对目前正在做的跨链服务和 BitXHub 平台进行更深入的剖析和源码解读。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://tech.hyperchain.cn/blockchain-interoperability/">关于跨链技术的分析和思考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/92667917">跨链的简要研究：从原理到技术&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gocn/opentalk/tree/main/PhaseTen_BitXHub">跨链技术平台 BitXHub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yuanxuxu.com/2020/08/05/%E5%8C%BA%E5%9D%97%E9%93%BE%E8%B7%A8%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%93%88%E5%B8%8C%E6%97%B6%E9%97%B4%E9%94%81/">区块链跨链技术之哈希时间锁&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://meshplus.github.io/bitxhub/bitxhub/introduction/summary/">BitXHub Document&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tech.hyperchain.cn/bitxhub-design-thinking/">十问 BitXHub:谈谈跨链平台的架构设计&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>[译] Go sync.Once 的妙用</title><link>https://jpg6.com/en/2021/09/02/go_concurrency_sync_once/</link><pubDate>Thu, 02 Sep 2021 13:31:25 +0800</pubDate><guid>https://jpg6.com/en/2021/09/02/go_concurrency_sync_once/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>如果你曾用过 Go 中的 goroutines，你也许会遇到几个并发原语，如 &lt;code>sync.Mutex&lt;/code>, &lt;code>sync.WaitGroup&lt;/code> 或是 &lt;code>sync.Map&lt;/code>，但是你听说过 &lt;code>sync.Once&lt;/code> 么？&lt;/p>
&lt;p>也许你听说过，那 go 文档是怎么描述它的呢？&lt;/p>
&lt;blockquote>
&lt;p>Once 是只执行一个操作的对象。&lt;/p>
&lt;/blockquote>
&lt;p>听起来很简单，它有什么用处呢？&lt;/p>
&lt;p>由于某些原因，&lt;code>sync.Once&lt;/code> 的用法并没有很好的文档记录。在第一个&lt;code>.Do&lt;/code>中的操作执行完成前，将一直处于等待状态，这使得在执行较昂贵的操作（通常缓存在 map 中）时非常有用。&lt;/p>
&lt;h2 id="原生缓存方式">原生缓存方式&lt;/h2>
&lt;p>假设你有一个热门的网站，但它的后端 API 访问不是很快，因此你决定将 API 结果通过 map 缓存在内存中。以下是一个基本的解决方案：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">QueryClient&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cache&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">][]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mutex&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">QueryClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">DoQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 检查结果是否已缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">cached&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">found&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="nx">found&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">cached&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果未缓存则发出请求
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://upstream.api/?query=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryEscape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 为简洁起见，省略了错误处理和 resp.Body.Close
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 将结果存储在缓存中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看起来不错，对吧？&lt;/p>
&lt;p>然而，如果有两个 &lt;code>DoQuery&lt;/code> 同时进行调用会发生什么呢？竞争。两方缓存都无法命中，并且都会向 &lt;code>upstream.api&lt;/code> 执行不必要的 HTTP 请求，而只有一个需要完成这个请求。&lt;/p>
&lt;h2 id="不美观但更好的缓存方式">不美观但更好的缓存方式&lt;/h2>
&lt;p>我并没有进行统计，但我认为大家解决这个问题的另外一种方式是使用 channel、context 或 mutex。在这个例子中，可以将上文代码调整为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">CacheEntry&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wait&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">QueryClient&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cache&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">CacheEntry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mutex&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">QueryClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">DoQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 检查操作是否已启动
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">cached&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">found&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="nx">found&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 等待完成
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">cached&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">wait&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">cached&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">entry&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">CacheEntry&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">wait&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果未缓存，则发出请求
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://upstream.api/?query=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryEscape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 为简洁起见，省略了错误处理和 resp.Body.Close
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 关闭 channel，传递操作完成信号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 立即返回
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">wait&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方案不错，但代码的可读性受到了很大影响。&lt;code>cached.wait&lt;/code> 进行了哪些操作不是很清晰，在不同情况下的操作流也并不直观。&lt;/p>
&lt;h2 id="使用-synconce">使用 &lt;code>sync.Once&lt;/code>&lt;/h2>
&lt;p>我们来尝试一下使用 &lt;code>sync.Once&lt;/code> 方案：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">CacheEntry&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">once&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Once&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">QueryClient&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">cache&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">CacheEntry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mutex&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">QueryClient&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">DoQuery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">entry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">found&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">found&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果在缓存中未找到，创建新的 entry
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">entry&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">CacheEntry&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">once&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Once&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mutex&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 现在，当我们调用 .Do 时，如果有一个正在同步进行的操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 它将一直阻塞，直到完成（并填充 entry.data）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 或者如果操作之前已经完成过一次
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 本次调用不会进行操作，也不会阻塞
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">once&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;https://upstream.api/?query=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">QueryEscape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 为简洁起见，省略了错误处理和 resp.Body.Close
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">ioutil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">entry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上就是 &lt;code>sync.Once&lt;/code> 的方案，和之前的示例很相似，但现在更容易理解（至少在我看来）。只有一个返回值，且代码自上而下，非常直观，而不必像之前一样对 &lt;code>entry.wait&lt;/code> channel 进行阅读和理解。&lt;/p>
&lt;h2 id="进一步阅读其他注意事项">进一步阅读/其他注意事项&lt;/h2>
&lt;p>另一个类似于 &lt;code>sync.Once&lt;/code> 的机制是 &lt;a href="https://pkg.go.dev/golang.org/x/sync/singleflight">golang.org/x/sync/singleflight&lt;/a>。&lt;code>singleflight&lt;/code> 只会删除正在进行中的请求中的重复请求（即不会持久化缓存），但与 &lt;code>sync.Once&lt;/code> 相比，&lt;code>singleflight&lt;/code> 通过 context 实现起来可能更简洁（通过使用 &lt;code>select&lt;/code> 和 &lt;code>ctx.Done()&lt;/code>），并且在生产环境中，可以通过 context 取消这一点很重要。&lt;code>singleflight&lt;/code> 实现的模式和 &lt;code>sync.Once&lt;/code> 十分接近，但如果 map 中存有值，则会提前返回。&lt;/p>
&lt;p>&lt;a href="https://github.com/golang/go/issues/25312#issuecomment-387800105">ianlancetaylor&lt;/a> 建议结合 context 使用 &lt;code>sync.Once&lt;/code>，方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">c&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">once&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Do&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">ctxt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="文章信息">文章信息&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://blog.chuie.io/posts/synconce/">原文地址&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gocn/translator/blob/master/2021/w34_the_underutilized_usefulness_of_sync_Once.md">本文永久链接&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gocn/translator">GoCN &amp;lt;每周译 Go&amp;gt;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pseudoyu">译者：张宇&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Cluas">校对：Cluas&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Hyperledger Fabric Go SDK 事件分析</title><link>https://jpg6.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</link><pubDate>Wed, 01 Sep 2021 17:21:58 +0800</pubDate><guid>https://jpg6.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在做跨链适配器，需要在一条本地链上利用 Go SDK 来连接 fabric 网络，并监听事件，所以对 fabric 所支持的事件与 SDK 所提供的监听方法做一下汇总。&lt;/p>
&lt;h2 id="fabric-事件">Fabric 事件&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_application_interact.png" alt="hyperledger_fabric_application_interact">&lt;/p>
&lt;p>事件是客户端与 Fabric 网络进行交互的一种方式，如上图所示，Fabric 网络中执行一个交易后，因为是异步进行的，所以客户端无法获取提交的交易状态（是否被接受），因此，Fabric 的 Peer 节点提供了事件机制，客户端可以通过 gRPC 接口来监听区块事件。从 fabric v1.1 开始，时间的注册发生在通道级别而不是 Peer 节点，因此可以进行更精细的控制&lt;/p>
&lt;h3 id="事件类型">事件类型&lt;/h3>
&lt;p>事件主要由 Ledger 和存有链码合约的容器触发。Fabric 共支持四种事件形式：&lt;/p>
&lt;ol>
&lt;li>BlockEvent 监控新增到 fabric 上的块时使用&lt;/li>
&lt;li>ChaincodeEvent 监控链码中发布的事件时使用，也就是用户自定义事件&lt;/li>
&lt;li>TxStatusEvent 监控节点上的交易完成时使用&lt;/li>
&lt;li>FilteredBlockEvent 监控简要的区块信息&lt;/li>
&lt;/ol>
&lt;p>在 Fabric Go SDK 中则通过以下几种事件监听器进行操作&lt;/p>
&lt;ol>
&lt;li>&lt;code>func (c *Client) RegisterBlockEvent(filter ...fab.BlockFilter) (fab.Registration, &amp;lt;-chan *fab.BlockEvent, error)&lt;/code>&lt;/li>
&lt;li>&lt;code>func (c *Client) RegisterChaincodeEvent(ccID, eventFilter string) (fab.Registration, &amp;lt;-chan *fab.CCEvent, error)&lt;/code>&lt;/li>
&lt;li>&lt;code>func (c *Client) RegisterFilteredBlockEvent() (fab.Registration, &amp;lt;-chan *fab.FilteredBlockEvent, error)&lt;/code>&lt;/li>
&lt;li>&lt;code>func (c *Client) RegisterTxStatusEvent(txID string) (fab.Registration, &amp;lt;-chan *fab.TxStatusEvent, error)&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>而当监听完成后需要通过 &lt;code>func (c *Client) Unregister(reg fab.Registration)&lt;/code> 来取消注册并移除事件通道&lt;/p>
&lt;h3 id="grpc-通信">gRPC 通信&lt;/h3>
&lt;p>SDK 与 Peer 节点通过 gRPC 进行通讯，源码见 &lt;a href="https://github.com/hyperledger/fabric-protos/blob/main/peer/events.proto">fabric-protos/peer/events.proto&lt;/a>&lt;/p>
&lt;p>其中，定义了以下几种 message：&lt;/p>
&lt;ol>
&lt;li>FilteredBlock，给 FilteredBlockEvent 使用&lt;/li>
&lt;li>FilteredTransaction 和 FilteredTransaction，给 FilteredTransactionEvent 使用&lt;/li>
&lt;li>FilteredChaincodeAction，给 ChaincodeEvent 使用&lt;/li>
&lt;li>BlockAndPrivateData，给私有数据使用&lt;/li>
&lt;/ol>
&lt;p>Response 如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// DeliverResponse
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">message&lt;/span> &lt;span class="nx">DeliverResponse&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">oneof&lt;/span> &lt;span class="nx">Type&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">common&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Status&lt;/span> &lt;span class="nx">status&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">common&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Block&lt;/span> &lt;span class="nx">block&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FilteredBlock&lt;/span> &lt;span class="nx">filtered_block&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">BlockAndPrivateData&lt;/span> &lt;span class="nx">block_and_private_data&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以及三个 gRPC 通信接口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">service&lt;/span> &lt;span class="nx">Deliver&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Payload data as a marshaled orderer.SeekInfo message,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// then a stream of block replies is received
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">rpc&lt;/span> &lt;span class="nf">Deliver&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span> &lt;span class="nx">common&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Envelope&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span> &lt;span class="nx">DeliverResponse&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// DeliverFiltered first requires an Envelope of type ab.DELIVER_SEEK_INFO with
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Payload data as a marshaled orderer.SeekInfo message,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// then a stream of **filtered** block replies is received
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">rpc&lt;/span> &lt;span class="nf">DeliverFiltered&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span> &lt;span class="nx">common&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Envelope&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span> &lt;span class="nx">DeliverResponse&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// DeliverWithPrivateData first requires an Envelope of type ab.DELIVER_SEEK_INFO with
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Payload data as a marshaled orderer.SeekInfo message,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// then a stream of block and private data replies is received
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">rpc&lt;/span> &lt;span class="nf">DeliverWithPrivateData&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span> &lt;span class="nx">common&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Envelope&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">returns&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">stream&lt;/span> &lt;span class="nx">DeliverResponse&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabric_events.svg" alt="fabric_events">&lt;/p>
&lt;p>整个流程如上图所示，Go SDK 中通过实现一个 Dispatcher 将应用中的事件注册请求转换为事件订阅请求并通过 DeliverClient 发送给 Peer 节点，Peer 节点中的 DeliverServer 接收订阅请求，调用 deliverBlocks 进入循环，从 Ledger 读取区块并生成事件，最后发送给客户端，客户端中的 Dispatcher 又将其转换为应用订阅的事件响应。&lt;/p>
&lt;h3 id="事件实现过程">事件实现过程&lt;/h3>
&lt;p>实现时间过程需要两个步骤&lt;/p>
&lt;ol>
&lt;li>在链码中调用 &lt;code>SetEvent&lt;/code> 方法&lt;/li>
&lt;li>在在客户端中通过 Go SDK 实现事件监听器&lt;/li>
&lt;/ol>
&lt;h4 id="setevent-方法">SetEvent 方法&lt;/h4>
&lt;p>方法定义&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">ChaincodeStub&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">SetEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">payload&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用实例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">SmartContract&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stub&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ChaincodeStubInterface&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">sc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Response&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">stub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">PutState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;unable put state (%s), error: %v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Payload 需要转换为字节格式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">eventPayload&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;Event Information&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">payloadAsBytes&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">eventPayload&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// SetEvent 方法通常位于 PutState、DelState 等与账本交互的操作之后
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">stub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;lt;事件名称&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">payloadAsBytes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">eventErr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;事件触发失败&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">shim&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="客户端事件监听器">客户端事件监听器&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 实现一个链码事件监听
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 传入相应参数，这里的 eventId 必须与链码里的 &amp;lt;事件名称&amp;gt; 匹配以实现监听
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">reg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventChannel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">eventClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">RegisterChaincodeEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chaincodeID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventID&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatalf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Failed to regitser block event: %v\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 取消注册并移除事件通道
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">defer&lt;/span> &lt;span class="nx">eventClient&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unregister&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是通过 Go SDK 对 fabric 网络上的事件进行监听操作的基本介绍，正在看 fabric Go SDK 源码，后续将补充一些解读。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://github.com/hyperledger/fabric-sdk-go">hyperledger/fabric-sdk-go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pkg.go.dev/github.com/hyperledger/fabric-chaincode-go">Hyperledger Fabric Packages for Go Chaincode&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/peer_event_services.html">基于通道的 Peer 节点事件服务&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hyperledger/fabric-protos/blob/main/peer/event">fabric-protos/peer/events.proto&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lessisbetter.site/2019/09/20/fabric-event-source/">Fabric 1.4 源码解读 3：事件(Event)原理解读&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/aecaae8aa3da">fabric 支持的事件&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.hubwiz.com/2019/07/07/Hyperledger-fabric-chaincode-event/">如何监听 Fabric 链码的事件&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Go 错误处理总结与实践</title><link>https://jpg6.com/en/2021/08/29/go_error_handling/</link><pubDate>Sun, 29 Aug 2021 00:19:42 +0800</pubDate><guid>https://jpg6.com/en/2021/08/29/go_error_handling/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在对极客时间毛剑老师的 Go 进阶训练营进行重温和学习汇总，这是一门比较偏向于工程化以及原理层面的的课程，涵盖的知识点非常多，因此决定开一个系列来进行记录，也便于自己总结查阅。这是系列第一篇《Go 错误处理》。&lt;/p>
&lt;h2 id="go-错误处理机制">Go 错误处理机制&lt;/h2>
&lt;h3 id="go-内置-errors">Go 内置 errors&lt;/h3>
&lt;p>Go 语言中的 &lt;code>error&lt;/code> 就是普通的一个接口，表示值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// http://golang.org/pkg/builtin/#error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// error 接口的定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Error&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// http://golang.org/pkg/errors/error.go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// errors 构建 error 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">errorString&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">s&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">errorString&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Error&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>基础库中有大量自定义的 &lt;code>error&lt;/code>，如 &lt;code>Error: EOF&lt;/code>，而 &lt;code>errors.New()&lt;/code> 返回的是内部 &lt;code>errorString&lt;/code> 对象的指针。&lt;/p>
&lt;h3 id="error-与-exception">Error 与 Exception&lt;/h3>
&lt;p>不同于 Java、C++ 等语言，Go 处理异常的逻辑是不引入 exception，而是采取多参数返回，因此可以在函数中带入 error interface 对象来交给调用者来进行处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他处理逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是，Go 中有 panic 的机制，可以和 recovery 搭配实现类似于 &lt;code>try...exception...&lt;/code> 的效果，但是 Go 中的 panic 并不等同于 exception，exception 一般是交由调用者来进行处理，而 Go panic 则是针对真正异常的情况（如索引越界、栈溢出、不可恢复的环境问题等），意味着代码不能继续运行，而不能假设调用者会来解决 panic。&lt;/p>
&lt;p>Go 的多返回值来支持调用者进行错误处理的方式给予了开发者很大的灵活性，有如下优势&lt;/p>
&lt;ul>
&lt;li>简单&lt;/li>
&lt;li>Plan for failure, not success&lt;/li>
&lt;li>没有隐藏的控制流&lt;/li>
&lt;li>完全交给开发者来控制 error&lt;/li>
&lt;li>error 是值，因此有很大的灵活性进行处理&lt;/li>
&lt;/ul>
&lt;h2 id="go-错误处理最佳实践">Go 错误处理最佳实践&lt;/h2>
&lt;h3 id="panic">panic&lt;/h3>
&lt;p>panic 只用于真正异常的情况，如&lt;/p>
&lt;ul>
&lt;li>在程序启动的时候，如果有强依赖的服务出现故障时 panic 退出&lt;/li>
&lt;li>在程序启动的时候，如果发现有配置明显不符合要求， 可以 panic 退出（防御编程）&lt;/li>
&lt;li>在程序入口处，例如 gin 中间件需要使用 recovery 预防 panic 程序退出&lt;/li>
&lt;/ul>
&lt;p>因为 panic 会导致程序直接退出，而如果使用 recovery 进行处理的话性能不好且不可控。因此，其他情况下只要不是不可恢复的程序错误，都不应该直接 panic 应该返回 error，从而交给开发者。&lt;/p>
&lt;h3 id="error">error&lt;/h3>
&lt;p>一般我们在开发中会使用 &lt;code>github.com/pkg/errors&lt;/code> 处理应用错误，但需要注意的是，在公共库当中，我们一般不使用。&lt;/p>
&lt;p>在通过多返回值来判断错误时，&lt;code>error&lt;/code> 应该是函数的最后一个返回值，而当 &lt;code>error&lt;/code> 不是 &lt;code>nil&lt;/code> 时，其他返回值均应该为不可用状态，不应该对它们进行额外处理，错误处理的时候也应该先判断错误，当 &lt;code>if err != nil&lt;/code> 时及时返回错误，从而避免过多的代码嵌套。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 错误示例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ans&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">someFunc&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 正确示例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ans&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">someFunc&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当程序出现错误时，一般使用 &lt;code>errors.New&lt;/code> 或 &lt;code>errors.Errorf&lt;/code> 返回错误值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">someFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">anotherFunc&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Errorf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;结果错误，已尝试 %d 次&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而如果是调用其他函数出现问题，则应该直接返回，如果需要携带额外信息，则使用 &lt;code>errors.WithMessage&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">someFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">anotherFunc&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;other information&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果是调用其他库（标准库、企业公共库、开源第三方库等）获取到错误时，请使用 &lt;code>errors.Wrap&lt;/code> 添加堆栈信息。只需要在错误第一次出现时使用，且在基础库和被大量引用的第三方库编写时一般不使用，避免堆栈信息重复。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unmashal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wrap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;other information&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当需要对错误进行判断时，需要采用 &lt;code>errors.Is&lt;/code> 进行比较&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Is&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EOF&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而对错误类型进行判断时则使用 &lt;code>errors.As&lt;/code> 进行赋值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">errA&lt;/span> &lt;span class="nx">errorA&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">As&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">errA&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 其他逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于业务中的错误（如输入错误等），最好在统一的一个地方建立自己的错误字典，其中应该包含错误代码并且可以在日志中作为独立字段打印，也需要有清晰的文档。&lt;/p>
&lt;p>我们常常用日志来辅助我们进行错误处理，不需要进行返回、被忽略的错误必须输出日志，但禁止每个出错的地方都打日志。而如果同一个地方不停地报错，最好是打印一次错误详情并打印出现次数。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对 Go 错误处理和最佳实践的一些总结，后续也会对错误类型、错误包装以及常见的使用中遇到的坑等进行总结。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://lailin.xyz/post/go-training-03.html">Go 错误处理最佳实践&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>基于 CNFS 的区块链网络存储与优化</title><link>https://jpg6.com/en/2021/08/20/blockchain_paper_cnfs/</link><pubDate>Fri, 20 Aug 2021 09:30:25 +0800</pubDate><guid>https://jpg6.com/en/2021/08/20/blockchain_paper_cnfs/</guid><description>&lt;h1 id="research-on-cloud-computing-processing-and-optimization-of-distributed-computer">Research on Cloud Computing Processing and Optimization of Distributed Computer&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>经过在 HKU 一年区块链相关的学习，对分布式存储这一领域产生了兴趣，毕业项目也和 IPFS 相关，详见「&lt;a href="https://www.pseudoyu.com/en/2021/05/10/uright_case_study/">Uright - 区块链音乐版权管理ÐApp&lt;/a>」，回内地后恰有机会和 CNFS Protocol Lab 的孙野院长合作撰写了本篇「Research on Cloud Computing Processing and Optimization of Distributed Computer（基于 CNFS 区块链的网络存储与优化）」，对分布式网络存储、计算有了更深的理解，特此记录。&lt;/p>
&lt;p>本文被 ICCEA(2021 International Conference on Electronic, Electrical and Computer) 所收录。&lt;/p>
&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;p>With the rapid development of network traffic, video, pictures, information will produce a lot of data, which causes the problem of computer calculation and storage. With the increasing demand for computer processing capacity, the traditional computer computing method has been unable to meet the needs of society, which is also gradually developing in the direction of Cloud Computing (hereinafter referred to as CDC) and distributed computing. Through distributed computing, the computer can decompose a large task into many small tasks, which can be distributed to different computing resources. Therefore, distributed computing has become the main way of CDC processing, which can meet the existing market. At the same time, CNFS is the abbreviation of computer network file system, which is a global, point-to-point distributed version file system. Through CNFS, we can connect all the computing devices with the same file system together, which can be called the information processing system. Firstly, this paper analyzes the related concepts. Then, this paper analyzes the architecture of CDC. Finally, some suggestions are put forward.&lt;/p>
&lt;h2 id="1-introduction">1. Introduction&lt;/h2>
&lt;p>With the development of IT, computer information has become an indispensable part of people&amp;rsquo;s life, which requires us to continuously improve the information computing ability [1]. Therefore, distributed computing has become the main way, which can carry out more efficient computing and processing [2]. CNFS (Computer Network File System) is a point-to-point distributed file system, which aims to replace the traditional HTTP system [3]. Therefore, CNFS has learned many lessons from the past successful systems, which has become the cornerstone of CDC and cloud storage. At the same time, CNFS will become the cornerstone of blockchain. The key technology of CDC is decentralization. However, CNFS is a perfect solution, which can play a significant role [4-6]. The decentralized technology of CNFS has been applied to many fields, which can solve many problems of the existing platform [7].&lt;/p>
&lt;h2 id="2-related-concepts">2. Related concepts&lt;/h2>
&lt;h3 id="21-distributed-computing">2.1 Distributed computing&lt;/h3>
&lt;p>Distributed computing is to divide a large task into many small tasks, which can be distributed to different computing resources. A distributed system is a collection of independent computers. Therefore, the distributed computing system is just like a computer, which can effectively solve the balance between cost, efficiency and scalability. Since the 1980s, the distributed computer has become the focus of research, including a variety of systems, such as middleware, SOA, grid computing, web service, Hadoop platform and so on [8]. Before the emergence of CDC, grid computing is the most typical representative of distributed computing. By connecting the hardware, software and information resources scattered all over the Internet into a huge whole, grid computing can enable people to use the geographically dispersed resources, which will complete a variety of large-scale, complex computing and data processing tasks. Grid computing is an Internet level distributed computing method, which mainly uses the distributed computing resources on the Internet. Grid computing is the closest to CDC, which can achieve centralized parallel processing of large computing tasks. However, the development of grid computing technology contributes a lot, which has become the technical basis of CDC development [9]. Distributed computing is one of the most important supporting technologies of CDC. Taking Google CDC as an example, distributed computing cases mainly include distributed data storage system GFS, distributed data management system Big Table, open source Hadoop platform, etc. In the field of PAAS and SAAS of CDC, distributed computing will be an important technology. With the method of distributed computing, we can release the binding relationship between users and large application systems. Overall, distributed computing breeds CDC. In the CDC environment, distributed computing reshapes the application form and service form of CDC, which provides a simple and feasible computing method for big data applications [10].&lt;/p>
&lt;h3 id="22-advantages-of-cnfs">2.2 Advantages of CNFS&lt;/h3>
&lt;p>CNFS provides a new distributed Internet infrastructure. On the infrastructure, we can build many different types of applications. Therefore, CNFS is a global, mountable and versioned file system, which has many advantages [11]. First, decentralization is faster. All the data in CNFS are stored on the user&amp;rsquo;s own computer, which is equivalent to distributing the central server of HTTP to each user. If other users want to get the data, they can extract it from the nearest user&amp;rsquo;s computer. Second, reduce the dependence on the backbone. The transmission means of CNFS is obviously different from that of HTTP. HTTP mainly depends on the backbone network [12-14]. CNFS is mainly transmitted through nodes, which can be transmitted from one node to another. Therefore, CNFS can switch another node immediately even if one node fails. Third, permanent data storage. The storage mode of CNFS is very special, which is a fragmented storage mode. CNFS data can be divided into many parts, which leads to people can not get complete data. Therefore, data can be saved safely and permanently [15].&lt;/p>
&lt;h2 id="3-cdc-processing">3. CDC processing&lt;/h2>
&lt;h3 id="31-k-nearest-neighbor-method">3.1 K-nearest neighbor method&lt;/h3>
&lt;p>K-nearest neighbor (KNN) is a typical ranking classification algorithm. After one judgment, the sorting algorithm can output documents belonging to multiple categories. Through KNN, we can calculate the similarity of each text in the training sample set, which can find k most similar training texts. At the same time, we can select a threshold, which can be sorted according to the score. The similarity between k nearest neighbor training samples and the test sample is shown in Formula 1. K neighbors calculate the weight of each class, as shown in formula 2.&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cnfs_knn_formula.png" alt="cnfs_knn_formula">&lt;/p>
&lt;h3 id="32-cdc-architecture">3.2 CDC architecture&lt;/h3>
&lt;p>CDC can provide elastic resources on demand, which is a collection of services. The architecture of CDC can be divided into three levels: core service, service management and user access interface, as shown in Figure 1.&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cnfs_cdc_architecture.png" alt="cnfs_cdc_architecture">&lt;/p>
&lt;h3 id="33-file-storage-verification-scheme">3.3 File storage verification scheme&lt;/h3>
&lt;p>File storage verification scheme is the basis for service providers to prove the integrity of their stored data to service consumers. After each service, the service information will be written into the blockchain. Therefore, CDC has become an important computing and storage mode of blockchain. The file storage method is shown in Figure 2.&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cnfs_block_structure.png" alt="cnfs_block_structure">&lt;/p>
&lt;h2 id="4-important-technologies-of-cdc">4. Important technologies of CDC&lt;/h2>
&lt;h3 id="41-location-service-based-on-mobile-cloud">4.1 Location service based on mobile cloud&lt;/h3>
&lt;p>As an indispensable supporting technology of mobile CDC, location-based services can provide a variety of location-based services around the architecture of location-based services, such as mainstream location technology, location index, query processing and so on. Location services based on traditional positioning technologies such as GPS cover a wide range, which has been widely used in many fields, such as military, transportation and so on. However, GPS has many problems, such as weak penetration, high positioning energy consumption and so on, which can not fully meet the requirements of new mobile applications such as accurate indoor positioning and user action recognition. Through CDC, we can complete location services of mobile cloud, such as automatic shopping guide service, patient monitoring in smart home, etc. Mobile CDC model has been used to build new location services, which can solve and form an important supporting technology.&lt;/p>
&lt;h3 id="42-energy-saving-technology-of-mobile-terminal">4.2 Energy saving technology of mobile terminal&lt;/h3>
&lt;p>The battery capacity of mobile terminals is growing slowly, and the contradiction between the rapid and rich mobile applications and the limited power of mobile terminals is becoming increasingly prominent. Through CDC, we can achieve energy saving in many aspects, such as data transmission energy saving. The proportion of wireless data transmission energy consumption in the energy consumption of mobile terminals is also increasing. Through cellular network transmission data, we can usually use RRC protocol for the whole process of mobile terminal energy consumption measurement. The results show that there is too much tail energy consumption in the process of data transmission, which reduces the energy utilization of mobile terminals. By changing the time threshold of tail energy consumption, we can reduce the number and time of jumping to the tail energy consumption state. Through transmission scheduling, we can reduce the tail energy consumption. Through the virtual ending mechanism and double queue scheduling algorithm, we can schedule the prefetch data and delay transmission, which can adjust the time threshold.&lt;/p>
&lt;h3 id="43-data-security-and-privacy-protection">4.3 Data security and privacy protection&lt;/h3>
&lt;p>While obtaining rich services of CDC, mobile users will face more security threats such as privacy exposure. This requires us to strengthen the data security and privacy protection of CDC. In mobile CDC environment, users&amp;rsquo; data and computing tasks migrate through wireless network, which can realize and support online query, multi-user data sharing and so on. In view of the limited computing resources and mobility of mobile terminals, cloud authentication platform can avoid the degradation of service performance caused by multi-user parallel access. Through a series of new cryptographic mechanisms, we can choose between encryption and attribute based encryption. By introducing an access structure to associate ciphertext or user private key with attributes, we can flexibly represent access control policies, which can provide fine-grained access authorization for data.&lt;/p>
&lt;h2 id="5-conclusion">5. Conclusion&lt;/h2>
&lt;p>At present, CDC has become an important way of data processing and storage, which can optimize decentralization and other measures. CNFS is a new application based on HTTP, which is an attempt of new technology. Therefore, distributed computing will become the main computing method of computer in the future, which can improve a variety of IT.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;blockquote>
&lt;p>[1] Cui Yong, Song Jian, Miao congcongcong, Tang Jun. research progress and trend of mobile CDC [J]. Acta computer Sinica, 2017, 40 (02): 273-295.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[2] Ding Jian, Wang Huaimin, Shi Peichang, Wu Qingbo, Dai Huadong, Fu Hongyi. Trusted cloud service [J]. Acta computa Sinica, 2015, 38 (01): 133-149.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[3] Li Jia. Intelligent logistics model reconstruction based on big data CDC [J]. China&amp;rsquo;s circulation economy, 2019, 33 (02): 20-29.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[4] Lu Xiaobin, Wang Jianya. Analysis of the current situation of CDC Adoption Behavior [J]. Journal of Chinese library, 2015, 41 (01): 92-111.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[5] Lu Xiaobin, Wang Tao. Research on technical improvement and optimization of massive data analysis process by Google&amp;rsquo;s three CDC technologies [J]. Library and information work, 2015, 59 (03): 6-11+102.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[6] Pengxiaosheng, dengdiyuan, chengshijie, wenjinyu, Li Chaohui, Niulin. Key technologies of power big data for smart grid application [J]. Journal of China Electric Engineering, 2015, 35 (03): 503-511.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[7] Qin Rongsheng. Research on the impact of big data and CDC technology on audit [J]. Audit research, 2014 (06): 23-28.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[8] Shi Weisong, zhangxingzhou, wangyifan, zhangqingyang. Edge calculation: present situation and Prospect [J]. Computer research and development, 2019, 56 (01): 69-89.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[9] Shi Weisong. Edge computing: a new computing model in the era of Internet of things [J]. Computer research and development, 2017, 54 (05): 907-924.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[10] Sun Lei, Hu Xuelong, ZhangXiaobin, Li Yun. CDC solutions for biomedical big data processing [J]. Journal of electronic measurement and instruments, 2014, 28 (11): 1190-1197.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[11] Wang Guiling, Han Yanbo, Zhang Zhongmei, Zhu Meiling. Stream data integration and service based on CDC [J]. Acta computa Sinica, 2017, 40 (01): 107-125.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[12] Wang Yu Ding, Yang Jia Hai, Xu Cong, Ling Xiao, Yang Yang. Overview of CDC access control technology [J]. Acta software Sinica, 2015, 26 (05): 1129-1150.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[13] Xu Baomin, Ni Xuguang. Development trend and key technology progress of CDC [J]. Chinese Academy of Sciences, 2015, 30 (02): 170-180.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[14] Yang Qingfeng. Key technology prediction and strategic selection in CDC era [J]. Journal of Chinese Academy of Sciences, 2015, 30 (02): 148-161+169.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>[15] Zhou Yuezhi, Zhang Di. Near end CDC: opportunities and challenges in the post CDC era [J]. Acta computa Sinica, 2019, 42 (04): 677-700.&lt;/p>
&lt;/blockquote></description></item><item><title>Ethereum MPT(Merkle Patricia Tries) 详解</title><link>https://jpg6.com/en/2021/08/16/blockchain_ethereum_mpt/</link><pubDate>Mon, 16 Aug 2021 12:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/08/16/blockchain_ethereum_mpt/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近接到了一个工作任务，将项目智能合约状态树中的数据结构从红黑树改为字典树，并对比一下两个数据结构的性能，Trie 主要参照的是 Ethereum 官方的 Java 实现 &lt;a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/trie">ethereum/ethereumj&lt;/a>，而红黑树则是自己实现，本文则是对两个数据结构的理论和实际表现对比的记录。&lt;/p>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;h3 id="red-black-tree---红黑树">Red-Black Tree - 红黑树&lt;/h3>
&lt;p>红黑树是一种近似平衡的二叉查找树，含有红黑结点，能够确保任何一个结点的左右子树高度差小于两倍。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/red_black_tree_2.png" alt="red_black_tree_2">&lt;/p>
&lt;h4 id="性质">性质&lt;/h4>
&lt;p>必须满足以下五个性质：&lt;/p>
&lt;ol>
&lt;li>结点为红色或黑色&lt;/li>
&lt;li>根结点为黑色&lt;/li>
&lt;li>叶子结点（NIL）为黑色&lt;/li>
&lt;li>每个红色节点的两个子结点为黑色&lt;/li>
&lt;li>任意一个结点到每个叶子结点的路径都包含相同数量的黑色结点&lt;/li>
&lt;/ol>
&lt;p>红黑树并不是完美平衡的，但是左子树和右子树的层数是相等的，因此，也成为黑色完美平衡。因为是近似平衡的，所以旋转的频次会降低，维护成本下降，时间复杂度维持在 LogN。&lt;/p>
&lt;h4 id="操作">操作&lt;/h4>
&lt;p>红黑树主要通过三种操作来保持自平衡：&lt;/p>
&lt;ul>
&lt;li>左旋&lt;/li>
&lt;li>右旋&lt;/li>
&lt;li>变色&lt;/li>
&lt;/ul>
&lt;h4 id="与-avl-的对比">与 AVL 的对比&lt;/h4>
&lt;ul>
&lt;li>AVL 提供了更快的查找操作（因为完美平衡）&lt;/li>
&lt;li>红黑树提供了更快的插入和删除操作&lt;/li>
&lt;li>AVL 存储的结点信息更多（平衡因子与高度），因此占存储空间更大&lt;/li>
&lt;li>读操作多、写操作少的时候用 AVL 更合适，多用于数据库；当写操作较多时一般使用红黑树，简洁好实现，多用于各类高级语言的库中，如 map、set 等&lt;/li>
&lt;/ul>
&lt;h4 id="代码实现">代码实现&lt;/h4>
&lt;p>因为红黑树较为复杂，实现代码上传至 GitHub 供学习查看。&lt;/p>
&lt;p>&lt;a href="https://github.com/pseudoyu/RedBlackTree-java">pseudoyu/RedBlackTree-Java&lt;/a>&lt;/p>
&lt;h3 id="trie---字典树">Trie - 字典树&lt;/h3>
&lt;p>Trie 被称为字典树，又称单词查找树或键树，常用于统计和排序大量的字符串，如搜索引擎的文本磁盘统计等。&lt;/p>
&lt;p>它能够最大限度减少无谓的字符串比较，查询效率较高。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/trie_structure.png" alt="trie_structure">&lt;/p>
&lt;h4 id="性质-1">性质&lt;/h4>
&lt;ol>
&lt;li>结点不存完整单词&lt;/li>
&lt;li>从根结点到某一结点，路径上经过的字符连接起来为该结点对应的字符串&lt;/li>
&lt;li>每个结点的所有子结点路径代表的字符都不相同&lt;/li>
&lt;li>结点可以存储额外信息，如词频等&lt;/li>
&lt;/ol>
&lt;h4 id="结点内部实现">结点内部实现&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/trie_nodes.png" alt="trie_nodes">&lt;/p>
&lt;p>字典树的高度较低，但占用的存储空间较大，核心思想是空间换时间。&lt;/p>
&lt;p>利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的，可以很天然地解决单词联想等业务场景。&lt;/p>
&lt;h4 id="代码实现-1">代码实现&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Trie&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Trie&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isEnd&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Trie&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Trie&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">26&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">isEnd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Trie&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">children&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">children&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Trie&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">children&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEnd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">word&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Trie&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">searchPrefix&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEnd&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">startsWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">prefix&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">searchPrefix&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">prefix&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Trie&lt;/span> &lt;span class="nf">searchPrefix&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">prefix&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Trie&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">prefix&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prefix&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">children&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">children&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="modified-merkle-patricia-tries">Modified Merkle Patricia Tries&lt;/h3>
&lt;h4 id="以太坊账户状态存储方式">以太坊账户状态存储方式&lt;/h4>
&lt;ol>
&lt;li>使用 Key-Value 的哈希表存储在每次出块时都会有新交易打包进块中，从而改变 merkle tree，但事实上只有一小部分账户发生改变，成本过高&lt;/li>
&lt;li>直接用 merkle tree 存放账户，要改内容时直接改 merkle tree 也不可行，因为 merkle tree 没有提供一个高校的查找和更新方法&lt;/li>
&lt;li>使用 sorted merkle tree 也不可行，因为新增账户产生的账户地址是随机的，需要插入重新排序&lt;/li>
&lt;/ol>
&lt;h4 id="mpt-结构">MPT 结构&lt;/h4>
&lt;p>利用了 Trie 结构的特点&lt;/p>
&lt;ol>
&lt;li>打乱顺序后 Trie 结构不变，天然排序，即使插入新值也不影响，适用于以太坊 account-base 的结构&lt;/li>
&lt;li>具有很好的更新局部性，更新时不用遍历整棵树&lt;/li>
&lt;/ol>
&lt;p>但是 Trie 结构比较浪费存储空间，当键值对分布稀疏时效率较低，而以太坊的账户地址是 40 位十六进制数，地址约为 2^160 种，极其稀疏（防止哈希碰撞）。&lt;/p>
&lt;p>因此，需要对 Trie 结构进行路径压缩，也就是 Pactricia Trie，经过压缩后，树的高度明显减少，空间和效率都得到提升。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/pactricia_trie.png" alt="pactricia_trie">&lt;/p>
&lt;h4 id="modified-mpt-结构">Modified MPT 结构&lt;/h4>
&lt;p>而以太坊真正采用的是 Modified MPT 结构，其结构如下&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/modified_merkle_pactricia_trie.png" alt="modified_merkle_pactricia_trie">&lt;/p>
&lt;p>每次发布新的区块时，状态树中的新节点的值会发生变化，并不是更改原值，而是新建一些分支，保留原来的状态（因此可以实现回滚）。&lt;/p>
&lt;p>在以太坊系统中，分叉是常态，orphan block 中的数据都要向前回滚，而由于 ETH 中有智能合约，为了支持智能合约的回滚，必须保持之前的状态。&lt;/p>
&lt;h4 id="代码实现-2">代码实现&lt;/h4>
&lt;p>代码参照以太坊的 Java 实现。&lt;/p>
&lt;p>&lt;a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/trie">ethereum/ethereumj - GitHub&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对&lt;code>Ethereum MPT&lt;/code> 与红黑树数据结构的解析，在刷 LeetCode 痛苦的时候想过很多次这些学了也用不到，没想到那么快就有了应用场景，还是要好好理解和实践呀！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://www.jianshu.com/p/e136ec79235c">30 张图带你彻底理解红黑树&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/shi-xian-trie-qian-zhui-shu-by-leetcode-ti500/">LeetCode 实现 Trie&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/pseudoyu/RedBlackTree-java">pseudoyu/RedBlackTree-Java&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000016050921">以太坊源码分析 &amp;ndash; MPT 树&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ethereum/ethereumj/tree/develop/ethereumj-core/src/main/java/org/ethereum/trie">ethereum/ethereumj&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>LeetCode 刷题常用数据结构（Go 篇）</title><link>https://jpg6.com/en/2021/05/29/algorithm_data_structure_go/</link><pubDate>Sat, 29 May 2021 00:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/05/29/algorithm_data_structure_go/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近重新开始用 Go 刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以常用的数据结构和操作并不多，熟练使用也能很好地提升自己的代码质量，特此做一个整理，以便于查阅。&lt;/p>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;h3 id="数组">数组&lt;/h3>
&lt;h4 id="初始化">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个大小为10，默认值为0的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">nums&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个二位boolean数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">visited&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 访问num[i]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="字符串-string">字符串 String&lt;/h3>
&lt;h4 id="初始化-1">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建多行字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">s2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">`This is a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">multiline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">string.`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="访问字符串">访问字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 可直接用索引访问字节（非字符）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">s1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">first&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">first&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="修改字符串">修改字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 字符串的值是不可变的，可以分配一个新字符串值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">t&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将字符串转为[]byte或[]rune可以进行修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">s1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="sc">&amp;#39;H&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s3&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="查询字符是否属于特定字符集">查询字符是否属于特定字符集&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 判断字符串s的i索引位置字符是否是元音
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;aeiouAEIOU&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="判断字符串大小">判断字符串大小&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">s1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">s2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 相等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 不相等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Compare 函数可以用于比较，1大于，0相等，-1小于
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// EqualFold 函数忽略大小写后比较
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="拼接字符串">拼接字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 支持直接用+进行连接，但是效率不高
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">s1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;hello &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">s2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">s1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="高效拼接字符串">高效拼接字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bytes.Buffer可以一次性连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="nx">bytes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WriteString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">b1&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 多个字符串拼接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">strs&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">strs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="整型-或任意数据类型-转为字符串">整型 (或任意数据类型) 转为字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Itoa转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">t&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Itoa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Sprintf转换
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">t&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="切片-slice">切片 slice&lt;/h3>
&lt;h4 id="初始化-2">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个存储String类型的切片
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个存储int类型的切片
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">slice&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法-1">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 判断是否为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 返回元素个数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 访问索引元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在尾部添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">slice&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="通过切片模拟栈和队列">通过切片模拟栈和队列&lt;/h3>
&lt;h4 id="栈">栈&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">stack&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// push压入
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">stack&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stack&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// pop弹出
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">stack&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stack&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">stack&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">stack&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stack&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 检查栈空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stack&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="队列">队列&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建队列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">queue&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// enqueue入队
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">queue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// dequeue出队
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">queue&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">queue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">queue&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 长度0为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map">Map&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 设置kv
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 删除k
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 遍历
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// map键需要可比较，不能为slice、map、function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// map值都有默认值，可以直接操作默认值，如：m[age]++ 值由0变为1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 比较两个map需要遍历，其中的kv是否相同，因为有默认值关系，所以需要检查val和ok两个值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="标准库">标准库&lt;/h3>
&lt;h4 id="sort">sort&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// int排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Ints&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 字符串排序
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Strings&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="math">math&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// int32 最大最小值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MaxInt32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MinInt32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// int64 最大最小值（int默认是int64）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MaxInt64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MinInt64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="copy">copy&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 删除a[i]，可以用 copy 将i+1到末尾的值覆盖到i,然后末尾-1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// make创建长度，则通过索引赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// make长度为0，则通过append()赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="类型转换">类型转换&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// byte转数字
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;12345&amp;#34;&lt;/span> &lt;span class="c1">// s[0] 类型是byte
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">str&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// &amp;#34;1&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;#39;1&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d%s%c\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 111
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 字符串转数字
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Atoi&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">str&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">strconv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Itoa&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>刷题路漫漫&amp;hellip;加油！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://leetcode.com">LeetCode 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/greyireland/algorithm-pattern">greyireland/algorithm-pattern&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Uright - 区块链音乐版权管理ÐApp</title><link>https://jpg6.com/en/2021/05/10/uright_case_study/</link><pubDate>Mon, 10 May 2021 19:30:25 +0800</pubDate><guid>https://jpg6.com/en/2021/05/10/uright_case_study/</guid><description>&lt;h1 id="uright---区块链音乐版权管理ðapp">Uright - 区块链音乐版权管理ÐApp&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_chain.png" alt="uright_chain">&lt;/p>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>基于 Angular+Solidity+Web3.js，应用 IPFS、ENS、Oracles 等技术，通过 Truffle 部署于 Ethereum 的音乐版权管理 Decentralized Application (ÐApp)。&lt;/p>
&lt;p>Uright 去中心化应用允许音乐人（内容所有者）将他们的作品注册为&amp;quot;Manifestations&amp;quot;并登记至以太坊区块链。&lt;/p>
&lt;p>&amp;ldquo;Manifestations&amp;quot;将音乐人的作品展现为内容片段，用以证明作者身份及所有权。这是通过&amp;quot;Manifestations&amp;quot;智能合约完成的，该智能合约记录显示作品内容的 IPFS 哈希、标题(计划附加元数据)以及注册时间，这些信息可以用来证明作者身份，并且内容可以从 IPFS 文件存储系统中检索到。&lt;/p>
&lt;p>然而，仅仅注册一个&amp;quot;Manifestations&amp;quot;是不够的，还应提供支撑材料，否则该&amp;quot;Manifestations&amp;quot;将于一天后失效。这些支持材料通常由音乐人（作品上传者）注册，但任何其他人都可以添加支撑材料，支撑材料可以是任何类型的文件，如截图、PDF 文档等。&amp;ldquo;UploadEvidences&amp;quot;智能合约会将支撑材料上传至 IPFS 文件系统。&lt;/p>
&lt;p>此外，&amp;ldquo;YouTubeEvidences&amp;quot;智能合约允许音乐人在 YouTube 等视频/音乐平台的上传简介中声明作品&amp;quot;Manifestations&amp;rdquo;，智能合约将自动检测作为支撑材料。&lt;/p>
&lt;p>（开发中&amp;hellip;）如果有其他人已经注册了音乐人的原创作品/支持材料，音乐人可以进行申诉，合约功能已实现，但在 Web 应用尚不可用。&lt;/p>
&lt;p>（开发中&amp;hellip;）通过 NFT 技术对音乐人作品进行代币化。&lt;/p>
&lt;p>项目地址：&lt;a href="https://github.com/pseudoyu/uright">GitHub&lt;/a>&lt;/p>
&lt;h3 id="架构">架构&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_architecture.png" alt="uright_architecture">&lt;/p>
&lt;h3 id="核心技术">核心技术&lt;/h3>
&lt;h4 id="ipfs">IPFS&lt;/h4>
&lt;p>当音乐人使用数字文件（如.mp3 格式文件）注册自己的作品时，文件将被上传至 IPFS 且其生成的 IPFS 标识符(哈希值)用于在 Ethereum 区块链中注册作品。用户可以选择将作品上传至 IPFS 网络，也可以保持作品的私密性，设置将内容不上传至 IPFS 网络，而只生成作品哈希值。&lt;/p>
&lt;p>用户需要保留与生成作品哈希时使用的完全相同的文件，可在以后用作拥有数字文件的证据，以便于哈希检验。IPFS 哈希值也将用于检索上传的内容。&lt;/p>
&lt;h4 id="ethereum-naming-system-ens">Ethereum Naming System (ENS)&lt;/h4>
&lt;p>Uright 项目集成了 ethereum-ens 包，可作用于以太坊主网、Ropsten、Rinkeby 测试网及本地测试网。ensdomains/ens 包用于设置地址名称。&lt;/p>
&lt;h4 id="oracles">Oracles&lt;/h4>
&lt;p>Oracle 模块集成在上传 YouTube 证据的智能合约，通过 YouTube 的视频 ID (&lt;a href="https://www.youtube.com/watch?v=VIDEO_ID">https://www.youtube.com/watch?v=VIDEO_ID&lt;/a>) 来检索该视频描述中是否含有特定作品哈希。&lt;/p>
&lt;p>因此，该功能允许音乐人证明该作品同时存在于 YouTube 平台并属于自己（因为仅上传者可以编辑视频描述，使其包含作品哈希值）&lt;/p>
&lt;p>可使用 Oraclize 提供的在线服务进行查询: &lt;a href="http://app.oraclize.it/home/test_query">http://app.oraclize.it/home/test_query&lt;/a>&lt;/p>
&lt;h4 id="可升级性">可升级性&lt;/h4>
&lt;p>为了使作品注册合约具备可升级性，引入 ZeppelinOS 中的 AdminUpgradeabilityProxy，通过中继代理的方式实现了委任模式。&lt;/p>
&lt;h3 id="设计模式">设计模式&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_design_architecture.png" alt="uright_design_architecture">&lt;/p>
&lt;p>Uright 项目智能合约的设计有利于模块化和可重用性。比如，将验证过期功能实现为一个实体库；以及&amp;quot;Evidencable&amp;quot;库使注册作品可累积多项支持材料，也可以在后续申诉功能等研发中提供便利。&lt;/p>
&lt;p>此外，将这些功能作为库提供可以降低部署成本。&lt;/p>
&lt;h4 id="circuit-breaker-断路器模式--emergency-stop">Circuit Breaker (断路器模式) / Emergency Stop&lt;/h4>
&lt;p>断路器的模式可以防止一个应用程序反复尝试执行一个可能会失败的操作，让它继续不等待故障的纠正或浪费处理器周期，而它决定了故障是长期持久的。断路器的模式也使一个应用程序来检测故障是否已得到解决。如果出现问题，该应用程序可以尝试调用操作。&lt;/p>
&lt;h4 id="automatic-deprecation">Automatic Deprecation&lt;/h4>
&lt;p>此外，对已登记的作品实行了类似于&amp;quot;Automatic Deprecation&amp;quot;的模式。这样，如果一个
用户注册了作品但不提供支持材料，其注册将在设定的固定时间后过期，在这种情况下，过期意味着该作品可以被另一个用户重新注册覆盖。&lt;/p>
&lt;h3 id="安全措施">安全措施&lt;/h3>
&lt;p>所有智能合约都已使用 Remix 和 Solhint 工具进行了代码检查，通过这两种工具检查常见的安全问题，如可重入性或时间戳依赖性等。&lt;/p>
&lt;p>SafeMath 库用于避免整数上溢和下溢问题。&lt;/p>
&lt;p>最后，Solhint 被设置为定义的连续集成和部署工作流中的一个步骤，这样，每次代码被推送到 GitHub 时，travis 都会运行所有的测试(对于合同和 Angular 前端)，如果所有测试都通过，则负责部署。&lt;/p>
&lt;p>此外，Solhint 工具也会在测试之前执行，用于跟踪任何可能出现的安全问题。&lt;/p>
&lt;h3 id="相关库">相关库&lt;/h3>
&lt;p>Uright 项目从 ZeppelinOS 和 OpenZeppelin 包中导入了一些库用于功能实现&lt;/p>
&lt;h4 id="zeppelinos">ZeppelinOS&lt;/h4>
&lt;ul>
&lt;li>AdminUpgradeabilityProxy: 实现智能合约的可升级性&lt;/li>
&lt;li>Initializable: 通过可升级的智能合约拓展实现代理的初始化&lt;/li>
&lt;/ul>
&lt;h4 id="openzeppelin">OpenZeppelin&lt;/h4>
&lt;ul>
&lt;li>Pausable: 实现&amp;quot;Circuit Breaker (断路器模式) / Emergency Stop&amp;quot;设计模式，通过拓展 Ownable 以实现只有拥有者可以停止&lt;/li>
&lt;li>SafeMath: 用于避免整数上溢和下溢问题&lt;/li>
&lt;li>OraclizeAPI 包，usingOraclize，用于检验 YouTube 视频是否属于特定用户且绑定至版权作品&lt;/li>
&lt;/ul>
&lt;h3 id="智能合约详解">智能合约详解&lt;/h3>
&lt;h4 id="manifestationssol">Manifestations.sol&lt;/h4>
&lt;p>此智能合约用于注册作品，通过将作品元数据（目前为标题）及内容的 IPFS 哈希值与作者身份（即以太坊账户地址）进行关联，以证明作品所有权，同一作品可声明为单人作者或联合作者。此外，如用一个已经注册的内容哈希重新注册新作品，系统会检测为失败。&lt;/p>
&lt;h4 id="uploadevidencessol">UploadEvidences.sol&lt;/h4>
&lt;p>此智能合约主要用于支持材料登记，通过将作品文件内容上传至 IPFS 文件系统进行证据登记。对于同一个作品，可以添加多个证据（但不能重复添加）。&lt;/p>
&lt;h4 id="expirablelibsol">ExpirableLib.sol&lt;/h4>
&lt;p>此智能合约主要用于管理作品创建和到期时间的项目逻辑，实现作品注册（或申诉）的时效性。&lt;/p>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>Uright ÐApp 通过 Web 客户端对音乐人和用户提供音乐版权管理服务&lt;/p>
&lt;ol>
&lt;li>版权注册：以作品文件生成唯一哈希值，将音乐人的作品注册上链，以此证明作品版权&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_register.png" alt="uright_register">&lt;/p>
&lt;ul>
&lt;li>注册从未注册的新作品&lt;/li>
&lt;li>注册已存在注册记录的作品并进行申诉&lt;/li>
&lt;li>添加支撑材料来证明作品版权&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_evidence_upload.png" alt="uright_evidence_upload">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_youtube_evidence.png" alt="uright_youtube_evidence">&lt;/p>
&lt;ol start="2">
&lt;li>版权检索：通过哈希值检查一个作品是否已被注册&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_music_search.png" alt="uright_music_search">&lt;/p>
&lt;ul>
&lt;li>我的：查找当前音乐人的所有注册作品&lt;/li>
&lt;li>版权库：查找链上所有已注册作品&lt;/li>
&lt;li>详细信息：单击“详细信息”查看详细信息，包括所有已上传证据&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/uright_music_library.png" alt="uright_music_library">&lt;/p></description></item><item><title>BlockchainGuide - 区块链核心知识库</title><link>https://jpg6.com/en/2021/04/03/blockchain_guide/</link><pubDate>Sat, 03 Apr 2021 12:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/04/03/blockchain_guide/</guid><description>&lt;h1 id="blockchainguide">BlockchainGuide&lt;/h1>
&lt;blockquote>
&lt;p>一个不断更新的区块链核心知识库&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/pseudoyu/blockchain-guide">源项目地址&lt;/a> | &lt;a href="https://www.pseudoyu.com/blockchain-guide/">在线阅读&lt;/a>&lt;/p>
&lt;p>&lt;strong>目录&lt;/strong>&lt;/p>
&lt;!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->
&lt;!-- code_chunk_output -->
&lt;ul>
&lt;li>&lt;a href="#blockchainguide">BlockchainGuide&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80">区块链基础&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%AF%94%E7%89%B9%E5%B8%81">比特币&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%BB%A5%E5%A4%AA%E5%9D%8A">以太坊&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hyperledger-fabric">Hyperledger Fabric&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF">热门技术&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#ipfs">IPFS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%B7%A8%E9%93%BE">跨链&lt;/a>&lt;/li>
&lt;li>&lt;a href="#baas-%E5%B9%B3%E5%8F%B0">BaaS 平台&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98">开发实战&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80">编程语言&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7">开发工具&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE">个人项目&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%85%B6%E4%BB%96">其他&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E5%85%B3%E4%BA%8E%E6%88%91">关于我&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- /code_chunk_output -->
&lt;h2 id="基础知识">基础知识&lt;/h2>
&lt;h3 id="区块链基础">区块链基础&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/">区块链基础知识与关键技术&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="比特币">比特币&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://bitcoin.org/en/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bitcoin.org/bitcoin.pdf">白皮书&lt;/a> (&lt;a href="https://bitcoin.org/files/bitcoin-paper/bitcoin_zh_cn.pdf">中译&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://github.com/bitcoin/bitcoin">源码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/02/17/blockchain_bitcoin_basic/">比特币核心技术解读&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="以太坊">以太坊&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://ethereum.org/en/">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ethereum.org/en/whitepaper/">白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ethereum.org/en/developers/docs/">文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ethereum/go-ethereum">源码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/02/20/blockchain_ethereum_basic/">Ethereum 核心技术解读&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/08/16/blockchain_ethereum_mpt/">Ethereum MPT(Merkle Patricia Tries) 详解&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="hyperledger-fabric">Hyperledger Fabric&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.hyperledger.org/use/fabric">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hyperledger-fabric.readthedocs.io/en/release-2.2/">文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hyperledger/fabric#releases">源码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/">Hyperledger Fabric 系统架构详解&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/03/23/blockchain_hyperledger_fabric_network/">Hyperledger Fabric 网络与安全体系浅析&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/09/01/blockchain_hyperledger_fabric_gosdk_event/">Hyperledger Fabric Go SDK 事件分析&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="热门技术">热门技术&lt;/h2>
&lt;h3 id="ipfs">IPFS&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://ipfs.io">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ipfs.io/ipfs/QmR7GSQM93Cx5eAg6a6yRzNde1FQv7uL6X1o4k7zrJa3LX/ipfs.draft3.pdf">白皮书&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.ipfs.io">文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ipfs/ipfs">源码&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/">IPFS 分布式存储协议分析与思考&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/03/27/blockchain_ipfs_practice/">IPFS 本地节点搭建（命令行）&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/06/22/blockchain_paper_cnfs/">基于 CNFS 的区块链网络存储与优化&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="跨链">跨链&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/09/06/blockchain_crosschain/">跨链技术原理与实战&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="baas-平台">BaaS 平台&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.pseudoyu.com/en/2021/09/07/blockchain_baas_platform/">区块链服务平台 (BaaS) 简介及架构&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="开发实战">开发实战&lt;/h2>
&lt;h3 id="编程语言">编程语言&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://docs.soliditylang.org/en/v0.8.4/">Solidity&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://golang.org">Go&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="开发工具">开发工具&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://metamask.io/">MetaMask&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.trufflesuite.com">Truffle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://web3js.readthedocs.io/en/v1.3.4/">Web3.js&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openzeppelin.com">OpenZeppelin&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://infura.io">Infura&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="个人项目">个人项目&lt;/h3>
&lt;ol>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Uright (&lt;a href="https://www.pseudoyu.com/en/2021/05/10/uright_case_study/">文档&lt;/a> | &lt;a href="https://github.com/pseudoyu/uright">GitHub&lt;/a>) - 一款基于以太坊区块链的音乐版权管理应用（ÐApp）&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="关于我">关于我&lt;/h3>
&lt;p>个人网站：&lt;a href="https://www.pseudoyu.com">Pseudoyu&lt;/a>&lt;/p>
&lt;p>个人公众号：&amp;quot;&lt;strong>Pseudoyu&lt;/strong>&amp;quot;&lt;/p></description></item><item><title>MySQL 基础知识与相关操作</title><link>https://jpg6.com/en/2021/03/29/database_mysql_basic/</link><pubDate>Mon, 29 Mar 2021 00:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/03/29/database_mysql_basic/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>数据库不论在基础知识学习还是真实企业业务场景中都很常用，也有很多调侃说日常工作总是离不开 CRUD，熟练主流关系型与数据库的使用是一个开发者基本的操作。本文将在 MacOS 系统下对 MySQL 这个流行的关系性数据库的基础知识与相关操作进行整理，以便于查阅。&lt;/p>
&lt;h2 id="数据与数据库概述">数据与数据库概述&lt;/h2>
&lt;h3 id="数据">数据&lt;/h3>
&lt;p>首先，数据其实本质上是一种事实或者观察到的结果，是对客观事务的逻辑上的归纳总结，是信息的一种表现形式和载体。人们从很早的时候就开始管理数据（即使还没有这个概念），最初是由人工管理，而后来渐渐有了文件系统（就像图书馆一样，分门别类地管理不同信息），而随着计算机技术的发展，最后形成了用数据库进行管理的这种较为便捷高效的模式。&lt;/p>
&lt;h3 id="数据库">数据库&lt;/h3>
&lt;p>数据库是按照一定的数据结构来组织、存储和管理数据的一个仓库，主要特征为&lt;/p>
&lt;ul>
&lt;li>结构化&lt;/li>
&lt;li>可共享&lt;/li>
&lt;li>冗余度小&lt;/li>
&lt;li>独立性高&lt;/li>
&lt;li>易于拓展&lt;/li>
&lt;/ul>
&lt;p>很好理解的是，按照不同关系/结构组织起来的数据具备不同的特征，同时也适用于不同的应用场景，目前主要分为层次数据库、网状数据库和关系数据库三种，而我们要着重介绍的 MySQL 就数据关系数据库。&lt;/p>
&lt;h3 id="数据库管理系统dbms">数据库管理系统(DBMS)&lt;/h3>
&lt;p>数据库管理系统(DBMS)是对数据库进行各种操作的一个系统，一具有建立和维护数据库、对数据的存储进行组织管理、对数据库进行控制、定义数据、操纵数据以及管理数据之间的通信等核心功能，不同的数据库管理系统对数据库和数据的处理方式不同，数据呈现方式也不同，也往往需要根据数据规模、业务需求等场景选择合适的数据库管理系统，如在海量数据和高并发数据读写的情况下，关系性数据库的性能会下降得很厉害。&lt;/p>
&lt;h2 id="关系性数据库rdbms">关系性数据库(RDBMS)&lt;/h2>
&lt;h3 id="主要特征">主要特征&lt;/h3>
&lt;p>关系性数据库主要以数据表的形式呈现，每一行为一条记录，每一列则为记录名称所对应的数据域(Field)。许多行列组成一张单表，而若干单表则组成数据库。用户/系统通过 SQL(结构化查询语言对数据库进行查询。&lt;/p>
&lt;p>有些关系型数据库的操作具有事务性，即 ACID 规则&lt;/p>
&lt;ul>
&lt;li>原子性(Atomicity)&lt;/li>
&lt;li>一致性(Consistency)&lt;/li>
&lt;li>隔离性(Isolation)&lt;/li>
&lt;li>持久性(Durability)&lt;/li>
&lt;/ul>
&lt;p>原子性是指一系列事务操作要么都完成，要么都失败，不存在完成了一部分这样的情况，例如银行转账这样的场景里，转账行为发生后，发送方余额减少，而如果数据库出现了操作错误，接收方余额未增加，则会造成严重的问题。&lt;/p>
&lt;p>一致性是指在事务执行完成后，整个数据库的数据是一致的，不应存在数据库内同一数据不同步的情况。&lt;/p>
&lt;p>隔离性则是指不同的事务之间应该独立进行运行、互不干扰的，当然，这样会牺牲一定的效率，但对数据的准确性等提供了较好保障。&lt;/p>
&lt;p>持久性则是指当一个事务执行完成后，它对数据库进行的更改、对系统产生的影响是永久的。&lt;/p>
&lt;h3 id="数据完整性">数据完整性&lt;/h3>
&lt;p>数据完整性是数据库很重要的一个要求和属性，是指存储在数据库中的数据应该保持一致性和可靠性，主要分为以下四种&lt;/p>
&lt;ul>
&lt;li>实体完整性&lt;/li>
&lt;li>域完整性&lt;/li>
&lt;li>参照完整性&lt;/li>
&lt;li>用户定义完整性&lt;/li>
&lt;/ul>
&lt;p>实体完整性要求每张数据表都有一个唯一的标识符，每张表中的主键字段不能为空且不能重复，这主要是指表中的数据都可以被唯一区分。&lt;/p>
&lt;p>域完整性则是通过对表中列做一些额外限制，如限制数据类型、检查约束、设置默认值、是否允许空值以及值域范围等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 在创建表时对字段进行唯一性的约束
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">auto_increment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id_number&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">unique&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参照完整性是指数据库不允许引用不存在的实体，数据库的表与其他表之间往往存在一些关联，可以通过外键约束来保障其完整性。&lt;/p>
&lt;p>而用户自定义完整性则是根据具体应用场景和涉及到数据来对数据进行一些语义方面的限制，如余额不能为负数等，一般用设定规则、存储过程和触发器等来进行约束和限制。&lt;/p>
&lt;h3 id="主流-rdbms">主流 RDBMS&lt;/h3>
&lt;p>目前主流的关系型数据库有以下几种&lt;/p>
&lt;ul>
&lt;li>SQL Server&lt;/li>
&lt;li>Sybase&lt;/li>
&lt;li>DB2&lt;/li>
&lt;li>Oracle&lt;/li>
&lt;li>MySQL&lt;/li>
&lt;/ul>
&lt;p>企业和个人用得比较多的是 Oracle 和 MySQL 两种，接下来也会以 MySQL 为例进行详细的操作讲解。&lt;/p>
&lt;h2 id="mysql">MySQL&lt;/h2>
&lt;h3 id="安装与启动">安装与启动&lt;/h3>
&lt;p>MySQL 是由 Sun 公司（后被 Oracle 公司收购）开发维护的一种很流行的小型数据库系统，由于体积很小且运行数据快，被很多中小型企业/网站采用，也具备较完整的开发和维护生态。&lt;/p>
&lt;p>作为个人用户学习使用，可以下载社区版（开源）进行使用本地搭建环境，可以根据不同的系统选择不同的版本，也具备较便捷的图形界面供大家进行服务的开启、关闭、重启以及进行相关的配置等。本文以 MacOS 系统下的&lt;code>MySQL 8.0.21&lt;/code>为例，在安装及进行基本设置后，就可以对本机 MySQL 服务进行管理，版本可能会略有差别，但核心功能差别不大。&lt;/p>
&lt;h4 id="图形界面">图形界面&lt;/h4>
&lt;p>打开系统偏好设置，可以看到如下界面&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mac_mysql_manage.png" alt="mac_mysql_manage">&lt;/p>
&lt;p>点击 MySQL 图标即可进入详细管理界面&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mac_mysql_service.png" alt="mac_mysql_service">&lt;/p>
&lt;p>在这个管理界面可以很方便地进行 MySQL 服务的开启与关闭，也可以将其设置为开机自启等操作，&lt;code>Configuration&lt;/code>中也可以进行进一步的设置，但更建议在命令行进行。&lt;/p>
&lt;h4 id="命令行界面">命令行界面&lt;/h4>
&lt;p>当然，也可以在命令行中进行启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">//启动MySQL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo /usr/local/mysql/support-files/mysql.server start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//关闭MySQL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo /usr/local/mysql/support-files/mysql.server stop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>效果如下&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mac_mysql_cli.png" alt="mac_mysql_cli">&lt;/p>
&lt;p>当然也可以通过设置一些 alias 来简化命令，但是既然有比较方便的管理界面了，也就不折腾了，如果在一些没有图形界面的 linux 环境下进行操作，则需要命令行操作。&lt;/p>
&lt;h3 id="连接-mysql">连接 MySQL&lt;/h3>
&lt;p>安装和启动完成后 即可通过命令行连接 MySQL 并进行一些基本操作了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mysql -h localhost -u root -p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//输入安装时设置的密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//查看状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">status&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_connect.png" alt="mysql_connect">&lt;/p>
&lt;p>而除了通过命令行连接外，MacOS 平台上也有一个很好用的客户端&lt;code>Sequel Pro&lt;/code>，提供了大多数需要的功能，而由于正式版存在崩溃问题且已经不再维护，建议下载测试版 &lt;a href="https://sequelpro.com/test-builds">Sequel Pro 测试版&lt;/a>，可以很方便地连接至本地/远程服务器 MySQL 服务&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sequel_pro_connect.png" alt="sequel_pro_connect">&lt;/p>
&lt;p>并查询数据库的结构、内容及执行 SQL 命令&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sequel_pro_manage.png" alt="sequel_pro_manage">&lt;/p>
&lt;p>这是目前我使用下来非常强大且轻量级的一个客户端，建议大家使用！&lt;/p>
&lt;h3 id="sql-命令">SQL 命令&lt;/h3>
&lt;p>经过了本地 MySQL 配置与连接后，我们就可以对数据库进行一些操作了，SQL 语言主要分为以下四类&lt;/p>
&lt;ul>
&lt;li>DDL 数据定义语言（Data Definition Language）&lt;/li>
&lt;li>DML 数据操纵语言（Data Manipulation Language）&lt;/li>
&lt;li>DQL 数据查询语言（Data Query Language）&lt;/li>
&lt;li>DCL 数据控制语言（Data Control Language）&lt;/li>
&lt;/ul>
&lt;p>接下来我们将通过实战完成一系列操作&lt;/p>
&lt;h4 id="ddl-操作">DDL 操作&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 创建数据库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">database&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">learn_test&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 显示所有数据库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">show&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">databases&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 删除数据库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">database&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mydb&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_ddl.png" alt="mysql_ddl">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 进入某个数据库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">learn_test&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 创建一个简单的数据表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">auto_increment&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">phone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 添加字段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">add&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 修改字段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">modify&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tinyint&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 删除字段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">alter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 删除全表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">drop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了方便演示，这些操作都将在&lt;code>Sequel Pro&lt;/code>客户端中进行，操作后我们的表结构如下&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_learn_test_ddl.png" alt="mysql_learn_test_ddl">&lt;/p>
&lt;h4 id="dml-操作">DML 操作&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 插入多条数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">insert&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">into&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">phone&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;张三&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;13100000000&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;李四&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;13100000001&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;王五&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;13100000002&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 修改数据内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;王五&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 删除数据内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="dql-操作">DQL 操作&lt;/h4>
&lt;p>MySQL 可以通过&lt;code>select&lt;/code>命令来对表进行查询，最常用的查看全表命令为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 查看表的全部数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以通过&lt;code>where&lt;/code>关键字来进行条件查询、以及多个条件的组合查询&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 组合条件进行查询
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">or&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;李四&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_contacts_dql.png" alt="mysql_contacts_dql">&lt;/p>
&lt;p>&lt;code>IN&lt;/code>和&lt;code>LIKE&lt;/code>也是两个可以很灵活用于查询的关键字。&lt;/p>
&lt;p>&lt;code>IN&lt;/code>可以帮助我们过滤某个字段的多个值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 查询id在(1,3)中的数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_contacts_dql_in.png" alt="mysql_contacts_dql_in">&lt;/p>
&lt;p>同时，&lt;code>IN&lt;/code>和&lt;code>EXISTS&lt;/code>也可以用于子查询&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 子查询 IN
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stu_no&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stu_no&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">--- 子查询 EXISTS
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stu_no&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">no&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>LIKE&lt;/code>可以帮助我们进行一些包含关系的模糊搜索，&lt;code>%&lt;/code>可以匹配任一个字符，&lt;code>_&lt;/code>可以匹配单个字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 查询所有姓张的联系人
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;张%&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_contacts_dql_like_2.png" alt="mysql_contacts_dql_like_2">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 查询所有名字以四结尾且为两个字的的联系人
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;_四&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_contacts_dql_like.png" alt="mysql_contacts_dql_like">&lt;/p>
&lt;p>实际应用中，往往数据表的数据量非常庞大，会对数据根据相应条件进行分组，这就要用到&lt;code>GROUP BY&lt;/code>关键字，以及&lt;code>HAVING&lt;/code>用于进一步筛选条件。&lt;code>GROUP BY&lt;/code>需要配合聚合函数进行使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 统计男联系人数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">case&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">then&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;男&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">then&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;女&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;未知&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">性别&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">人数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">having&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_contacts_dql_group_by.png" alt="mysql_contacts_dql_group_by">&lt;/p>
&lt;p>而也可以通过&lt;code>GROUP_CONCAT&lt;/code>来结合一些具体的数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 按性别显示不同性别联系人的列表及总数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">case&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">then&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;男&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">then&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;女&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;未知&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">性别&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">group_concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">separator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39; | &amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">人数&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">group&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_contacts_dql_group_concat.png" alt="mysql_contacts_dql_group_concat">&lt;/p>
&lt;p>有时候我们只需要返回唯一值，而需要去掉重复数据，则可以使用&lt;code>DISTINCT&lt;/code>关键字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 在查询时对字段进行去重
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">distinc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在实际应用中，还很有可能会需要对某些商品交易量进行排名、对一些数值进行排列或博客文章中按照时间线后进行顺序显示等，这就需要用到&lt;code>ORDER BY&lt;/code>这一关键字，它默认为&lt;code>ASC&lt;/code>升序排列，可以通过手动设置&lt;code>DESC&lt;/code>来实现降序。&lt;/p>
&lt;p>同时，有的数据库数据量非常大，一次返回所有的数据比较消耗资源，因此也可以使用&lt;code>LIMIT&lt;/code>关键字来约束返回的记录数，同时，也可以实现分页。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">desc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_dql_order_by_limit.png" alt="mysql_dql_order_by_limit">&lt;/p>
&lt;h3 id="内置函数">内置函数&lt;/h3>
&lt;p>MySQL 也有很多常见的内置函数，可以帮助用户更方便处理各种数据，简化操作，大多数功能都很直观，不作一一说明了&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_functions.png" alt="mysql_functions">&lt;/p>
&lt;p>其中值得注意的是，聚合函数是对一组值进行计算并返回单个值。&lt;/p>
&lt;h3 id="流程控制">流程控制&lt;/h3>
&lt;p>MySQL 有一种类似于编程语言中的 if else 或 switch 的流程控制语句，以实现复杂的应用逻辑&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 选取数据并且把性别以中文标识
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">phone&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">case&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">then&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;男&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">then&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;女&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;未知&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sex&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">contacts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_contacts_flow_control.png" alt="mysql_contacts_flow_control">&lt;/p>
&lt;h3 id="表的连接">表的连接&lt;/h3>
&lt;p>不同的表可以通过一定连接条件发生关联，主要有自连接、内连接和外连接三种，其中外连接又分为左外连接、右外连接和全外连接三种，他们的区别如下&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mysql_table_join.png" alt="mysql_table_join">&lt;/p>
&lt;p>而自连接是一种特殊的连接方式，通过在逻辑上生成多张表以实现复杂的层次结构，常应用于区域表、菜单表和商品分类表等，语法如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">--- 自连接语法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cloumn&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">column&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>学完了关系型数据库，那非关系型数据库又是怎样的呢？后续将会对 Redis 这一使用广泛的非关系性数据库进行整理，敬请期待！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://www.mysql.com">MySQL 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sequelpro.com">Sequel Pro 官网&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>IPFS 本地节点搭建（命令行）</title><link>https://jpg6.com/en/2021/03/27/blockchain_ipfs_practice/</link><pubDate>Sat, 27 Mar 2021 18:46:17 +0800</pubDate><guid>https://jpg6.com/en/2021/03/27/blockchain_ipfs_practice/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>上一篇《&lt;a href="https://www.pseudoyu.com/en/2021/03/25/blockchain_ipfs_structure/">IPFS 分布式文件存储原理&lt;/a>》对于 IPFS 系统的设计理念、功能、工作原理及 IPNS 做了详细的介绍，那么，如何在本地搭建一个 IPFS 节点呢？&lt;/p>
&lt;p>本文在&lt;code>macOS 11.2.3&lt;/code>系统上搭建了一个 IPFS 节点（命令行版本），并对文件上传、下载、网络同步、&lt;code>pin&lt;/code>、&lt;code>GC&lt;/code>、&lt;code>IPNS&lt;/code>等进行了实际操作，以加深对 IPFS 工作原理的理解。&lt;/p>
&lt;h2 id="代码实践">代码实践&lt;/h2>
&lt;h3 id="安装">安装&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">wget https://dist.ipfs.io/go-ipfs/v0.8.0/go-ipfs_v0.8.0_darwin-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar -xvzf go-ipfs_v0.8.0_darwin-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> go-ipfs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./install.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动">启动&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 启动节点&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 上传文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs add ipfs_init_readme.png
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 上传文件并且只输出哈希值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs add -q ipfs_init_readme.png
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 上传目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs add -r &lt;span class="o">[&lt;/span>Dir&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs cat /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs cat /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/quick-start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看自己上传的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs cat QmaP3QS6ZfBoEaUJZ3ZfRKoBm3GGuhQSnUWtkVCNc8ZLTj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看图片并输出到文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs cat QmfViXYw7GA296brLwid255ivDp1kmTiXJw1kmZVsg7DFH &amp;gt; ipfsTest.png
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 下载文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs get QmfViXYw7GA296brLwid255ivDp1kmTiXJw1kmZVsg7DFH -o ipfsTest.png
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 压缩并下载文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs get QmfViXYw7GA296brLwid255ivDp1kmTiXJw1kmZVsg7DFH -Cao ipfsTest.png
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ipfs_init_readme.png" alt="ipfs_init_readme">&lt;/p>
&lt;h3 id="开启加入服务">开启/加入服务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看当前节点信息 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看IPFS配置信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs config show
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 开启节点服务器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs daemon
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>API 服务，默认在 5001 端口，可以通过 http://localhost:5001/webui 进行访问&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ipfs_webui.png" alt="ipfs_webui">&lt;/p>
&lt;p>网关服务，默认在 8080 端口，在浏览器里访问文件需要借助于 IPFS 提供的网关服务，由浏览器先访问到网关，网关去获取 IPFS 网络杀过了的文件。通过 http://localhost:8080/ipfs/[File Hash] 来访问上传到 IPFS 的文件&lt;/p>
&lt;h3 id="文件操作">文件操作&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 列出文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs files ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建目录&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs files mkdir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs files rm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 拷贝文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs files cp &lt;span class="o">[&lt;/span>File Hash&lt;span class="o">]&lt;/span> /&lt;span class="o">[&lt;/span>Dest Dir&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 移动文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs files mv &lt;span class="o">[&lt;/span>File Hash&lt;span class="o">]&lt;/span> /&lt;span class="o">[&lt;/span>Dest Dir&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs files stat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 读取&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs files &lt;span class="nb">read&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-ipns-来解决文件更新问题">使用 IPNS 来解决文件更新问题&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用IPNS发布内容以自动更新&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs name publish &lt;span class="o">[&lt;/span>File Hash&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查询节点id指向的Hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs name resolve
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 有多个站点需要更新，可以新产生一个秘钥对，使用新的key发布&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs key gen --type&lt;span class="o">=&lt;/span>rsa --size&lt;span class="o">=&lt;/span>&lt;span class="m">2048&lt;/span> mykey
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs name publish --key&lt;span class="o">=&lt;/span>mykey &lt;span class="o">[&lt;/span>File Hash&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pinning">Pinning&lt;/h3>
&lt;p>当我们向 IPFS 网络请求文件时，IPFS 会把内容先同步的本地提供服务，使用 Cache 机制处理文件以防止存储空间不断增长，如果文件一段时间未被使用则会被“回收”，Pining 的作用就是确保文件在本地不被“回收”。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># pin一个文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs pin add &lt;span class="o">[&lt;/span>File Hash&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查询某一个Hash是否被pin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs pin ls &lt;span class="o">[&lt;/span>File Hash&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除pin的状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs pin rm -r &lt;span class="o">[&lt;/span>File Hash&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># GC操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ipfs repo gc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本文主要在本地部署了 IPFS 文件系统并对基本操作进行了尝试，基于&lt;code>macOS 11.2.3&lt;/code>和&lt;code>go-ipfs_v0.8.0_darwin-amd64&lt;/code>版本，不同系统操作可能会因版本或依赖问题不一样，如有错漏，欢迎交流指正。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://ipfs.io">IPFS 官网&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>IPFS 分布式存储协议分析与思考</title><link>https://jpg6.com/en/2021/03/25/blockchain_ipfs_structure/</link><pubDate>Thu, 25 Mar 2021 16:30:17 +0800</pubDate><guid>https://jpg6.com/en/2021/03/25/blockchain_ipfs_structure/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在做学校的 Case Study 项目，是一个基于&lt;code>Ethereum&lt;/code>平台的音乐版权管理项目，其中对于音乐作品、版权证明文件等上传用到了 IPFS 分布式文件存储技术，主要是利用其去重的特性来检测侵权行为。对 IPFS 这个系统产生了兴趣，阅读了&lt;a href="https://tech.hyperchain.cn">QTech 平台&lt;/a>上的&lt;a href="https://tech.hyperchain.cn/tag/ipfs/">IPFS 系列文章&lt;/a>，也查询了一些相关资料，通过本文梳理一下，如有错漏，欢迎交流指正。&lt;/p>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>我们日常使用网盘或其他服务时大多都是访问文件所在的特定的服务器（IP 地址），请求文件并下载到本地，通过的是 HTTP 协议，本质上是基于位置寻址的，访问 URL 来得到一层层找到具体的文件，这种方式固然便捷，但是存在一些问题。文件依托于特定的服务器，因此一旦中心化的服务器宕机或者文件被删除了，内容将永久丢失，并且如果离服务器很远/同时访问文件的人很多的话访问速度也会比较慢；而且同样一份文件可能重复存储在不同的服务器中，造成资源的浪费；此外就是存在严重的安全隐患，DDoS、XSS、CSRF 等攻击都可能对文件安全性造成威胁。&lt;/p>
&lt;blockquote>
&lt;p>那有没有更好的解决方案呢？&lt;/p>
&lt;/blockquote>
&lt;p>试想我们把文件存储在一个分布式网络里，每个节点都可以存储文件，用户可以通过访问一个类似目录索引的方式来向最近的节点互相请求文件。这就是 IPFS 星际文件系统的解决思路，它是一个点对点的超媒体文件存储、索引、交换协议，由 Juan Benet 在 2014 年 5 月发起。&lt;/p>
&lt;h3 id="特点">特点&lt;/h3>
&lt;p>IPFS 想把全世界所有部署了相同文件系统的计算设备链接在一起，构建一个分布式网络来替代传统中心化的服务器模式，每个节点都可以存储文件，用户通过&lt;code>DHT(Distributed Hash Table)&lt;/code>分布式哈希表来获取文件，速度更快、更安全，网络安全性更强。&lt;/p>
&lt;p>因为通过 IPFS 存储的文件内容是通过分块求 Hash 值存储为地址的，本质上是通过多重哈希来确定文件的地址，这是一种去中心化但是基于内容寻址的方式，通过对数据本身进行加密，生成独一无二的 Hash 以供查找，这种方式下，即使是微小的改变，也会造成 Hash 结果截然不同，因此很容易能够从 Hash 检测内容是否被篡改，甚至不用访问文件本身。&lt;/p>
&lt;p>不同于传统的服务器模式，IPFS 是一个统一的网络，因此已经上传的相同内容的文件不会重复存储（可以通过 Hash 值检验），极大地节约了整体网络资源，也更加高效。而且理论上只要节点达到一定规模，文件将永久保存，且同一个文件可以从多个（也更近）的节点下载，通讯效率也会更高。&lt;/p>
&lt;p>除此之外，因为是分布式网络进行存储，也可以天然地避免传统 DDoS 等攻击。&lt;/p>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>除了文件存储外，IPFS 还有 DHT 组网、Bitswap 文件交换等功能，之后也会单独写博文进行讲解。&lt;/p>
&lt;h2 id="工作原理">工作原理&lt;/h2>
&lt;p>作为一个文件存储系统，上传文件和下载文件是两个最基本的操作，我们分别讲一下原理。&lt;/p>
&lt;h3 id="ipfs-add-命令">IPFS add 命令&lt;/h3>
&lt;blockquote>
&lt;p>在 IPFS 系统中执行 add 操作就完成了上传操作，那是怎么上传的呢？&lt;/p>
&lt;/blockquote>
&lt;p>在 IPFS 文件存储系统中，每当上传一个新文件，系统会将单个文件拆分成若干个 256KB 的 block，每个 block 会有一个专属的 CID 进行标识，这个后面会详细讲；然后计算每一个 block 的 Hash 值，并存储再一个数组中，最后对这个数组求 Hash 得到文件的最终 Hash 值；接着将文件的 Hash 和所有的 blocks Hash 的数组组成成一个对象，也就形成了一种索引结构；最后把文件 block 和这个索引结构全部上传到 IPFS 节点，同步到 IPFS 网络。&lt;/p>
&lt;p>文件上传时有两个值得注意的情况：1.文件特别小，如果文件小于 1KB 的话就不浪费一个 block 了，会直接和 Hash 一起上传到 IPFS。2.文件特别大，比如之前上传了一个 1G 的视频，之后又加了几 KB 的字幕文件，这种情况下未变化的 1G 部分是不会重新分配新的空间的，而只会为追加的字母文件部分分配新的 block，再重新上传 Hash。&lt;/p>
&lt;p>因此，很好理解的是，即使是不同文件的相同部分也只会存储一份，很多文件的索引会指向同一个 block，所形成的结构就是 MerkleDAG 数据结构。&lt;/p>
&lt;p>值得注意的是，当节点执行 add 操作时，会保留到本地 blockstore 中，但不会立刻主动上传到 IPFS 网络中，也就是说，与其连接的节点并不会存储这个文件，除非有某个节点请求过该 block 数据！因此，它并不是一个自动备份数据的分布式数据库。IPFS 这种设计是出于网络带宽、可靠性等方面的考虑。&lt;/p>
&lt;p>还有一个细节就是，当节点在执行&lt;code>add&lt;/code>命令时，还会广播自己的块信息，并维护一个所有发给这个节点的 block 请求列表，一旦 add 命令添加到数据满足这个列表，就会主动向对应的节点发送数据并且更新列表。&lt;/p>
&lt;h3 id="ipfs-get-命令">IPFS get 命令&lt;/h3>
&lt;blockquote>
&lt;p>那文件上传后，要怎么查找访问呢？&lt;/p>
&lt;/blockquote>
&lt;p>这就关系到上文所提到的 IPFS 索引结构是&lt;code>DHT&lt;/code>（分布式哈希表），通过对&lt;code>DHT&lt;/code>进行访问可以很快访问得到数据。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ipfs_dht.png" alt="ipfs_dht">&lt;/p>
&lt;blockquote>
&lt;p>那如果想要查找一个本地没有的数据呢？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ipfs_get.gif" alt="ipfs_get">&lt;/p>
&lt;p>在 IPFS 系统中，所有和当前节点连接的节点会构成一个 swarm 网络，当节点发送一个文件请求(即&lt;code>get&lt;/code>)时，首先会在本地的 blockstore 里查找请求的数据，如果没找到的话，就会向 swarm 网络发出一个请求，通过网络中的&lt;code>DHT Routing&lt;/code>找到拥有该数据的节点。&lt;/p>
&lt;blockquote>
&lt;p>怎么知道网络中哪个（哪些）节点拥有这个请求文件呢？&lt;/p>
&lt;/blockquote>
&lt;p>如上文&lt;code>add&lt;/code>命令所讲的那样，当一个节点加入到 IPFS 网络中后，会告诉其它节点自己存储了什么内容（通过广播&lt;code>DHT&lt;/code>），这样每当有用户希望检索的内容正好在这个节点上时，其它节点就会告诉用户要从这个节点索取他想要的内容。&lt;/p>
&lt;p>一旦找到拥有这个数据的节点，就会把请求数据反馈回来，这样本地节点会把收到的 block 数据缓存一份到本地的 blockstore 中，这样整个网络中相当于多了一份原数据的拷贝，更多节点请求数据的话，查找就变得更容易，因此数据的不可丢失性也是基于这个原理，只要有一个节点保存着这个数据，就可以被全网获取。&lt;/p>
&lt;blockquote>
&lt;p>在项目中，上传的文件可以通过&lt;code>ipfs.io&lt;/code>网关直接获取到文件，类似于&lt;code>https://ipfs.io/ipfs/Qm.....&lt;/code>这样的网站地址，这个是什么原理呢？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ipfs_io_get.gif" alt="ipfs_io_get">&lt;/p>
&lt;p>&lt;code>ipfs.io&lt;/code>网关实际上就是一个 IPFS 节点，当我们打开上述这个网络链接的时候，实际上就是向这个节点发送了一次请求，因此&lt;code>ipfs.io&lt;/code>网关会帮我们去向拥有这个数据的节点请求这个 block（如果这个文件是自己刚在本地节点通过&lt;code>add&lt;/code>命令添加的话就会通过这种方式被上传到 IPFS 网络上），在&lt;code>swarm&lt;/code>网络中通过&lt;code>DHT Routing&lt;/code>获取到数据后，网关会自己先缓存一份，然后将数据通过 HTTP 协议发给我们，因此，就可以在浏览器直接看到这个文件啦！&lt;/p>
&lt;p>而任何其他机器通过浏览器访问这个链接时，因为&lt;code>ipfs.io&lt;/code>网关已经缓存了这个文件，再次请求的时候，就不需要向原节点来请求数据了，可以直接从缓存中返回数据给浏览器。&lt;/p>
&lt;h3 id="内容标识符-cidcontent-id">内容标识符 CID(Content-ID)&lt;/h3>
&lt;p>现在考虑另一个问题，我们常见的图像为&lt;code>.jpg&lt;/code>、&lt;code>.png&lt;/code>，而常见的视频则是&lt;code>.mp4&lt;/code>一样，可以直接从后缀名判断文件类型。通过 IPFS 上传的文件也可以是多种类型，也包含了很多信息，怎么进行分辨呢？&lt;/p>
&lt;p>IPFS 早期主要使用&lt;code>base58btc&lt;/code>对&lt;code>multihash&lt;/code>进行编码，但是在开发 IPLD（主要用来定义数据，给数据建模）的过程中会遇到很多与格式相关的问题，因此使用了一种叫&lt;code>CID&lt;/code>的文件寻址格式来对不同格式的数据进行管理，官方的定义为：&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>CID&lt;/code>是一种自描述式的内容寻址的识别符，必须使用加密散列函数来得到内容的地址&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，&lt;code>CID&lt;/code>通过一些机制来对文件所包含的内容进行自描述，包含了版本信息、格式等。&lt;/p>
&lt;h4 id="cid-结构">CID 结构&lt;/h4>
&lt;p>目前&lt;code>CID&lt;/code>有&lt;code>v0&lt;/code>和&lt;code>v1&lt;/code>两种版本，&lt;code>v1&lt;/code>版本的&lt;code>CID&lt;/code>由&lt;code>V1Builder&lt;/code>生成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&amp;lt;cidv1&amp;gt; ::&lt;span class="o">=&lt;/span> &amp;lt;mb&amp;gt;&amp;lt;version&amp;gt;&amp;lt;mcp&amp;gt;&amp;lt;mh&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># or, expanded:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;cidv1&amp;gt; ::&lt;span class="o">=&lt;/span> &amp;lt;multibase-prefix&amp;gt;&amp;lt;cid-version&amp;gt;&amp;lt;multicodec-packed-content-type&amp;gt;&amp;lt;multihash-content-address&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上面列举的代码所示，采用的机制叫&lt;code>multipleformats&lt;/code>，主要包括：&lt;code>multibase-prefix&lt;/code>表示&lt;code>CID&lt;/code>编码成字符串，&lt;code>cid-version&lt;/code>表示版本变量，&lt;code>multicodec-packed-content-type&lt;/code>表示内容的类型和格式（类似于后缀，但是作为标识符的一部分，支持的格式有限，且用户是不能随意修改的），&lt;code>multihash-content-address&lt;/code>表示哈希值（让&lt;code>CID&lt;/code>可以使用不同的 Hash 函数）。&lt;/p>
&lt;p>目前&lt;code>CID&lt;/code>支持的&lt;code>multicodec-packed&lt;/code>编码有原生的&lt;code>protobuf&lt;/code>格式、&lt;code>IPLD CBOR&lt;/code>格式、&lt;code>git&lt;/code>、比特币和以太坊对象等格式，也在逐步开发支持更多格式。&lt;/p>
&lt;p>&lt;code>CID&lt;/code>代码详解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Cid&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">str&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">V0Builder&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">V1Builder&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Codec&lt;/span> &lt;span class="kt">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">MhType&lt;/span> &lt;span class="kt">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">MhLength&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="c1">// Default: -1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Codec&lt;/code>表示内容的编码类型，如&lt;code>DagProtobuf&lt;/code>, &lt;code>DagCBOR&lt;/code>等，&lt;code>MhType&lt;/code>表示哈希算法，如&lt;code>SHA2_256&lt;/code>, &lt;code>SHA2_512&lt;/code>, &lt;code>SHA3_256&lt;/code>, &lt;code>SHA3_512&lt;/code>等，而&lt;code>MhLength&lt;/code>则表示生成哈希的长度。&lt;/p>
&lt;p>而&lt;code>v0&lt;/code>版本的&lt;code>CID&lt;/code>由&lt;code>V0Builder&lt;/code>生成，以&lt;code>Qm&lt;/code>字符串开头，向后兼容，&lt;code>multibase&lt;/code>一直为&lt;code>base58btc&lt;/code>，&lt;code>multicodec&lt;/code>一直为&lt;code>protobuf-mdag&lt;/code>，&lt;code>cid-version&lt;/code>一直为&lt;code>cidv0&lt;/code>，&lt;code>multihash&lt;/code>表示为&lt;code>cidv0 ::= &amp;lt;multihash-content-address&amp;gt;&lt;/code>。&lt;/p>
&lt;h4 id="设计理念">设计理念&lt;/h4>
&lt;p>通过&lt;code>CID&lt;/code>这种二进制的特性，大大提高了对于文件 Hash 的压缩效率，因此可以直接作为 URL 的一部分进行访问；通过&lt;code>multibase&lt;/code>的编码形式（如&lt;code>base58btc&lt;/code>）缩短了&lt;code>CID&lt;/code>的长度，这样更容易传输；可以表示任意格式、任何哈希函数的结果，十分灵活；可以通过结构中&lt;code>cid-version&lt;/code>参数进行编码版本的升级；不受限于历史内容。&lt;/p>
&lt;h3 id="ipns">IPNS&lt;/h3>
&lt;p>如上文所述，IPFS 中文件内容的改变会造成其哈希值的变化，在实际应用中，如果通过 IPFS 托管网站等需要版本更新迭代的应用，每一次都通过更新后的 Hash 访问很不方便，因此，需要一个映射方案以保证用户体验，这样用户在访问时仅需要访问一个固定地址。&lt;/p>
&lt;p>&lt;code>IPNS(Inter-Planetary Naming System)&lt;/code>就提供了这样的服务，它提供了一个被私钥限定的哈希 ID（通常是 PeerID）来指向具体的 IPFS 文件，文件更新后会自动更新哈希 ID 的指向。&lt;/p>
&lt;p>即使哈希值可以固定不变了，但是依然不便于记忆和输入，因此，有了更进一步的解决方案。&lt;/p>
&lt;p>IPNS 同样兼容 DNS，可以使用&lt;code>DNS TXT&lt;/code>记录域名对应的 IPNS 哈希 ID，就可以域名来替换 IPNS 哈希 ID 来进行访问，从而实现更容易读写和记忆。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对 IPFS 分布式存储原理的梳理，它的组件、存储流程细节、GC 机制、数据交换模块 Bitswap、网络以及实际应用场景都有很多值得深入挖掘的部分。&lt;/p>
&lt;blockquote>
&lt;p>推荐阅读：趣链科技 QTech 平台《&lt;a href="https://tech.hyperchain.cn/tag/ipfs/">IPFS 系列文章&lt;/a>》&lt;/p>
&lt;/blockquote>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://ipfs.io">IPFS 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tech.hyperchain.cn/ipfs/">原来 IPFS 是这样存储文件的&lt;/a>，&lt;em>QTech，趣链科技&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/developer/news/277198">IPFS 到底怎么工作的？&lt;/a>，&lt;em>知辉&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://learnblockchain.cn/2018/12/12/what-is-ipfs">站在 Web3.0 理解 IPFS 是什么&lt;/a>，&lt;em>Tiny 熊，登链社区&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@kidinamoto/ipfs-cid-%E7%A0%94%E7%A9%B6-717c4ceb14a0">IPFS CID 研究&lt;/a>，&lt;em>Sophie Huang&lt;/em>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Hyperledger Fabric 网络与安全体系浅析</title><link>https://jpg6.com/en/2021/03/23/blockchain_hyperledger_fabric_network/</link><pubDate>Tue, 23 Mar 2021 12:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/03/23/blockchain_hyperledger_fabric_network/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>上一篇文章《&lt;a href="https://www.pseudoyu.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/">Hyperledger Fabric 架构详解&lt;/a>》对&lt;code>Fabric&lt;/code>的架构和工作原理进行了详细的解读与分析，那作为一个企业级的区块链系统，它是如何根据复杂的业务需求搭建网络，在运行过程中存在哪些安全问题，以及&lt;code>Fabric&lt;/code>是如何从机制上进行预防的呢？&lt;/p>
&lt;p>本文将通过实例阐释一个简化版的企业&lt;code>Fabric&lt;/code>网络是如何构建的，并对其网络与安全体系进行分析，如有错漏，欢迎交流指正。&lt;/p>
&lt;h2 id="hyperledger-fabric-网络">Hyperledger Fabric 网络&lt;/h2>
&lt;h3 id="hyperledger-fabric-应用场景实例">Hyperledger Fabric 应用场景实例&lt;/h3>
&lt;h4 id="业务角色">业务角色&lt;/h4>
&lt;p>假设有一个采用&lt;code>Fabric&lt;/code>系统的应用场景里。&lt;/p>
&lt;p>有 4 个组织&lt;code>R1&lt;/code>, &lt;code>R2&lt;/code>, &lt;code>R3&lt;/code>和&lt;code>R4&lt;/code>，&lt;code>R4&lt;/code>是网络启动者，&lt;code>R1&lt;/code>和&lt;code>R4&lt;/code>共同担任网络管理员角色。&lt;/p>
&lt;p>系统设置了 2 个通道，分别为&lt;code>C1&lt;/code>和&lt;code>C2&lt;/code>。&lt;code>R1&lt;/code>和&lt;code>R2&lt;/code>使用&lt;code>C1&lt;/code>通道，&lt;code>R2&lt;/code>和&lt;code>R3&lt;/code>使用&lt;code>C2&lt;/code>通道。&lt;/p>
&lt;p>应用&lt;code>A1&lt;/code>属于组织&lt;code>R1&lt;/code>，于&lt;code>C1&lt;/code>通道运行；应用&lt;code>A2&lt;/code>属于组织&lt;code>R2&lt;/code>，同时于&lt;code>C1&lt;/code>通道和&lt;code>C2&lt;/code>通道运行；应用&lt;code>A3&lt;/code>属于组织&lt;code>R3&lt;/code>，于&lt;code>C2&lt;/code>通道运行。&lt;/p>
&lt;p>&lt;code>P1&lt;/code>、&lt;code>P2&lt;/code>和&lt;code>P3&lt;/code>分别是组织&lt;code>R1&lt;/code>、&lt;code>R2&lt;/code>和&lt;code>R3&lt;/code>的节点。&lt;/p>
&lt;p>排序节点由&lt;code>O4&lt;/code>提供，属于组织&lt;code>R4&lt;/code>.&lt;/p>
&lt;h4 id="搭建过程">搭建过程&lt;/h4>
&lt;p>与真正的商业应用场景相比，角色和商业和逻辑都很简化，但很适合用来理解不同节点和角色之间的功能和交互。接下来，我将一步一步说明网络的搭建过程。&lt;/p>
&lt;blockquote>
&lt;p>创建网络并添加网络管理员&lt;/p>
&lt;/blockquote>
&lt;p>每一个组织需要通过&lt;code>MSP&lt;/code>中的 CA 机构颁发的证书才能加入网络，因此，每个节点都需要有相应的 CA。&lt;/p>
&lt;p>&lt;code>R4&lt;/code>作为网络启动者，需要先配置网络并设立&lt;code>O4&lt;/code>排序节点！网络创建后，添加&lt;code>R1&lt;/code>作为网络管理员，因此，&lt;code>R1&lt;/code>和&lt;code>R4&lt;/code>可以对网络进行配置（&lt;code>NC4&lt;/code>）。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabric_network_example_1.png" alt="fabric_network_example_1">&lt;/p>
&lt;blockquote>
&lt;p>定义联盟并创建通道&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>R1&lt;/code>和&lt;code>R2&lt;/code>将通过&lt;code>C1&lt;/code>进行业务交互，因此需要在网络中定义联盟，因为现在&lt;code>R1&lt;/code>和&lt;code>R4&lt;/code>都可以对网络进行配置，因此都可以定义联盟。&lt;/p>
&lt;p>接着为这个联盟创建通道&lt;code>C1&lt;/code>（连接至排序服务&lt;code>O4&lt;/code>）。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabric_network_example_2.png" alt="fabric_network_example_2">&lt;/p>
&lt;blockquote>
&lt;p>加入节点、部署智能合约与应用&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>P1&lt;/code>节点加入已经建立的通道&lt;code>C1&lt;/code>，维护着一个账本&lt;code>L1&lt;/code>。&lt;/p>
&lt;p>这时候就可以在节点上安装和实例化智能合约了。&lt;code>Fabric&lt;/code>的智能合约是链码，把链码存储在节点的文件系统上称为安装智能合约，安装后还需要在特定的通道上启动和实例化链码，至此，应用可以发送交易 proposal 至背书节点了（需要遵守链码设置的背书策略）。&lt;/p>
&lt;p>如下图所示，&lt;code>P1&lt;/code>节点安装链码&lt;code>S5&lt;/code>并在通道&lt;code>C1&lt;/code>实例化后，就可以响应来自应用&lt;code>A1&lt;/code>的链码调用了;&lt;code>P2&lt;/code>节点安装链码&lt;code>S5&lt;/code>并在通道&lt;code>C1&lt;/code>实例化后，就可以响应来自应用&lt;code>A2&lt;/code>的链码调用了。&lt;/p>
&lt;p>通道中的每一个节点都是提交节点，可以接收新区块（来自排序节点）进行验证，并提交至账本；而部署了链码的一些节点则可以成为背书节点。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabric_network_example_4.png" alt="fabric_network_example_4">&lt;/p>
&lt;blockquote>
&lt;p>定义新联盟、创建新通道&lt;/p>
&lt;/blockquote>
&lt;p>在网络中定义新联盟并加入&lt;code>C2&lt;/code>通道。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabric_network_example_5.png" alt="fabric_network_example_5">&lt;/p>
&lt;blockquote>
&lt;p>加入新节点并部署智能合约与应用&lt;/p>
&lt;/blockquote>
&lt;p>值得注意的是，有些节点会同时加入多个通道，在不同的业务中扮演不同的角色，其他流程同上。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabric_network_example_6.png" alt="fabric_network_example_6">&lt;/p>
&lt;blockquote>
&lt;p>网络搭建完成&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_network_example.png" alt="hyperledger_fabric_network_example">&lt;/p>
&lt;p>&lt;code>Fabric&lt;/code>采用权限管理、通道等机制，并通过对不同节点功能分工，提升了系统的运行效率，并保障了复杂业务场景中的安全和隐私；强大的链码和可自定义的背书策略等也保障了系统的拓展性，可以处理复杂的业务逻辑。&lt;/p>
&lt;h2 id="hyperledger-fabric-安全分析">Hyperledger Fabric 安全分析&lt;/h2>
&lt;h3 id="fabric-安全机制">Fabric 安全机制&lt;/h3>
&lt;p>&lt;code>Fabric&lt;/code>设计了很多机制来保障系统的安全性。&lt;/p>
&lt;h4 id="系统配置与成员管理">系统配置与成员管理&lt;/h4>
&lt;p>区别于比特币、以太坊等公链，加入&lt;code>Fabric&lt;/code>网络需要进行权限验证，&lt;code>Fabric CA&lt;/code>为成员管理使用&lt;code>X.509&lt;/code>证书机制以保障其权限，避免潜在&lt;code>Spoofing&lt;/code>攻击等。&lt;/p>
&lt;p>现有的系统成员需要制定加入新成员的规则，比如进行多数投票等；现有成员也需要决定网络和智能合约的更新和改变，这样能够很大程度上防止恶意节点破坏系统安全性；现有节点不能自行升级权限；除此之外，还需要决定系统的通用数据模型等设置。&lt;/p>
&lt;p>&lt;code>Fabric&lt;/code>的网络传输采用&lt;code>TLSv1.2&lt;/code>，可以保障数据的安全性；且系统中的操作，如发起交易、背书等都会通过数字签名技术来记录，很容易追溯一些恶意操作。但值得注意的是，排序节点可以获取系统中所有节点的交易数据，因此，排序服务节点的设定对于整个系统的安全性尤其重要，它的公正性会很大程度影响整个系统的运作，甚至决定了整个系统是否值得信任，因此，需要根据业务和系统结构慎重选择。&lt;/p>
&lt;p>公链系统中，所有节点都有区块链账本的副本，并且执行智能合约；而在&lt;code>Fabric&lt;/code>系统中，业务相关节点会形成节点组，存储与其交易（业务）相关的账本，而通过链码对账本的更新也会被限制在节点组的范围内，从而保障整个系统的稳定性。&lt;/p>
&lt;p>智能合约的执行称为交易，对于&lt;code>Fabric&lt;/code>系统内的交易，也必须要保持其一致性，往往采用密码学技术来防止交易被篡改，如采用&lt;code>SHA256&lt;/code>、&lt;code>ECDSA&lt;/code>等检测修改；&lt;code>Fabric&lt;/code>采取模块化、可插拔的设计，将交易的执行、验证共识进行分离，因此，可以采取不同的共识机制或规则，不仅能够根据需求选择不同的共识机制，更具拓展性，也能提高系统安全性。&lt;/p>
&lt;p>这些配置和规则共同决定了系统的安全性，需要在业务需求、效率和安全性上作权衡。&lt;/p>
&lt;h4 id="智能合约安全">智能合约安全&lt;/h4>
&lt;p>&lt;code>Fabric&lt;/code>的链码需要安装在节点上并且实例化，安装链码需要有 CA 的验证，因此要注意权限管理；启动后是运行在独立的 Docker 容器中的，更轻量级，但是因为它能够访问&lt;code>Fabric&lt;/code>网络，如果没经过严格的代码审计以及对网络进行隔离，会造成一些恶意后果。&lt;/p>
&lt;p>&lt;code>Fabric&lt;/code>的链码可以用多种通用型的编程语言撰写，例如&lt;code>Go&lt;/code>、&lt;code>Java&lt;/code>等，这让系统有了更强的拓展性，也更容易接入现有系统和工具，但因为其执行结果是不缺性的，编程语言的一些特性（如随机数、系统时间戳、指针等）可能会造成不同背书节点执行结果不同，造成系统不一致性；此外，因为链码可以访问一些外部的 Web 服务、系统命令、文件系统和第三方库等，也会造成一些潜在的风险。因此，用这些通用语言开发的链码需要相对独立且加强代码审计，以避免一些因编程语言带来的安全风险。&lt;/p>
&lt;h4 id="交易隐私">交易隐私&lt;/h4>
&lt;p>&lt;code>Fabric&lt;/code>采用了通道机制来划分整个系统为多个子区块链（账本），只有加入通道的节点才能查看和存储交易信息，但排序节点可以看到。&lt;/p>
&lt;blockquote>
&lt;p>那有什么办法在通道中保障一些私有数据的隐私呢？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Fabric&lt;/code>提供了一种存储私有数据的方式，使通道中的节点可以选择特定的数据分享对象（节点）。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabric_security_private_data.png" alt="fabric_security_private_data">&lt;/p>
&lt;p>在这种机制下，真实的数据会通过&lt;code>gossip&lt;/code>协议发送到指定的节点，数据存放私有数据库中，只有授权节点可以通过链码进行访问，因为这个过程并没有涉及到排序服务，所以排序节点也无法获取。&lt;/p>
&lt;p>而在系统内传播、排序与写入账本的数据是经过哈希加密的版本，因此交易仍然可以被各个节点验证，但因为哈希的特性，可以有效保护原数据不被泄漏。&lt;/p>
&lt;p>但值得注意的是，如果在背书节点模拟交易过程中需要使用到数据，那需要采取额外的机制来保障数据对于背书节点的可读性和对其他节点的不可见性（如非对称加密等）。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对&lt;code>Hyperledger Fabric&lt;/code>网络搭建和安全体系分析了，接下来将会开始学习&lt;code>Go&lt;/code>和链码的开发，通过项目实战来对其进行深入了解学习！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://www.cs.hku.hk/index.php/programmes/course-offered?infile=2019/fite3011.html">FITE3011 Distributed Ledger and Blockchain&lt;/a>, &lt;em>Allen Au，HKU&lt;/em>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>Hyperledger Fabric 系统架构详解</title><link>https://jpg6.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/</link><pubDate>Sat, 20 Mar 2021 12:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/03/20/blockchain_hyperledger_fabric_structure/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>因为毕业 Case Study 的项目主要是基于&lt;code>Ethereum&lt;/code>公链，也没有面向企业的应用场景，所以之前对&lt;code>Hyperledger Fabric&lt;/code>的了解大多只是停留在它的权限管理机制、通道、灵活的智能合约编写等几个特色的概念，对它的架构、各个节点的角色、运行机制等都是一知半解。最近在上 HKU 的&lt;code>&amp;lt;FITE3011 Distributed Ledger and Blockchain&amp;gt;&lt;/code>课程，教授对&lt;code>Hyperledger Fabric&lt;/code>的工作原理、网络搭建及链码相关的知识做了很详细的讲解，受益匪浅，通过本文来梳理一下，如有错漏，欢迎交流指正。&lt;/p>
&lt;h2 id="hyperledger-概述">Hyperledger 概述&lt;/h2>
&lt;p>要学习&lt;code>Hyperledger Fabric&lt;/code>，先来看看它的母项目&lt;code>Hyperledger&lt;/code>是什么。&lt;/p>
&lt;p>企业级应用有较复杂的业务逻辑和参与者角色划分，对于业务执行效率、安全性要求很高，并且针对常见的如支付、数据/信息交易等场景，隐私保护也是重中之重，因此，常见的比特币、以太坊等公链并不符合大部分企业应用需求。但是区块链的分布式、不可篡改的历史账本等特性在溯源、跨境电商等场景中又能够避免因各个国家/地区法律法规、货币等造成的复杂操作流程，大大提高效率。因此，针对企业的联盟链也在不断发展。&lt;/p>
&lt;p>联盟链严格意义上并不是真正的“去中心化”，它通过引入了权限管理机制（结合企业在现实业务中的角色）来弱化对节点作恶的预防机制，从而能提高效率、应对复杂的业务逻辑。&lt;/p>
&lt;p>其中，&lt;code>Hyperledger&lt;/code>是由 Linux 基金会维护的一组专注于跨行业分布式技术的开源项目，旨在创建企业级、开源、分布式的分类框架和代码库来支持业务用例，提供中立、开放和社区驱动的基础设施；建立技术社区并推广，开发区块链和共享账本概念验证、使用案例、试验和部署；建立行业标准，鼓励更多企业参与到分布式账本技术的建设和应用中来，形成一个开放的生态体系；教育公众关于区块链科技的市场机会。&lt;/p>
&lt;h3 id="设计理念">设计理念&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_design_philosophy.png" alt="hyperledger_design_philosophy">&lt;/p>
&lt;p>&lt;code>Hyperledger&lt;/code>有如下几个核心设计理念：&lt;/p>
&lt;ol>
&lt;li>它针对企业具体的业务场景提升效率，并且对溯源等场景有着独特优势，每个企业都可以针对自己的场景维护独立的&lt;code>Hyperledger&lt;/code>项目，因此，它不需要像公链一样通过数字货币来激励用户参与区块链系统。&lt;/li>
&lt;li>企业的应用场景较为复杂，往往 Hyperledger 只是在其中参与了某个或某些环节，因此与其他现有系统的交互必不可少，因此 Hyperledger 在设计上注重配备完整的 API 以供其他系统调用与交互。&lt;/li>
&lt;li>&lt;code>Hyperledger&lt;/code>的框架结构是模块化、可拓展，企业可以根据具体的业务需求选择不同的模块，避免复杂的业务逻辑和臃肿的系统。&lt;/li>
&lt;li>企业应用的安全性是重中之重，尤其是许多应用场景牵扯到高价值交易或敏感数据，因此提供了很多机制来保障安全性（如&lt;code>Fabric&lt;/code>的通道机制等）&lt;/li>
&lt;li>除了与现有的系统交互外，企业未来的区块链应用中还可能会和很多不同的区块链网络进行交互，因此大部分智能合约/应用应该具备跨区块链网络的可移植性，以形成更复杂和强大的网络。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_family.png" alt="hyperledger_family">&lt;/p>
&lt;h4 id="框架">框架&lt;/h4>
&lt;p>&lt;code>Hyperledger&lt;/code>下有如下几个项目，其中&lt;code>Fabric&lt;/code>目前应用最为广泛，本文也将主要介绍&lt;code>Fabric&lt;/code>区块链网络&lt;/p>
&lt;ul>
&lt;li>Burrow&lt;/li>
&lt;li>Fabric&lt;/li>
&lt;li>Grid&lt;/li>
&lt;li>Indy&lt;/li>
&lt;li>Iroha&lt;/li>
&lt;li>Sawtooth&lt;/li>
&lt;/ul>
&lt;h4 id="工具">工具&lt;/h4>
&lt;ol>
&lt;li>&lt;code>Hyperledger Cello&lt;/code>。主要用于更方便地搭建和管理区块链服务，降低项目框架部署、维护的复杂度；可以用来搭建区块链 BaaS 平台；可以通过 Dashboard 来创建和管理区块链，技术人员可以更方便地进行开发和部署；可以将 SaaS 部署模型引入区块链系统，帮助企业进一步开发框架。&lt;/li>
&lt;li>&lt;code>Hyperledger Explorer&lt;/code>。是一个可视化区块链的操作工具，可以用于创建对用户友好的 Web 应用程序；是首个&lt;code>Hyperledger&lt;/code>的区块链浏览器，用户可以查看/调用/部署/查询交易、网络、智能合约、存储等信息。&lt;/li>
&lt;/ol>
&lt;h2 id="hyperledger-fabric">Hyperledger Fabric&lt;/h2>
&lt;p>我们着重来讲讲其中应用最广泛的&lt;code>Fabric&lt;/code>项目，它是由 Linux 基金会维护的一个模块化、可拓展的区块链联盟链项目，不依赖任何加密货币，它对有着共同目标（业务需求）但彼此不完全信息的实体之间的业务提供了保护，例如跨境电商、资金交易、溯源等。&lt;/p>
&lt;h3 id="架构">架构&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ethereum_architecture_simple.png" alt="ethereum_architecture_simple">&lt;/p>
&lt;p>在大部分公链中，架构为&lt;code>Order - Execute - Validate - Update State&lt;/code>。如比特币区块链中，如果有一个新交易，会先采用 PoW 机制对 Block 进行排序，然后比特币网络中的每个节点逐个进行验证，最后更新状态。因为需要依序进行验证，这种方式决定了其执行效率相对较低。&lt;/p>
&lt;p>而&lt;code>Fabric&lt;/code>采用了&lt;code>Execute - Order - Validate - Update State&lt;/code>架构。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_architecture.png" alt="hyperledger_fabric_architecture">&lt;/p>
&lt;p>收到一笔新的交易后，首先提交至背书节点本地模拟交易执行（并背书），再将已背书交易排序并广播，各个节点对交易进行验证后更新状态。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_architecture_complete.png" alt="hyperledger_fabric_architecture_complete">&lt;/p>
&lt;p>正如上述联盟链特性中所述，&lt;code>Fabric&lt;/code>网络的加入需要得到许可（身份验证），&lt;code>Fabric&lt;/code>网路中的每个节点都有自己的身份。&lt;/p>
&lt;p>总的来说，&lt;code>Fabric&lt;/code>通过模块化、可插拔的架构来支持企业的复杂业务场景，通过身份验证（绑定现实身份）来弱化节点作恶，使用通道机制大大提升了系统的安全性和隐私保护。&lt;/p>
&lt;h4 id="msp-成员服务提供商">MSP 成员服务提供商&lt;/h4>
&lt;p>那么，参与&lt;code>Fabric&lt;/code>网络的身份是怎样管理的呢？&lt;/p>
&lt;p>&lt;code>Fabric&lt;/code>有一个 MSP(Membership Service Provider)成员管理提供商，它主要用来管理 CA 证书来验证哪些成员是可信任的。&lt;code>Fabric CA&lt;/code>模块是独立的，可以管理证书服务，也可以允许第三方 CA 的接入，大大拓展的系统的应用范围。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_ca_structure.png" alt="hyperledger_fabric_ca_structure">&lt;/p>
&lt;p>如上图所示，&lt;code>Fabric CA&lt;/code>提供了客户端和 SDK 两种方式来和 CA 进行交互，每个&lt;code>Fabric CA&lt;/code>都有一个根 CA 或中间 CA，为了进一步提高 CA 的安全性，可以采用集群来搭建中间 CA。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_ca_hierarchy.png" alt="hyperledger_fabric_ca_hierarchy">&lt;/p>
&lt;p>更具体一点看 CA 的层级体系，一般是采用根 CA、业务 CA 和用户 CA 三层树结构，所有的下层 CA 会继承上层 CA 的信任体系。根 CA 用来签发业务 CA，业务 CA 用来签发具体的用户 CA（身份认证 CA、交易签名、安全通讯 CA 等）&lt;/p>
&lt;h4 id="通道">通道&lt;/h4>
&lt;p>上文提到&lt;code>Fabric&lt;/code>用 Channel 通道机制来保障交易的安全和隐私性，本质上每一个通道就是一个独立的账本，也是一个独立的区块链，有着不同的世界状态，网络中的一个节点可以同时加入多个通道。这种机制可以很好地划分不同的业务场景，也不用担心交易信息泄漏问题。&lt;/p>
&lt;h4 id="链码">链码&lt;/h4>
&lt;p>&lt;code>Fabric&lt;/code>也有类似以太坊的智能合约，称为 Chaincode 链码，智能合约使外部的应用程序可以和&lt;code>Fabric&lt;/code>网络中的账本进行交互。不同于&lt;code>Ethereum&lt;/code>，&lt;code>Fabric&lt;/code>使用 Docker 而不是特定的虚拟机来存放链码，提供了一个安全、轻便的语言执行环境。&lt;/p>
&lt;p>链码主要分成系统链码和用户链码两种，系统链码嵌入在系统内，提供对系统进行配置、管理的支持；而用户链码则是运行在单独的 Docker 容器中，提供对上层应用的支持，用户通过链码相关的 API 编写用户链码，即可对账本中状态进行更新操作。&lt;/p>
&lt;p>链码经过安装和实例化操作后即可被调用，在安装的时候需要指定具体安装到哪个 Peer 节点（有的节点可以没有链码），实例化时还需要指定通道及背书策略。&lt;/p>
&lt;p>链码之间也可以相互调用，从而创建更灵活的应用逻辑。&lt;/p>
&lt;h4 id="共识机制">共识机制&lt;/h4>
&lt;p>&lt;code>Fabric&lt;/code>中广义的共识机制包括背书、排序和验证三个环节，狭义的共识是指排序，&lt;/p>
&lt;p>&lt;code>Fabric&lt;/code>区块链网络中，不同参与者之间交易必须按照发生的顺序写到分布式账本中，依赖共识机制，主要有三种：&lt;/p>
&lt;ul>
&lt;li>SOLO（只限于开发）&lt;/li>
&lt;li>Kafka（一种消息平台）&lt;/li>
&lt;li>Raft（相比 Kafka 更中心化）&lt;/li>
&lt;/ul>
&lt;h4 id="网络协议">网络协议&lt;/h4>
&lt;p>那&lt;code>Fabric&lt;/code>网络中各个节点的状态分发又是怎么进行的呢？&lt;/p>
&lt;p>外界的客户端是通过&lt;code>gRPC&lt;/code>来对&lt;code>Fabric&lt;/code>网络中的各个节点进行远程调用，而&lt;code>P2P&lt;/code>网络中各个节点之间的同步是通过&lt;code>Gossip&lt;/code>协议来进行的。&lt;/p>
&lt;p>&lt;code>Gossip&lt;/code>协议主要是用于网络中多个节点之间的数据交换，比较容易实现且容错率很高，原理就是数据发送一方从网络中随机选取若干个节点发送过去，等几个节点接收到这些数据后再随机发送给除了发送方外的若干节点，不断重复，最终所有节点达成一致（复杂度为 LogN）。&lt;/p>
&lt;h4 id="分布式账本">分布式账本&lt;/h4>
&lt;p>最终所有的交易都会记录到分布式账本中，这也是区块链诸多特性的核心。&lt;code>Fabric&lt;/code>中交易可以存储相关业务信息，区块是一组排列后的交易集合，将区块通过密码算法链接起来就是区块链。分布式账本主要记录世界状态（最新的分布式账本状态，一般使用&lt;code>CouchDB&lt;/code>以方便查询）和事务日志（世界状态的更新历史，记录区块链结构，使用&lt;code>LevelDB&lt;/code>），对账本的每个操作都会记录在日志中，不可篡改。&lt;/p>
&lt;h4 id="应用编程接口">应用编程接口&lt;/h4>
&lt;p>对于基于&lt;code>Fabric&lt;/code>的应用，则主要提供了 SDK 开发工具包和 CLI 命令行两种方式进行交互。&lt;/p>
&lt;h3 id="fabric-区块链核心角色">Fabric 区块链核心角色&lt;/h3>
&lt;p>首先要提的是&lt;code>Fabric&lt;/code>网络中的角色都是逻辑角色，比如 Peer 节点 A 可能既是排序节点，也可能在某些业务中是背书节点，而一个角色也不仅仅由单一节点担任。&lt;/p>
&lt;p>接下来介绍一下各个角色的作用和职能。&lt;/p>
&lt;p>Clients 客户端主要给交易签名，提交交易 Proposal 给背书节点，接收已经背书后的交易广播给排序节点；背书节点则是本地模拟执行交易 Proposal 验证交易（策略由 Chaincode 制定），签名并返回已背书交易；排序节点则将交易打包为 block 然后广播至各个节点，不参与交易的执行和验证，多个排序节点可以组成 OSN；所有的节点都维护区块链账本。&lt;/p>
&lt;h3 id="优势总结">优势总结&lt;/h3>
&lt;p>&lt;code>Fabric&lt;/code>通过将企业应用的各个复杂环节分配到各个逻辑角色节点（背书、排序等），不需要所有节点都承担如排序这样资源消耗较大的操作，消除了网络瓶颈；分配了角色后某些交易只在特定的节点部署和执行，且可以并发执行，大大提升效率和安全性，也隐藏了一些商业逻辑；因此，可以根据不同的业务需要来形成多种灵活的分配方案，极大增强了系统的拓展性。&lt;/p>
&lt;p>将共识机制、权限管理、加密机制、账本等模块都设置为可插拔，且不同的链码可以设置不同的背书策略，信任机制更加灵活，这样可以根据业务需要设置自己的高效系统。&lt;/p>
&lt;p>成员身份管理的&lt;code>Fabric CA&lt;/code>作为单独的项目，能够提供更多功能，也能够与很多第三方 CA 直接进行接入和交互，功能更强大，适合企业复杂的场景。&lt;/p>
&lt;p>多通道的特性是不同通道之间的数据彼此隔离，提高了安全性和隐私保护。&lt;/p>
&lt;p>链码支持如&lt;code>Java&lt;/code>、&lt;code>Go&lt;/code>、&lt;code>Node&lt;/code>等不同的编程语言，更加灵活，也支持更多第三方拓展应用，降低了业务迁移和维护成本。&lt;/p>
&lt;h3 id="fabric-应用开发及交互">Fabric 应用开发及交互&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_application_interact.png" alt="hyperledger_fabric_application_interact">&lt;/p>
&lt;p>上图就是作为一个区块链开发者在应用&lt;code>Fabric&lt;/code>区块链中的开发和交互流程。&lt;/p>
&lt;p>开发者主要负责开发应用和智能合约（链码），应用通过 SDK 与智能合约进行交互，而智能合约的逻辑可以对账本进行&lt;code>get&lt;/code>、&lt;code>put&lt;/code>、&lt;code>delete&lt;/code>等操作。&lt;/p>
&lt;h3 id="fabric-工作流程">Fabric 工作流程&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_transaction_flow.png" alt="hyperledger_fabric_transaction_flow">&lt;/p>
&lt;p>接下来通过一个完整的交易流来梳理一下&lt;code>Fabric&lt;/code>网络的工作原理&lt;/p>
&lt;ol start="0">
&lt;li>在所有操作之前，需要向 CA 获取合法身份并且指定通道&lt;/li>
&lt;li>首先，Client 提交交易 Proposal（含自己的签名）至背书节点&lt;/li>
&lt;li>背书节点接收到交易 Proposal 后用本地状态模拟执行，对交易进行背书、签名并返回（其中包含 Read-Write Set、签名等）&lt;/li>
&lt;li>Client 收集到足够的背书后（策略由 Chaincode 制定，如图中示例为得到 2 个背书）提交已背书交易至排序节点（OSN）&lt;/li>
&lt;li>排序节点将交易打包成 blocks，排序（不执行或验证交易正确性）并广播至所有节点&lt;/li>
&lt;li>所有节点对新 blocks 进行验证并提交至账本&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hyperledger_fabric_processes.png" alt="hyperledger_fabric_processes">&lt;/p>
&lt;p>接下来对每个环节进行一些详细的拆解&lt;/p>
&lt;h4 id="执行背书环节">执行/背书环节&lt;/h4>
&lt;p>Client 提交交易 proposal 后，背书节点会首先核对 Client 的签名，用本地状态模拟执行，对交易进行签名和 Read-Write Set 回 Clients，R-W Sets 主要包含&lt;code>key&lt;/code>, &lt;code>version&lt;/code>, &lt;code>value&lt;/code>三个属性，Read-Set 包含交易执行中读取的所有变量和其&lt;code>version&lt;/code>，对账本进行 write 操作的话&lt;code>version&lt;/code>会产生变化，Write-Set 包含所有被编辑的变量及其新值。&lt;/p>
&lt;p>背书节点在执行交易时值根据本地区块链的状态检查链码是否正确，执行并返回。&lt;/p>
&lt;p>Fabric 支持多种背书策略，Client 在提交至排序节点前会验证是否满足背书要求，值得注意的是如果只做了查询账本操作，Client 不会提交至 OSN。&lt;/p>
&lt;p>上文所提到的交易 proposal 主要包括链码、链码的输入值、Client 的签名，而背书节点返回至 Client 的信息则包括返回值、模拟执行结果的 R-W Set 以及背书节点的签名，组合起来则是已背书节点。&lt;/p>
&lt;p>背书是相关组织对交易的认可，即相关节点对交易进行签名。对于一个链码交易来说，背书策略是在链码实例化的时候指定的，一笔有效交易必须是背书策略相关组织签名才能生效，本质上&lt;code>Fabric&lt;/code>区块链中的交易验证是基于对背书节点的信任，这也是称&lt;code>Fabric&lt;/code>并不是严格意义上的去中心化的原因之一。&lt;/p>
&lt;p>以下是一个简单的链码执行示例&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">SimpleChaincode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">InitLedger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">contractapi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">TransactionContextInterface&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">product&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">Product&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Test Product&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Description&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Just a test product to make sure chaincode is running&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">CreatedBy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;admin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ProductId&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">productAsBytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Marshal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">product&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GetStub&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">PutState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">productAsBytes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个简单示例中，链码的主要操作就是更新了&lt;code>key-value&lt;/code>值，经过了这个操作后，&lt;code>version&lt;/code>会变化。&lt;/p>
&lt;p>执行后返回的 R-W Set 为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">key&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">Product&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Test Product&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Description&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Just a test product to make sure chaincode is running&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">CreatedBy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;admin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ProductId&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;1&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">的Json形式&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="排序环节">排序环节&lt;/h4>
&lt;p>Client 提交已背书交易至排序节点（排序节点可通过一些共识策略组成 OSN），排序节点接收到交易后，会打包成 blocks 并按照配置中的规则进行排序，在此过程中，只执行排序操作，而不进行任何执行或验证，排序完成后发送至所有节点。&lt;/p>
&lt;p>排序服务用来对全网交易达成一致，只负责对交易顺序达成一致，避免了整个网络瓶颈，更容易横向拓展以提升网络效率，目前支持&lt;code>Kafka&lt;/code>和&lt;code>Raft&lt;/code>两种，&lt;code>Fabric&lt;/code>区块链网络的统一/完整性依赖于排序节点的一致性。&lt;/p>
&lt;p>Raft 共识机制属于非拜占庭共识机制，使用了领导者和跟随者（Leader 和 Follower）模型，当一个 Leader 被选出，日志信息会从 Leader 向 Follower 单向复制，更容易管理，在设计上允许所有节点都可以称为 Orderer 节点，相比 Kafka 更中心化，其实也允许采用 PBFT 共识机制，但是性能往往很差。&lt;/p>
&lt;h4 id="验证环节">验证环节&lt;/h4>
&lt;p>当节点接收到由排序节点发送来的区块时，会对区块中的所有交易进行验证并标记是否可信，主要验证两个方面：1.是否满足背书策略。2.交易结构的合法性，是否有状态冲突，如 Read-Set 中的&lt;code>version&lt;/code>是否一致等。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对&lt;code>Hyperledger Fabric&lt;/code>架构的梳理了，虽然取舍了部分去中心化的理念，但是作为一个面向企业应用的开源联盟链，它鼓励了更多企业参与到分布式账本技术的建设和应用中来，现在国内也有很多联盟链的自研平台，如蚂蚁链、趣链等，相信未来会有更多企业参与到这个开放的生态体系！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://www.cs.hku.hk/index.php/programmes/course-offered?infile=2019/fite3011.html">FITE3011 Distributed Ledger and Blockchain&lt;/a>, &lt;em>Allen Au，HKU&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://github.com/yingpingzhang/enterprise_blockchain_tutorial">企业级区块链实战教程&lt;/a>，&lt;em>张应平&lt;/em>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>COMP7103 Topic 3 Clustering</title><link>https://jpg6.com/en/2021/03/18/comp7103_topic3/</link><pubDate>Thu, 18 Mar 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/03/18/comp7103_topic3/</guid><description>&lt;h1 id="comp7103-data-mining">COMP7103 Data Mining&lt;/h1>
&lt;h2 id="topic-3-clustering">Topic 3 Clustering&lt;/h2>
&lt;h3 id="cluster-analysis">Cluster Analysis&lt;/h3>
&lt;p>Finding groups of objects such that the objects in a group will be similar (or related) to one another and different from (or unrelated to) the objects in other groups&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cluster_analysis.png" alt="cluster_analysis">&lt;/p>
&lt;h4 id="application">Application&lt;/h4>
&lt;ul>
&lt;li>Understanding
&lt;ul>
&lt;li>Group related documents for browsing, group genes and proteins that have similar functionality, or group stocks with similar price fluctuations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Summarization
&lt;ul>
&lt;li>Reduce size of large data sets&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="types-of-clusterings">Types of Clusterings&lt;/h3>
&lt;ul>
&lt;li>Partitional Clustering
&lt;ul>
&lt;li>A division data objects into non-overlapping subsets (clusters) such that each data object is in exactly one subset
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/partitional_clustering.png" alt="partitional_clustering">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hierarchical clustering
&lt;ul>
&lt;li>A set of nested clusters organized as a hierarchical tree
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hierarchical_clustering.png" alt="hierarchical_clustering">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Other Distinctions Between Sets of Clusters
&lt;ul>
&lt;li>Exclusive versus non-exclusive
&lt;ul>
&lt;li>In non-exclusive clusterings, points may belong to multiple clusters&lt;/li>
&lt;li>Can represent multiple classes or &amp;lsquo;border&amp;rsquo; points&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Fuzzy versus non-fuzzy
&lt;ul>
&lt;li>In fuzzy clustering, a point belongs to every cluster with some weight between 0 and 1&lt;/li>
&lt;li>Weights must sum to 1&lt;/li>
&lt;li>Probabilistic clustering has similar characteristics&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Partial versus complete
&lt;ul>
&lt;li>In some cases, we only want to cluster some of the data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Heterogeneous versus homogeneous
&lt;ul>
&lt;li>Cluster of widely different sizes, shapes, and densities&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="well-separated-clusters">Well-separated clusters&lt;/h4>
&lt;p>A cluster is a set of points such that any point in a cluster is closer (or more similar) to every other point in the cluster than to any point not in the cluster&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/wellseparated_clusters.png" alt="wellseparated_clusters">&lt;/p>
&lt;h4 id="center-based-clusters">Center-based clusters&lt;/h4>
&lt;p>A cluster is a set of objects such that an object in a cluster is closer (more similar) to the “center” of a cluster, than to the center of any other cluster&lt;/p>
&lt;p>The center of a cluster is often a centroid, the average of all the points in the cluster, or a medoid, the most “representative” point of a cluster&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/center_based_clusters.png" alt="center_based_clusters">&lt;/p>
&lt;h4 id="contiguity-based-clusters">Contiguity-Based clusters&lt;/h4>
&lt;p>A cluster is a set of points such that a point in a cluster is closer (or more similar) to one or more other points in the cluster than to any point not in the cluster&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/contiguity_based_clusters.png" alt="contiguity_based_clusters">&lt;/p>
&lt;h4 id="density-based-clusters">Density-based clusters&lt;/h4>
&lt;p>A cluster is a dense region of points, which is separated by low-density regions, from other regions of high density&lt;/p>
&lt;p>Used when the clusters are irregular or intertwined, and when noise and outliers are present&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/density_based_clusters.png" alt="density_based_clusters">&lt;/p>
&lt;h4 id="conceptual-clusters">Conceptual Clusters&lt;/h4>
&lt;p>Finds clusters that share some common property or represent a particular concept&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/conceptual_clusters.png" alt="conceptual_clusters">&lt;/p>
&lt;h3 id="k-means">K-means&lt;/h3>
&lt;ul>
&lt;li>Input
&lt;ul>
&lt;li>integer k&amp;gt;0, set S of points in the euclidean space&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Output
&lt;ul>
&lt;li>A (partitional) clustering of S&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Step&lt;/p>
&lt;ol>
&lt;li>Select k points in S as the initial centroids&lt;/li>
&lt;li>Repeat until the centroids do not change
&lt;ul>
&lt;li>Form k clusters by assigning points to the closest centroids&lt;/li>
&lt;li>For each cluster recompute its centroid&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Feature&lt;/p>
&lt;ul>
&lt;li>Initial centroids are often chosen randomly&lt;/li>
&lt;li>Centroids are often the mean of the points in the cluster&lt;/li>
&lt;li>&amp;lsquo;Closeness&amp;rsquo; is measured by Euclidean distance, cosine similarity, correlation, etc.&lt;/li>
&lt;/ul>
&lt;h4 id="importance-of-choosing-initial-centroids">Importance of Choosing Initial Centroids&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/choosing_Initial_centroids.png" alt="choosing_Initial_centroids">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/choosing_Initial_centroids_2.png" alt="choosing_Initial_centroids_2">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/choosing_Initial_centroids_3.png" alt="choosing_Initial_centroids_3">&lt;/p>
&lt;h4 id="evaluating-k-means-clusterings">Evaluating K-means Clusterings&lt;/h4>
&lt;ul>
&lt;li>Most common measure is Sum of Squared Error (SSE)
&lt;ul>
&lt;li>Given two clusterings, we can choose the one with smallest error&lt;/li>
&lt;li>Decreasing K might decrease SSE&lt;/li>
&lt;li>However, good clusterings with small K might have a lower SSE than poor clusterings with higher K&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="k-means-always-terminates">K-Means Always Terminates&lt;/h4>
&lt;ul>
&lt;li>Theorem
&lt;ul>
&lt;li>K-means with Euclidean distance as distance always terminates&lt;/li>
&lt;li>Proof follows from the following lemmas&lt;/li>
&lt;li>We cannot obtain the same clustering more than once, otherwise we get the same SSE value&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lemma 1
&lt;ul>
&lt;li>The point y that minimizes the SSE in a cluster C is the mean of all points in C&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lemma 2
&lt;ul>
&lt;li>SSE strictly decreases.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lemma 3&lt;/li>
&lt;li>The total number of possible clusterings is finite (&amp;lt; n^k).&lt;/li>
&lt;/ul>
&lt;h4 id="solutions-to-initial-centroids-problem">Solutions to Initial Centroids Problem&lt;/h4>
&lt;ul>
&lt;li>Multiple runs (helps but low success probability)&lt;/li>
&lt;li>Sample and use hierarchical clustering to determine initial centroids&lt;/li>
&lt;li>Select more than k initial centroids and then select among these initial centroids&lt;/li>
&lt;li>Postprocessing&lt;/li>
&lt;li>K-Means++&lt;/li>
&lt;/ul>
&lt;h4 id="handling-empty-clusters">Handling Empty Clusters&lt;/h4>
&lt;p>&lt;em>Basic K-means algorithm can yield less than k clusters (so called empty clusters)&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Pick the points that contributes most to SSE and move them to empty cluster&lt;/li>
&lt;li>Pick the points from the cluster with the highest SSE&lt;/li>
&lt;li>If there are several empty clusters, the above can be repeated several times&lt;/li>
&lt;/ul>
&lt;h4 id="updating-centers-incrementally">Updating Centers Incrementally&lt;/h4>
&lt;ul>
&lt;li>In the basic K-means algorithm, centroids are updated after all points are assigned to a centroid&lt;/li>
&lt;li>An alternative is to update the centroids after each assignment (incremental approach)&lt;/li>
&lt;li>More precisely, let C1 ,C2 ,&amp;hellip;,C k be the current clusters. Reassign all points one by one to the best cluster. Let p in C i be the current point and suppose we re-assign it to Cj . Then, after that, recompute the centroid of C i and Cj
&lt;ul>
&lt;li>Never get an empty cluster&lt;/li>
&lt;li>Introduces an order dependency&lt;/li>
&lt;li>More expensive&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="pre-processing-and-post-processing">Pre-processing and Post-processing&lt;/h4>
&lt;p>Pre-processing&lt;/p>
&lt;ul>
&lt;li>Normalize the data&lt;/li>
&lt;li>Eliminate outliers&lt;/li>
&lt;/ul>
&lt;p>Post-processing&lt;/p>
&lt;ul>
&lt;li>Eliminate small clusters that may represent outliers&lt;/li>
&lt;li>Split &amp;rsquo;loose&amp;rsquo; clusters, i.e., clusters with relatively high SSE&lt;/li>
&lt;li>Merge clusters that are ‘close’ and that have relatively low SSE&lt;/li>
&lt;/ul>
&lt;h4 id="limitations-of-k-means">Limitations of K-means&lt;/h4>
&lt;ul>
&lt;li>K-means has problems when clusters are of differing
&lt;ul>
&lt;li>Sizes
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/kmeans_limitations.png" alt="kmeans_limitations">&lt;/li>
&lt;li>Densities
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/kmeans_limitations_density.png" alt="kmeans_limitations_density">&lt;/li>
&lt;li>Non-globular shapes
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/kmeans_limitations_globular.png" alt="kmeans_limitations_globular">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>K-means has problems when the data contains outliers&lt;/li>
&lt;/ul>
&lt;h4 id="overcoming-k-means-limitations">Overcoming K-means Limitations&lt;/h4>
&lt;p>Use many clusters, find parts of clusters, but need to put together&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/overcome_kmeans_limitations_1.png" alt="overcome_kmeans_limitations_1">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/overcome_kmeans_limitations_2.png" alt="overcome_kmeans_limitations_2">&lt;/p>
&lt;h3 id="hierarchical-clustering">Hierarchical clustering&lt;/h3>
&lt;ul>
&lt;li>Produces a set of nested clusters organized as a hierarchical tree&lt;/li>
&lt;li>Can be visualized as a dendrogram
&lt;ul>
&lt;li>A tree like diagram that records the sequences of merges or splits
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hierarchical_clustering_dendrogram.png" alt="hierarchical_clustering_dendrogram">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="strengths-of-hierarchical-clustering">Strengths of Hierarchical Clustering&lt;/h4>
&lt;ul>
&lt;li>Do not have to assume any particular number of clusters
&lt;ul>
&lt;li>Any desired number of clusters can be obtained by ‘cutting’ the dendogram at the proper level&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>They may correspond to meaningful taxonomies
&lt;ul>
&lt;li>Example in biological sciences (e.g., animal kingdom, phylogeny reconstruction, &amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="two-main-types-of-hierarchical-clustering">Two main types of hierarchical clustering&lt;/h4>
&lt;ul>
&lt;li>Agglomerative
&lt;ul>
&lt;li>Start with the points as individual clusters&lt;/li>
&lt;li>At each step, merge the closest pair of clusters until only one cluster (or k clusters) left&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Divisive
&lt;ul>
&lt;li>Start with one, all-inclusive cluster&lt;/li>
&lt;li>At each step, split a cluster until each cluster contains a point (or there are k clusters)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Traditional hierarchical algorithms use a similarity or distance matrix&lt;/p>
&lt;ul>
&lt;li>Merge or split one cluster at a time&lt;/li>
&lt;/ul>
&lt;h4 id="agglomerative-clustering-algorithm">Agglomerative Clustering Algorithm&lt;/h4>
&lt;p>&lt;em>Most popular hierarchical clustering technique&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Let each data point be a cluster&lt;/li>
&lt;li>Compute the distance matrix n x n&lt;/li>
&lt;li>Repeat
&lt;ul>
&lt;li>Merge the two closest clusters&lt;/li>
&lt;li>Update distance matrix&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Until only a single cluster remains&lt;/li>
&lt;/ul>
&lt;p>Procedure&lt;/p>
&lt;ol>
&lt;li>Start with clusters of individual points and a distance matrix n x n
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/agglomerative_clustering_algorithm_1.png" alt="agglomerative_clustering_algorithm_1">&lt;/li>
&lt;li>After some merging steps, we have some clusters
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/agglomerative_clustering_algorithm_2.png" alt="agglomerative_clustering_algorithm_2">&lt;/li>
&lt;li>We want to merge the two closest clusters (C2 and C5) and update the distance matrix
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/agglomerative_clustering_algorithm_3.png" alt="agglomerative_clustering_algorithm_3">&lt;/li>
&lt;li>The question is “How do we update the distance matrix
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/agglomerative_clustering_algorithm_4.png" alt="agglomerative_clustering_algorithm_4">&lt;/li>
&lt;/ol>
&lt;h4 id="how-to-define-inter-cluster-similarity">How to Define Inter-Cluster Similarity&lt;/h4>
&lt;ul>
&lt;li>MIN
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/inter_cluster_similarity_1.png" alt="inter_cluster_similarity_1">&lt;/li>
&lt;li>MAX
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/inter_cluster_similarity_2.png" alt="inter_cluster_similarity_2">&lt;/li>
&lt;li>Group Average
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/inter_cluster_similarity_3.png" alt="inter_cluster_similarity_3">&lt;/li>
&lt;li>Distance Between Centroids
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/inter_cluster_similarity_4.png" alt="inter_cluster_similarity_4">&lt;/li>
&lt;li>Other methods driven by an objective function
&lt;ul>
&lt;li>Ward’s Method uses squared error&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="problems-and-limitations">Problems and Limitations&lt;/h4>
&lt;ul>
&lt;li>Once a decision is made to combine two clusters, it cannot be undone&lt;/li>
&lt;li>No objective function is directly minimized&lt;/li>
&lt;li>Different schemes have problems with one or more of the following
&lt;ul>
&lt;li>Sensitivity to noise and outliers&lt;/li>
&lt;li>Difficulty handling different sized clusters and convex shapes&lt;/li>
&lt;li>Breaking large clusters&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cluster-validity">Cluster Validity&lt;/h3>
&lt;p>Numerical measures that are applied to judge various aspects of cluster validity, are classified into the following three types&lt;/p>
&lt;ul>
&lt;li>External Index
&lt;ul>
&lt;li>Used to measure the extent to which cluster labels match externally supplied class labels
&lt;ul>
&lt;li>Entropy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Internal Index
&lt;ul>
&lt;li>Used to measure the goodness of a clustering structure without respect to external information
&lt;ul>
&lt;li>Sum of Squared Error (SSE)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Relative Index
&lt;ul>
&lt;li>To compare two different clusterings or clusters
&lt;ul>
&lt;li>An external or internal index is used for this function, e.g., SSE or entropy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="internal-measures-sse">Internal Measures: SSE&lt;/h4>
&lt;ul>
&lt;li>Clusters in more complicated figures aren’t well separated&lt;/li>
&lt;li>SSE is good for comparing two clusterings or two clusters (average SSE)&lt;/li>
&lt;li>Can also be used to estimate the number of clusters&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/internal_measures_SSE.png" alt="internal_measures_SSE">&lt;/p>
&lt;h4 id="external-measures-of-cluster-validity-entropy">External Measures of Cluster Validity: Entropy&lt;/h4>
&lt;ul>
&lt;li>Definition: Entropy
&lt;ul>
&lt;li>Entropy measure how uncertain is an event, the larger the entropy the more uncertain is the event&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/external_measures_of_cluster_validity_Entropy.png" alt="external_measures_of_cluster_validity_Entropy">&lt;/p>
&lt;p>&lt;em>&amp;ldquo;The validation of clustering structures is the most difficult and frustrating part of cluster analysis. Without a strong effort in this direction, cluster analysis will remain a black art accessible only to those true believers who have experience and great courage.&amp;rdquo;&lt;/em>&lt;/p>
&lt;h3 id="k-means-1">K-means++&lt;/h3>
&lt;ul>
&lt;li>Initialize the centroids as in Algorithm 1&lt;/li>
&lt;li>Run K-means algorithm to improve the clustering&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/kmeans_plus_plus_algorithm1.png" alt="kmeans_plus_plus_algorithm1">&lt;/p>
&lt;h4 id="algorithm-comparison">Algorithm Comparison&lt;/h4>
&lt;ul>
&lt;li>K-means
&lt;ul>
&lt;li>No guarantees on the quality of the solution&lt;/li>
&lt;li>It always terminates&lt;/li>
&lt;li>Running time could be exponential but it is OK in practice&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>K-means++
&lt;ul>
&lt;li>It always terminates&lt;/li>
&lt;li>O(log k)-approximation on the quality of the solution&lt;/li>
&lt;li>In practice the advantage is noticeable for large k&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>COMP7801 Topic 4 Top-k</title><link>https://jpg6.com/en/2021/03/06/comp7801_topic4/</link><pubDate>Sat, 06 Mar 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/03/06/comp7801_topic4/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;h3 id="multidimensional-data">Multidimensional Data&lt;/h3>
&lt;ul>
&lt;li>Flat relational tables&lt;/li>
&lt;li>Multimedia feature vectors&lt;/li>
&lt;li>Data warehouse data&lt;/li>
&lt;li>Spatial data&lt;/li>
&lt;li>Text documents&lt;/li>
&lt;/ul>
&lt;h3 id="attribute-types">Attribute Types&lt;/h3>
&lt;ul>
&lt;li>Attributes of multidimensional tuples may have variable types
&lt;ul>
&lt;li>Ordinal (e.g., age, salary)&lt;/li>
&lt;li>Nominal categorical values (e.g., color, religion)&lt;/li>
&lt;li>Binary (e.g., gender, owns_property)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Basic queries: range, NN, similarity&lt;/li>
&lt;/ul>
&lt;h3 id="basic-queries">Basic Queries&lt;/h3>
&lt;ul>
&lt;li>(Range) selection query
&lt;ul>
&lt;li>Returns the records that qualify a (multidimensional) range predicate&lt;/li>
&lt;li>Example:
&lt;ul>
&lt;li>Return the employees of age between 45 and 50 and salary above $100,000&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Distance (similarity) query
&lt;ul>
&lt;li>Returns the records that are within a distance from a reference record.&lt;/li>
&lt;li>Example:
&lt;ul>
&lt;li>Find images with feature vectors of Euclidean distance at most ε with the feature vector of a given image&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Nearest neighbor (similarity) query
&lt;ul>
&lt;li>Replaces distance bound by ranking predicate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="top-k-search-methods">Top-k Search Methods&lt;/h2>
&lt;ul>
&lt;li>Rank aggregation&lt;/li>
&lt;li>Index-based methods&lt;/li>
&lt;/ul>
&lt;h3 id="top-k-query">Top-k Query&lt;/h3>
&lt;ul>
&lt;li>Given a set of objects (e.g., relational tuples),&lt;/li>
&lt;li>Returns the k objects with the highest combined score, based on an aggregate function f.&lt;/li>
&lt;li>Example:
&lt;ul>
&lt;li>Relational table containing information about restaurants, with attributes(e.g. price, quality, location)&lt;/li>
&lt;li>f: sum(-price, quality, -dist(location,my_hotel))‏&lt;/li>
&lt;li>attribute value ranges are usually normalized
&lt;ul>
&lt;li>E.g., all values in a (0,1) range&lt;/li>
&lt;li>otherwise some attribute may be favored in f&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="top-k-query-variants">Top-k Query Variants&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Apply on single table, or ranked lists of tuples ordered by individual attributes
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Top_k_Query_Variants_1.jpg" alt="Top_k_Query_Variants_1">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ranked inputs in the same or different servers (centralized or distributed data)
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Top_k_Query_Variants_2.jpg" alt="Top_k_Query_Variants_1">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Standalone query or operator in a more complex query plan
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Top_k_Query_Variants_3.jpg" alt="Top_k_Query_Variants_3">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Incremental retrieval of objects with highest scores (k is not predefined)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Top-k joins&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">House&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">School&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">location&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">location&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">∗&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tuition&lt;/span>&lt;span class="w"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Probabilistic/approximate top-k retrieval&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Random and/or sorted accesses at ranked inputs&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="top-k-query-evaluation">Top-k Query Evaluation&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Most solutions assume distributive, monotone aggregate functions (e.g. f=sum)&lt;/p>
&lt;ul>
&lt;li>distributive: f(x,y,z,w)= f(f(x,y),f(z,w))
&lt;ul>
&lt;li>e.g., A+B+C+D = (A+B) + (C+D)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>monotone: if x&amp;lt;y and z&amp;lt;w, then f(x,z)&amp;lt;f(y,w)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Solutions based on 1-D ordering and merging sorted lists (rank aggregation)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Solutions based on multidimensional indexing&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="rank-aggregation">Rank Aggregation&lt;/h2>
&lt;ul>
&lt;li>Solutions based on 1-D ordering and merging sorted lists (rank aggregation)&lt;/li>
&lt;li>Assume that there is a total ranking of theobjects for each attributethat can be used in top-kqueries&lt;/li>
&lt;li>These sorted inputs canbe accessed sequentiallyand/or by random accesses&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Rank_Aggregation.jpg" alt="Rank_Aggregation">&lt;/p>
&lt;h3 id="advantages-and-drawbacks">Advantages and Drawbacks&lt;/h3>
&lt;ul>
&lt;li>Advantages：
&lt;ul>
&lt;li>can be applied on any subset of inputs (arbitrary subspace)&lt;/li>
&lt;li>appropriate for distributed data&lt;/li>
&lt;li>appropriate for top-k joins&lt;/li>
&lt;li>easy to understand and implement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Drawbacks:
&lt;ul>
&lt;li>slower than index-based methods&lt;/li>
&lt;li>require inputs to be sorted&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ta-threshold-algorithm">TA: Threshold Algorithm&lt;/h3>
&lt;h4 id="introduction">Introduction&lt;/h4>
&lt;ul>
&lt;li>Iteratively retrieves objects and their atomic scores from the ranked inputs in a round-robin fashion.&lt;/li>
&lt;li>For each encountered object x, perform random accesses to the inputs where x has not been seen.&lt;/li>
&lt;li>Maintain top-k objects seen so far.&lt;/li>
&lt;li>T = f($l_1$, . . . , $l_m$) is the score derived when applying the aggregation function to the last atomic scores seen at each input. If the score of the k-th object is no smaller than T, terminate.&lt;/li>
&lt;/ul>
&lt;h4 id="example-of-tak1fsum">Example of TA(k=1,f=sum)&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>STEP 1&lt;/strong>
&lt;ul>
&lt;li>top-1 is c, with score 2.0&lt;/li>
&lt;li>T=sum(0.9,0.9,0.9)=2.7&lt;/li>
&lt;li>T&amp;gt;top-1, we proceed to another round of accesses&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/TA_Step_1.jpg" alt="TA_Step_1">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>STEP 2&lt;/strong>
&lt;ul>
&lt;li>top-1 is b, with score 2.2&lt;/li>
&lt;li>T=sum(0.8,0.8,0.9)=2.5&lt;/li>
&lt;li>T&amp;gt;top-1, we proceed to another round of accesses&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/TA_Step_2.jpg" alt="TA_Step_2">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>STEP 3&lt;/strong>
&lt;ul>
&lt;li>top-1 is b, with score 2.2&lt;/li>
&lt;li>T=sum(0.6,0.6,0.8)=2.0&lt;/li>
&lt;li>T≤top-1, terminate and output (b,2.2)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/TA_Step_3.jpg" alt="TA_Step_3">&lt;/p>
&lt;h4 id="properties-of-ta">Properties of TA&lt;/h4>
&lt;ul>
&lt;li>Used as a standard module for merging ranked lists in many applications&lt;/li>
&lt;li>Usually finds the result quickly&lt;/li>
&lt;li>Depends on random accesses, which can be expensive&lt;/li>
&lt;li>random accesses are impossible in some cases
&lt;ul>
&lt;li>e.g., an API allows to access objects incrementally by ranking score, but does not provide the score of a given object&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="nra-no-random-accesses">NRA: No Random Accesses&lt;/h3>
&lt;h4 id="introduction-1">Introduction&lt;/h4>
&lt;ul>
&lt;li>Iteratively retrieves objects and their atomic scores from the ranked inputs in a round-robin fashion.&lt;/li>
&lt;li>For each object x seen so far at any input maintain:
&lt;ul>
&lt;li>f_x_ub: upper bound for x’s aggregate score (f_x)&lt;/li>
&lt;li>f_x_lb: lower bound for x’s aggregate score (f_x)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>W_k = k objects with the largest f^lb.&lt;/li>
&lt;li>If the smallest f^lb in W_k is at least the largest f_x_ub of any object x not in W_k, then terminate and report W_k as top-k result.&lt;/li>
&lt;/ul>
&lt;h4 id="example-of-nrak1fsum">Example of NRA(k=1,f=sum)&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>STEP 1&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/NRA_Step_1.jpg" alt="NRA_Step_1">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>STEP 2&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/NRA_Step_2.jpg" alt="NRA_Step_2">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>STEP 3&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/NRA_Step_3.jpg" alt="NRA_Step_3">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>STEP 4&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/NRA_Step_4.jpg" alt="NRA_Step_4">&lt;/p>
&lt;h4 id="nra-properties">NRA Properties&lt;/h4>
&lt;ul>
&lt;li>More generic than TA, since it does not depend on random accesses&lt;/li>
&lt;li>Can be cheaper than TA, if random accesses are very expensive&lt;/li>
&lt;li>NRA accesses objects sequentially from all inputs and updates the upper bounds for all objects seen so far unconditionally.
&lt;ul>
&lt;li>Cost: O(n) per access (the expected distinct number of objects accessed so far is O(n))&lt;/li>
&lt;li>No input list is pruned until the algorithm terminates&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="lara-lattice-based-rank-aggregation">LARA: LAttice-based Rank Aggregation&lt;/h3>
&lt;ul>
&lt;li>LARA: An efficient NRA implementation&lt;/li>
&lt;li>Based on 3 observations about the top-k candidates&lt;/li>
&lt;li>Operates differently in the two (growing, shrinking) phases&lt;/li>
&lt;li>Takes its name from the lattice used in the shrinking phase&lt;/li>
&lt;li>Extendable to various top-k query variants&lt;/li>
&lt;/ul></description></item><item><title>COMP7801 Topic 3 Spatial Networks</title><link>https://jpg6.com/en/2021/02/27/comp7801_topic3/</link><pubDate>Sat, 27 Feb 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/02/27/comp7801_topic3/</guid><description>&lt;h3 id="background">Background&lt;/h3>
&lt;h4 id="network-distance">Network Distance&lt;/h4>
&lt;ul>
&lt;li>In many real applications accessibility of objects is restricted by a spatial network
&lt;ul>
&lt;li>Examples
&lt;ul>
&lt;li>Driver looking for nearest gas station&lt;/li>
&lt;li>Mobile user looking for nearest restaurant&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Shortest path distance&lt;/strong> used instead of Euclidean distance&lt;/li>
&lt;li>SP(a,b) = path between a and b with the minimum accumulated length&lt;/li>
&lt;/ul>
&lt;h4 id="challenges">Challenges&lt;/h4>
&lt;ul>
&lt;li>Euclidean distance is no longer relevant
&lt;ul>
&lt;li>R-tree may not be useful, when search is based on shortest path distance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Graph cannot be flattened to a one-dimensional space
&lt;ul>
&lt;li>Special storage and indexing techniques for graphs are required&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Graph properties may vary
&lt;ul>
&lt;li>directed vs. undirected&lt;/li>
&lt;li>length, time, etc. as edge weights&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="modeling-and-storing-spatial-networks">Modeling and Storing Spatial Networks&lt;/h3>
&lt;h4 id="modeling-spatial-networks">Modeling Spatial Networks&lt;/h4>
&lt;ul>
&lt;li>Adjacency matrix only appropriate for dense graphs&lt;/li>
&lt;li>Spatial networks are sparse: use adjacency lists instead&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Modeling_Spatial_Networks.png" alt="Modeling_Spatial_Networks">&lt;/p>
&lt;h4 id="storing-large-spatial-networks">Storing Large Spatial Networks&lt;/h4>
&lt;ul>
&lt;li>Problem: adjacency lists representation may not fit in memory if graph is large&lt;/li>
&lt;li>Solution:
&lt;ul>
&lt;li>partition adjacency lists to disk blocks (based on proximity)&lt;/li>
&lt;li>create B+-tree index on top of partitions (based on node-id)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Storing_Large_Spatial_Network.png" alt="Storing_Large_Spatial_Network">&lt;/p>
&lt;h3 id="shortest-path-search">Shortest Path Search&lt;/h3>
&lt;ul>
&lt;li>Given a graph G(V,E), and two nodes s,t in V, find the shortest path from s to t&lt;/li>
&lt;li>A classic algorithmic problem&lt;/li>
&lt;li>Studied extensively since the 1950’s&lt;/li>
&lt;li>Several methods:
&lt;ul>
&lt;li>Dijkstra’s algorithm&lt;/li>
&lt;li>A*-search&lt;/li>
&lt;li>Bi-directional search&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="dijkstras-shortest-path-search">Dijkstra’s Shortest Path Search&lt;/h4>
&lt;ul>
&lt;li>idea: incrementally explore the graph around s, visitingnodes in distance order to suntil t is found (like NN)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Dijkstra_1.png" alt="Dijkstra_1">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Dijkstra_2.png" alt="Dijkstra_2">&lt;/p>
&lt;h4 id="algorithm">Algorithm&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Dijkstra_Algorithm.png" alt="Dijkstra_Algorithm">&lt;/p>
&lt;h4 id="example">Example&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Dijkstra_Example.png" alt="Dijkstra_Example">&lt;/p>
&lt;h4 id="illustrating">Illustrating&lt;/h4>
&lt;ul>
&lt;li>Find the shortest path between a and b.&lt;/li>
&lt;li>Worst-case performance O(|E| + |V|log|V| )&lt;/li>
&lt;/ul>
&lt;h3 id="a-search">A*-search&lt;/h3>
&lt;h4 id="description">Description&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Dijkstra’s search explores nodes around s without a specific search direction until t is found&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Idea: improve Dijkstra’s algorithm by directing search towards t&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Due to triangular inequality, Euclidean distance is a lower bound of network distance&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use Euclidean distance to lower bound network distance based on known information:&lt;/p>
&lt;ul>
&lt;li>Nodes are visited in increasing SPD(s,v)+dist(v,t) order
&lt;ul>
&lt;li>SPD(s,v): shortest path distance from s to v (computed by Dijkstra)&lt;/li>
&lt;li>dist(v,t): Euclidean distance between v and t&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Original Dijkstra visits nodes in increasing SPD(s,v) order&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/A_Star_1.png" alt="A_Star_1">&lt;/p>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/A_Star_Example.png" alt="A_Star_Example">&lt;/p>
&lt;h4 id="illustrating-1">Illustrating&lt;/h4>
&lt;ul>
&lt;li>Find the shortest path between s and t.
&lt;ul>
&lt;li>f(p) = Dijkstra_dist(s, p) + Euclidean_dist(p, t)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="bi-directional-search">Bi-directional search&lt;/h3>
&lt;ul>
&lt;li>Dijkstra’s search explores nodes around s without a specific search direction until t is found&lt;/li>
&lt;li>Idea: search can be performed concurrently from s and from t (backwards)&lt;/li>
&lt;li>The shortest path tree of s and the (backward) shortest path tree of t are computed in concurrently
&lt;ul>
&lt;li>One queue Q_s for forward and one queue Q_t for backward search&lt;/li>
&lt;li>Node visits are prioritized based on min(SPD(s,v), SPD(v,t))&lt;/li>
&lt;li>If v already visited from s and v is in Qt, then candidate shortest path: p(s,v)+p(v,t) (if v already visited from t and v in Q_s symmetric)&lt;/li>
&lt;li>If v is visited by both s and t terminate search; report best candidate shortest path&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="example-2">Example&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Bi_Directional_Example.png" alt="Bi_Directional_Example">&lt;/p>
&lt;h3 id="discussions">Discussions&lt;/h3>
&lt;ul>
&lt;li>A* and bi-directional search can be combined to powerful search techniques&lt;/li>
&lt;li>A* can only be applied if lower distance bounds are available&lt;/li>
&lt;li>All versions of Dijkstra’s search require non-negative edge weights
&lt;ul>
&lt;li>Bellman-Ford is an algorithm for arbitrary negative edges&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="spatial-queries-over-spatial-networks">Spatial queries over spatial networks&lt;/h2>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;h4 id="sourcedestination-on-edges">Source/Destination on Edges&lt;/h4>
&lt;ul>
&lt;li>We have assumed that points s and t are nodes of the network&lt;/li>
&lt;li>In practice s and t could be arbitrary points on edges
&lt;ul>
&lt;li>Mobile user locations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Solve problem by introducing 2 more nodes&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Source_Destination_on_Edges.png" alt="Source_Destination_on_Edges">&lt;/p>
&lt;h4 id="spatial-queries-over-spatial-networks-1">Spatial Queries over Spatial Networks&lt;/h4>
&lt;ul>
&lt;li>Data:
&lt;ul>
&lt;li>A (static) spatial network (e.g., city map)&lt;/li>
&lt;li>A (dynamic) set of spatial objects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Spatial queries based on network distance:
&lt;ul>
&lt;li>Selections. Ex: find gas stations within 10km driving distance from here&lt;/li>
&lt;li>Nearest neighbor search. Ex: find k nearest restaurants from present position&lt;/li>
&lt;li>Joins. Ex: find pairs of restaurants and hotels at most 100m from each other&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Spatial_Queries_over_Spatial_Networks.png" alt="Spatial_Queries_over_Spatial_Networks">&lt;/p>
&lt;h4 id="methodology">Methodology&lt;/h4>
&lt;ul>
&lt;li>Store (and index) the spatial network
&lt;ul>
&lt;li>Graph component (indexes connectivity information)&lt;/li>
&lt;li>Spatial component (indexes coordinates of nodes, edges, etc.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Store (and index) the sets of spatial objects
&lt;ul>
&lt;li>Ex., one spatial relation for restaurants, one spatial relation for hotels, one relation for mobile users, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Given a spatial location p, use spatial component of network to find the network edge containing p&lt;/li>
&lt;li>Given a network edge, use network component to traverse neighboring edges&lt;/li>
&lt;li>Given a neighboring edge, use spatial indexes to find objects on them&lt;/li>
&lt;/ul>
&lt;h3 id="evaluation-of-spatial-selections-1">Evaluation of Spatial Selections (1)&lt;/h3>
&lt;ul>
&lt;li>Query: find all objects in spatial relation R, within network distance ε from location q&lt;/li>
&lt;li>Method:
&lt;ul>
&lt;li>Use spatial index of network (R-tree indexing network edges) to find edge n_1n_2, which includes q&lt;/li>
&lt;li>Use adjacency index of network (graph component) and apply Dijkstra’s algorithm to progressively retrieve edges that are within network distance ε from location q&lt;/li>
&lt;li>For all these edges apply a spatial selection on the R-tree that indexes R to find the results&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="example-3">Example&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Example: Find restaurants at most distance 10 from q&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Step 1: find network edge which contains q&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Evaluation_of_Spatial_Selections_1.png" alt="Evaluation_of_Spatial_Selections_1">&lt;/p>
&lt;ul>
&lt;li>Step 2: traverse network to find all edges (or parts of them within distance 10 from q)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Evaluation_of_Spatial_Selections_2.png" alt="Evaluation_of_Spatial_Selections_2">&lt;/p>
&lt;ul>
&lt;li>Step 3: find restaurants that intersect the subnetwork computed at step 2&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Evaluation_of_Spatial_Selections_3.png" alt="Evaluation_of_Spatial_Selections_3">&lt;/p>
&lt;h3 id="evaluation-of-spatial-selections-2">Evaluation of Spatial Selections (2)&lt;/h3>
&lt;h4 id="description-1">Description&lt;/h4>
&lt;ul>
&lt;li>Query: find all objects in spatial relation R, within network distance ε from location q&lt;/li>
&lt;li>Alternative method based on Euclidean bounds:
&lt;ul>
&lt;li>Assumption: Euclidean distance is a lower-bound of network distance:
&lt;ul>
&lt;li>dist(v,u) ≤ SPD(v,u), for any v,u&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use R-tree on R to find set S of objects such that for each o in S: dist(q,o) ≤ ε&lt;/li>
&lt;li>For each o in S:
&lt;ul>
&lt;li>find where o is located in the network (use Network R-tree)&lt;/li>
&lt;li>compute SPD(q,o) (e.g. use A*)&lt;/li>
&lt;li>If SPD(q,o) ≤ ε then output o&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="example-4">Example&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Example: Find restaurants at most distance 10 from q&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Step 1: find restaurants for which the Euclidean distance to q is at most 10: S={r1,r2,r3}&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Evaluation_of_Spatial_Selections_Example_1.png" alt="Evaluation_of_Spatial_Selections_Example_1">&lt;/p>
&lt;ul>
&lt;li>Step 2: for each restaurant in S, compute SPD to q and verify if it is indeed a correct result&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Evaluation_of_Spatial_Selections_Example_2.png" alt="Evaluation_of_Spatial_Selections_Example_2">&lt;/p>
&lt;h3 id="evaluation-of-nn-search-1">Evaluation of NN search (1)&lt;/h3>
&lt;ul>
&lt;li>Query: find in spatial relation R the nearest object to a given location q&lt;/li>
&lt;li>Method:
&lt;ul>
&lt;li>Use spatial index of network (R-tree indexing network edges) to find edge n_1n_2, which includes q&lt;/li>
&lt;li>Use adjacency index of network (graph component) and apply Dijkstra’s algorithm to progressively retrieve edges in order of their distance to q&lt;/li>
&lt;li>For each edge apply a spatial selection on the R-tree that indexes R to find any objects&lt;/li>
&lt;li>Keep track of nearest object found so far; use its shortest path distance to terminate network browsing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="example-5">Example&lt;/h4>
&lt;ul>
&lt;li>Example: Find nearest restaurant to q&lt;/li>
&lt;li>Step: in ppt 31&lt;/li>
&lt;/ul>
&lt;h3 id="evaluation-of-nn-search-2">Evaluation of NN search (2)&lt;/h3>
&lt;ul>
&lt;li>Query: find in spatial relation R the nearest object to a given location q&lt;/li>
&lt;li>Alternative method based on Euclidean bounds:
&lt;ul>
&lt;li>Assumption: Euclidean distance lower-bounds network distance:
&lt;ul>
&lt;li>dist(v,u) ≤ SPD(v,u), for any v,u&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Evaluation_of_NN_search.png" alt="Evaluation_of_NN_search">&lt;/p>
&lt;h3 id="spatial-join-queries">Spatial Join Queries&lt;/h3>
&lt;h4 id="description-2">Description&lt;/h4>
&lt;ul>
&lt;li>Query: find pairs (r,s), such that r in relation R, s in relation S, and SPD(r,s)≤ε&lt;/li>
&lt;li>Methods:
&lt;ul>
&lt;li>For each r in R, do an ε-distance selection queries for objects in S (Index Nested Loops)&lt;/li>
&lt;li>For each pair (r,s), such that Euclidean dist(r,s)≤ε compute SPD(r,s) and verify SPD(r,s)≤ε&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="notes-on-query-evaluation-based-on-network-distance">Notes on Query Evaluation based on Network Distance&lt;/h3>
&lt;ul>
&lt;li>For each query type, there are methods based on network browsing and methods based on Euclidean bounds&lt;/li>
&lt;li>Network browsing methods are fast if network edges are densely populated with points of interest
&lt;ul>
&lt;li>A limited network traversal can find the result fast&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Methods based on Euclidean bounds are good if the searched POIs are sparsely distributed in the network
&lt;ul>
&lt;li>Few verifications with exact SP searches are required&lt;/li>
&lt;li>Directed SP search (e.g. using A*) avoids visiting empty parts of the network&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="advanced-indexing-techniques-for-spatial-networks">Advanced indexing techniques for spatial networks&lt;/h2>
&lt;h3 id="shortest-path-materialization-and-indexing-in-large-graphs">Shortest Path Materialization and Indexing in Large Graphs&lt;/h3>
&lt;ul>
&lt;li>Dijkstra’s algorithm and related methods could be very expensive on very large graphs&lt;/li>
&lt;li>(Partial) materialization of shortest paths in static graphs can accelerate search&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Shortest_Path_Materialization_and_Indexing_in_Large_Graphs.png" alt="Shortest_Path_Materialization_and_Indexing_in_Large_Graphs.png">&lt;/p>
&lt;h3 id="hierarchical-path-materialization">Hierarchical Path Materialization&lt;/h3>
&lt;ul>
&lt;li>Idea: Partition graph G into G_1,G_2,G_3,&amp;hellip; based on connectivity and proximity of nodes&lt;/li>
&lt;li>Every edge of G goes to exactly one G_i&lt;/li>
&lt;li>Border nodes belong to more than one G_i’s&lt;/li>
&lt;li>For each G_i compute and materialize SPs between every pair of nodes in G_i (matrix M_i)
&lt;ul>
&lt;li>Partitions are small enough for materialization space overhead to be low&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Compute and materialize SPs between every pair of border nodes (matrix B)
&lt;ul>
&lt;li>If border nodes too many, hierarchically partition them into 2nd-level partitions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Hierarchical_Path_Materialization.png" alt="Hierarchical_Path_Materialization">&lt;/p>
&lt;h4 id="algorithm-1">algorithm&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Hierarchical_Path_Materialization_algorithm.png" alt="Hierarchical_Path_Materialization_algorithm">&lt;/p>
&lt;h4 id="illustrating-2">Illustrating&lt;/h4>
&lt;ul>
&lt;li>Good partitioning if:
&lt;ul>
&lt;li>small partitions&lt;/li>
&lt;li>few combinations examined for SP search&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Real road networks:
&lt;ul>
&lt;li>Non-highway nodes in local partitions&lt;/li>
&lt;li>Highway nodes become border nodes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Hierarchical_Path_Materialization_Illustration.png" alt="Hierarchical_Path_Materialization_Illustration">&lt;/p>
&lt;h3 id="compressing-materialized-paths">Compressing Materialized Paths&lt;/h3>
&lt;ul>
&lt;li>Distance matrix with successors has O(n_2) space cost&lt;/li>
&lt;li>Motivation: reduce space by grouping targets based on common successors&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Compressing_Materialized_Paths.png" alt="Compressing_Materialized_Paths">&lt;/p>
&lt;h4 id="algorithm-2">algorithm&lt;/h4>
&lt;ul>
&lt;li>Create and encode one space partitioning defined by targets of the same successor&lt;/li>
&lt;li>For each node s, index Is a set of &amp;lt;succ,R&amp;gt; pairs:
&lt;ul>
&lt;li>succ: a successor of s&lt;/li>
&lt;li>R: a continuous region, such that for each t in R, the successor of s in SP(s,t) is succ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Compressing_Materialized_Paths_Algorithm.png" alt="Compressing_Materialized_Paths_Algorithm">&lt;/p>
&lt;ul>
&lt;li>To compute SP(s,t) for a given s, t:
&lt;ol>
&lt;li>SP=s&lt;/li>
&lt;li>Use spatial index Is to find &amp;lt;succ,R&amp;gt;, such that t in R&lt;/li>
&lt;li>SP = SP + (s,succ)&lt;/li>
&lt;li>If succ = t, report SP and terminate&lt;/li>
&lt;li>Otherwise s=succ; Goto step 2&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Indexing and search of spatial networks is different than spatial indexing
&lt;ul>
&lt;li>Shortest path distance is used instead of Euclidean distance, to define range queries, nearest neighbor search, and spatial joins&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Spatial networks could be too large to fit in memory
&lt;ul>
&lt;li>Disk-based index for adjacency lists is used&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Several shortest path algorithms&lt;/li>
&lt;li>Spatial queries can be evaluated using Euclidean bounds&lt;/li>
&lt;li>Advanced indexing methods for shortest path search on large graphs&lt;/li>
&lt;/ul></description></item><item><title>COMP7103 Topic 2 Association Rules</title><link>https://jpg6.com/en/2021/02/25/comp7103_topic2/</link><pubDate>Thu, 25 Feb 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/02/25/comp7103_topic2/</guid><description>&lt;h1 id="comp7103-data-mining">COMP7103 Data Mining&lt;/h1>
&lt;h2 id="topic-2-association-rules">Topic 2 Association Rules&lt;/h2>
&lt;h3 id="market-basket-model">Market-Basket Model&lt;/h3>
&lt;p>A general many-many mapping (association) between two kinds of things&lt;/p>
&lt;ul>
&lt;li>A large set of items, e.g., things sold in a supermarket&lt;/li>
&lt;li>A large set of baskets, each of which is a small set of the items, e.g., the things one customer buys on one day&lt;/li>
&lt;/ul>
&lt;h3 id="frequent-itemsets">Frequent Itemsets&lt;/h3>
&lt;h4 id="support">Support&lt;/h4>
&lt;p>Support for itemset I (s(I)) = the number of baskets containing all items in I&lt;/p>
&lt;p>Given a support threshold s, sets of items that appear in at least s baskets are called frequent itemsets&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/frequent_itemsets.png" alt="frequent_itemsets">&lt;/p>
&lt;h4 id="monotonicity">Monotonicity&lt;/h4>
&lt;p>For any sets of items I and any set of items J, it holds that&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/association_rules_monotonicity.png" alt="association_rules_monotonicity">&lt;/p>
&lt;h3 id="applications">Applications&lt;/h3>
&lt;ul>
&lt;li>given that many people buy beer and diapers together
&lt;ul>
&lt;li>Run a sale on diapers; raise price of beer&lt;/li>
&lt;li>Only useful if many buy diapers &amp;amp; beer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Items that appear together too often could represent plagiarism&lt;/li>
&lt;li>Unusual words appearing together in a large number of documents&lt;/li>
&lt;/ul>
&lt;h3 id="association-rules">Association Rules&lt;/h3>
&lt;p>If-then rules I → j about the contents of baskets, I is a set of items and j is an item&lt;/p>
&lt;ul>
&lt;li>i → j means
&lt;ul>
&lt;li>if a basket contains all the items in I then it is likely to contain j&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="confidence">Confidence&lt;/h4>
&lt;p>The probability of j given I&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/association_rules_confidence.png" alt="association_rules_confidence">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/association_rules_confidence_example.png" alt="association_rules_confidence_example">&lt;/p>
&lt;h4 id="finding-association-rules">Finding Association Rules&lt;/h4>
&lt;p>find all association rules with support ≥ s and confidence ≥ c&lt;/p>
&lt;h4 id="computation-model">Computation Model&lt;/h4>
&lt;ul>
&lt;li>Data is kept in raw files rather than in a database system
&lt;ul>
&lt;li>Stored on disk&lt;/li>
&lt;li>Stored basket-by-basket&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The true cost of mining disk-resident data is usually the number of disk I/O’s&lt;/li>
&lt;li>In practice, association-rule algorithms read data in passes – all baskets read in turn&lt;/li>
&lt;li>we measure the cost by the number of passes an algorithm takes&lt;/li>
&lt;/ul>
&lt;h3 id="association-rules-algorithms">Association Rules Algorithms&lt;/h3>
&lt;h4 id="naïve-algorithm">Naïve Algorithm&lt;/h4>
&lt;ul>
&lt;li>Read file once, counting in main memory the occurrences of each pair
&lt;ul>
&lt;li>From each basket of n items, generate its n (n -1)/2 pairs by two nested loops&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Fails if (#items)^2 exceeds main memory&lt;/li>
&lt;/ul>
&lt;h4 id="a-priori-algorithm">A-Priori Algorithm&lt;/h4>
&lt;ul>
&lt;li>A two-pass approach called a-priori limits the need for main memory&lt;/li>
&lt;li>Key idea: monotonicity
&lt;ul>
&lt;li>If a set of items appears at least s times, so does every subset&lt;/li>
&lt;li>For pairs: if item i does not appear in s baskets, then no pair including i can appear in s baskets&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Process
&lt;ul>
&lt;li>Pass 1
&lt;ul>
&lt;li>Read baskets and count in main memory the occurrences of each item (Requires only memory proportional to #items)
&lt;ul>
&lt;li>Items that appear at least s times are the frequent items&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pass 2
&lt;ul>
&lt;li>Read baskets again and count in main memory only those pairs both of which were found in pass 1 to be frequent
&lt;ul>
&lt;li>To count number of item pairs use a hash function&lt;/li>
&lt;li>Requires memory proportional to square of frequent items only, plus a list of the frequent items, plus space for hashing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/APriori_Algorithm.png" alt="APriori_Algorithm">&lt;/p>
&lt;ul>
&lt;li>One pass for each k&lt;/li>
&lt;li>Needs room in main memory to count each candidate k -set&lt;/li>
&lt;li>For typical market-basket data and reasonable support (e.g., 1%), k = 2 requires the most memory&lt;/li>
&lt;/ul>
&lt;h4 id="pcy-algorithm">PCY Algorithm&lt;/h4>
&lt;ul>
&lt;li>Main observation: during pass 1 of A-priori, most memory is idle&lt;/li>
&lt;li>Use that memory to keep additional info to improve storage during pass 2 of A-priori&lt;/li>
&lt;li>Passes &amp;gt; 2 are the same as in A-Priori&lt;/li>
&lt;li>Process
&lt;ul>
&lt;li>Pass 1
&lt;ul>
&lt;li>Use a hash function which bucketizes item pairs, that is, maps them to integers in [1,k]&lt;/li>
&lt;li>Each bucket i in [1,k] is associated with a counter ci&lt;/li>
&lt;li>During pass 1, as we examine a basket (e.g. {m,b,d,o})
&lt;ul>
&lt;li>update counters of single items&lt;/li>
&lt;li>Generate all item pairs for that basket, hash each of them and add 1 to the corr. counter&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pass 2
&lt;ul>
&lt;li>Count all pairs {i, j } that meet the conditions for being a candidate pair
&lt;ul>
&lt;li>Both i and j are frequent items&lt;/li>
&lt;li>The pair {i, j }, hashes to a frequent bucket&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ignore all pairs belonging to non-frequent buckets (do not use a counter for them)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="simple-algorithm">Simple Algorithm&lt;/h4>
&lt;ul>
&lt;li>Take a random sample of the market baskets
&lt;ul>
&lt;li>give a full pass on the data and keep a basket in main memory with probability p&lt;/li>
&lt;li>A random sample is the best representative of a dataset&lt;/li>
&lt;li>Keeping only the first baskets might not contain iPhones for example&lt;/li>
&lt;li>If we cannot have a sample large enough then
&lt;ul>
&lt;li>Remove false positives with one more pass&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Run A-priori or one of its improvements in main memory, so you don’t pay for disk I/O each time you give a pass on the data
&lt;ul>
&lt;li>Be sure you leave enough space for counts&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Adjust the support threshold s accordingly&lt;/li>
&lt;/ul>
&lt;h4 id="son-algorithm">SON Algorithm&lt;/h4>
&lt;ul>
&lt;li>Two passes&lt;/li>
&lt;li>No false positives or false negatives&lt;/li>
&lt;li>Divide the dataset into chunks, where each chunk contains a subset of baskets&lt;/li>
&lt;li>Process
&lt;ul>
&lt;li>Pass 1
&lt;ul>
&lt;li>Divide the dataset into chunks, where each chunk contains a subset of baskets&lt;/li>
&lt;li>Let pi such that the ith chunk contains a fraction pi of the dataset&lt;/li>
&lt;li>For each chunk i compute all frequent itemsets with support p i x s and store them on disk. This is the set of candidates for next pass&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pass 2
&lt;ul>
&lt;li>Read all frequent itemsets found in the previous pass (candidates)&lt;/li>
&lt;li>For each of them count the number of occurrences and output only those with support at least s&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Ethereum 核心技术解读</title><link>https://jpg6.com/en/2021/02/20/blockchain_ethereum_basic/</link><pubDate>Sat, 20 Feb 2021 12:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/02/20/blockchain_ethereum_basic/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>比特币作为一种去中心化的数字货币，是极其成功的，但受限于比特币脚本（非图灵完备，只能处理一些简单的逻辑），并不能处理很复杂的业务。而&lt;code>Ethereum&lt;/code>引入了智能合约，使去中心化的概念能够应用于更丰富的应用场景，因此也被称为区块链 2.0。本文将对以太坊核心技术进行解读，如有错漏，欢迎交流指正。&lt;/p>
&lt;h2 id="ethereum-系统">Ethereum 系统&lt;/h2>
&lt;p>2014 年 1 月，俄罗斯开发者 Vitalik Buterin 发布了以太坊白皮书并成立团队，旨在创造一个集成更通用的脚本语言的区块链平台。其中一位成员 Dr. Gavin Wood 发布了一份黄皮书，涉及&lt;code>Ethereum Virtual Machin(EVM)&lt;/code>以太坊虚拟的相关技术，这就是&lt;code>Ethereum&lt;/code>的诞生。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ethereum_overview.png" alt="ethereum_overview">&lt;/p>
&lt;p>简单来说，&lt;code>Ethereum&lt;/code>是一个开源的去中心化系统，使用区块链来存储系统状态变化，因此也被称为“世界计算机”；它支持开发者在区块链上部署运行不可变的程序，称为智能合约，因此可以支持广泛的应用场景；它使用数字货币&lt;code>Ether&lt;/code>来衡量系统资源消耗，激励更多人参与&lt;code>Ethereum&lt;/code>系统建设。&lt;/p>
&lt;h3 id="去中心化应用-dapp">去中心化应用 DApp&lt;/h3>
&lt;p>狭义来说，DApp 其实就是一个集成了用户界面、支持智能合约、运行于以太坊区块链上的应用。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ethereum_architecture.png" alt="ethereum_architecture">&lt;/p>
&lt;p>如上图所示，&lt;code>Ethereum&lt;/code>应用实例部署在区块链网络上（智能合约运行于区块链虚拟机中），而 Web 程序只需要通过&lt;code>Web3.js&lt;/code>对区块链网络进行&lt;code>RPC&lt;/code>远程调用，这样用户就可以通过浏览器（DApp 浏览器或 MetaMask 等插件工具）访问去中心化服务应用了。&lt;/p>
&lt;h3 id="账本">账本&lt;/h3>
&lt;p>&lt;code>Ethereum&lt;/code>区块链是一个去中心化的账本（数据库），网络中的所有交易都会存储在区块链中，所有节点都要本地保存一份数据，并且确保每一笔交易的可信度；所有的交易都是公开且不可篡改的，网络中的所有节点都可以查看和验证。&lt;/p>
&lt;h3 id="账户">账户&lt;/h3>
&lt;p>当我们需要登录一个网站或系统（比如邮箱）时，往往需要一个帐号和一个密码，密码通过加密算法以暗文的形式存储在中心化的数据库中。然而，以太坊是一个去中心化的系统，那是怎么生成账户的呢？&lt;/p>
&lt;p>和比特币系统原理类似&lt;/p>
&lt;ol>
&lt;li>首先生成一个仅有自己知道的私钥，假设为&lt;code>sk&lt;/code>，采用&lt;code>ECDSA(Elliptic Curve Digital Signature Algorithm)&lt;/code>椭圆曲线算法生成对应的公钥&lt;code>pk&lt;/code>&lt;/li>
&lt;li>采用&lt;code>keccak256&lt;/code>算法对公钥&lt;code>pk&lt;/code>求哈希值&lt;/li>
&lt;li>截取后 160 位作为以太坊的地址&lt;/li>
&lt;/ol>
&lt;p>用户的私钥和地址一起组成了以太坊的账户，可以存储余额、发起交易等（比特币的余额是通过计算所有的&lt;code>UTXO&lt;/code>得到的，而不是像以太坊一样存储在账户中）。&lt;/p>
&lt;p>其实&lt;code>Ethereum&lt;/code>账户分为两种类型，上述方式生成的叫&lt;code>Externally Owned Accounts(EOA)&lt;/code>，外部账户，也就是常规用户拥有的账户，主要是用来发送/接收&lt;code>Ether&lt;/code>代币或者向智能合约发送交易（即调用智能合约）。&lt;/p>
&lt;p>而另一种则是&lt;code>Contract Accounts&lt;/code>，合约账户，不同于外部账户，这种账户是没有对应的私钥的，而是在部署合约的时候生成的，存储智能合约代码。值得注意的是，合约账户必须要被外部账户或者其他合约调用才能够发送或接收&lt;code>Ether&lt;/code>，而不能自己主动执行交易。&lt;/p>
&lt;h3 id="钱包">钱包&lt;/h3>
&lt;p>存储和管理&lt;code>Ethereum&lt;/code>账户的软件/插件称为钱包，提供了诸如交易签名、余额管理等功能。钱包生成主要有两种方式，非确定性随机生成或根据随机种子生成。&lt;/p>
&lt;h3 id="gas">Gas&lt;/h3>
&lt;p>&lt;code>Ethereum&lt;/code>网络上的操作也需要“手续费”，称为&lt;code>Gas&lt;/code>，在区块链上部署智能合约以及转账都需要消耗一定单位的&lt;code>Gas&lt;/code>，这也是鼓励矿工参与&lt;code>Ethereum&lt;/code>网络建设的激励机制，从而使整个网络更加安全、可靠。&lt;/p>
&lt;p>每个交易都可以设置相应的&lt;code>Gas&lt;/code>量和&lt;code>Gas&lt;/code>的价格，设置较高的&lt;code>Gas&lt;/code>费则往往矿工会更快处理你的交易，但为了预防交易多次执行消耗大量&lt;code>Gas&lt;/code>费，可以通过&lt;code>Gas Limit&lt;/code>来设置限制。&lt;code>Gas&lt;/code>相关信息可以通过 &lt;a href="https://etherscan.io/gastracker">Ethereum Gas Tracker&lt;/a> 工具进行查询。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">If START_GAS * GAS_PRICE &amp;gt; caller.balance, halt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Deduct START_GAS * GAS_PRICE from caller.balance
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set &lt;span class="nv">GAS&lt;/span> &lt;span class="o">=&lt;/span> START_GAS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Run code, deducting from GAS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">For negative values, add to GAS_REFUND
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">After termination, add GAS_REFUND to caller.balance
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="智能合约">智能合约&lt;/h3>
&lt;p>上文提到，&lt;code>Ethereum&lt;/code>区块链不仅仅存储交易信息，还会存储与执行智能合约代码。&lt;/p>
&lt;p>智能合约控制应用和交易逻辑，&lt;code>Ethereum&lt;/code>系统中的智能合约采用专属&lt;code>Solidity&lt;/code>语言，语法类似于&lt;code>JavaScript&lt;/code>，除此之外，还有&lt;code>Vyper&lt;/code>、&lt;code>Bamboo&lt;/code>等编程语言。智能合约代码会被编译为字节码并部署至区块链中，一旦上链则不可以再编辑。&lt;code>EVM&lt;/code>作为一个智能合约执行环境，能够保障执行结果的确定性。&lt;/p>
&lt;h4 id="智能合约示例众筹">智能合约示例：众筹&lt;/h4>
&lt;p>让我们想象一个更复杂的场景，假设我要众筹 10000 元开发一个新产品，通过现有众筹平台需要支付不菲的手续费，而且很难解决信任问题，于是，可以通过一个众筹的 DApp 来解决这个问题。&lt;/p>
&lt;p>先为众筹设置一些规则&lt;/p>
&lt;ol>
&lt;li>每个想参与众筹的人可以捐款 10-10000 元的金额&lt;/li>
&lt;li>如果目标金额达成了，金额会通过智能合约发送给我（即众筹发起人）&lt;/li>
&lt;li>如果目标在一定时间内（如 1 个月）没有达成，众筹的资金会原路返回至众筹用户&lt;/li>
&lt;li>也可以设置一些规则，比如一周后，如果目标金额没有达成，用户可以申请退款&lt;/li>
&lt;/ol>
&lt;p>因为这些众筹条款是通过智能合约实现并部署在公开的区块链上的，即使是发起者也不能篡改条款，且任何人都可以查看，解决了信任问题。&lt;/p>
&lt;p>完整代码可以点击这里查看：&lt;a href="https://www.toshblocks.com/solidity/complete-example-crowd-funding-smart-contract/">Demo&lt;/a>&lt;/p>
&lt;h3 id="交易">交易&lt;/h3>
&lt;p>在&lt;code>Ethereum&lt;/code>中，一个典型的交易是怎么样的呢？&lt;/p>
&lt;ol>
&lt;li>开发者部署智能合约至区块链&lt;/li>
&lt;li>DApp 实例化合约、传入相应值以执行合约&lt;/li>
&lt;li>DApp 对交易进行数字签名&lt;/li>
&lt;li>本地对交易进行验证&lt;/li>
&lt;li>广播交易至网络中&lt;/li>
&lt;li>矿工节点接收交易并进行验证&lt;/li>
&lt;li>矿工节点确认可信区块后广播至网络中&lt;/li>
&lt;li>本地节点与网络进行同步，接收新区块&lt;/li>
&lt;/ol>
&lt;h3 id="架构">架构&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ethereum_architecture_simple.png" alt="ethereum_architecture_simple">&lt;/p>
&lt;p>&lt;code>Ethereum&lt;/code>采用的是一种&lt;code>Order - Execute - Validate - Update State&lt;/code>的系统架构。在这种架构下，当产生一笔新的交易，矿工会进行&lt;code>PoW&lt;/code>工作量证明机制的运算；验证完成后，将区块通过&lt;code>gossip&lt;/code>协议广播至网络中；网络中的其他节点接收到新区块后，也会对区块进行验证；最终，提交至区块链，更新状态。&lt;/p>
&lt;p>具体来看，&lt;code>Ethereum&lt;/code>系统有共识层、数据层、应用层等核心组件，其交互逻辑如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ethereum_architecture_concrete.png" alt="ethereum_architecture_concrete">&lt;/p>
&lt;p>如上图所示，&lt;code>Ethereum&lt;/code>数据由&lt;code>Transaction Root&lt;/code>和&lt;code>State Root&lt;/code>组成。&lt;code>Transaction Root&lt;/code>是所有交易组成的树，包含&lt;code>From&lt;/code>、&lt;code>To&lt;/code>、&lt;code>Data&lt;/code>、&lt;code>Value&lt;/code>、&lt;code>Gas Limit&lt;/code>和&lt;code>Gas Price&lt;/code>；而&lt;code>State Root&lt;/code>则是所有账户组成的树，包含&lt;code>Address&lt;/code>、&lt;code>Code&lt;/code>、&lt;code>Storage&lt;/code>、&lt;code>Balance&lt;/code>和&lt;code>Nonce&lt;/code>。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对&lt;code>Ethereum&lt;/code>核心技术的一些解读，智能合约的引入给区块链的应用带来了更多可能性，但仍有很多安全性、隐私性和效率问题需要考虑。针对复杂的企业级应用场景，联盟链是更好的选择，后续将会对&lt;code>Hyperledger Fabric&lt;/code>进行详尽的分析，敬请期待！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://msccs.cs.hku.hk/public/courses/2020/COMP7408A/">COMP7408 Distributed Ledger and Blockchain Technology&lt;/a>, &lt;em>Professor S.M. Yiu, HKU&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309">Udacity Blockchain Developer Nanodegree&lt;/a>, &lt;em>Udacity&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用&lt;/a>，&lt;em>肖臻，北京大学&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.ituring.com.cn/book/2434">区块链技术进阶与实战&lt;/a>，&lt;em>蔡亮 李启雷 梁秀波，浙江大学 | 趣链科技&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.zastrin.com/courses/ethereum-primer/lessons/1-5">Ethereum Architecture&lt;/a>, &lt;em>zastrin&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.toshblocks.com/solidity/complete-example-crowd-funding-smart-contract/">Learn Solidity: Complete Example: Crowd Funding Smart Contract&lt;/a>, &lt;em>TOSHBLOCKS&lt;/em>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>比特币核心技术解读</title><link>https://jpg6.com/en/2021/02/17/blockchain_bitcoin_basic/</link><pubDate>Wed, 17 Feb 2021 12:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/02/17/blockchain_bitcoin_basic/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在上一篇文章《&lt;a href="https://www.pseudoyu.com/en/2021/02/12/blockchain_basic/">区块链基础知识与关键技术&lt;/a>》里对区块链的基础知识和关键技术进行了梳理，而比特币是区块链最典型的应用，本文将对比特币核心技术进行解读，如有错漏，欢迎交流指正。&lt;/p>
&lt;h2 id="比特币系统">比特币系统&lt;/h2>
&lt;p>比特币是在 2009 年由中本聪发明的一个数字货币，主要是为了反抗中心化的银行体系，因为其精巧的系统设计和安全性，价值也在迅速提升。同时，因为它并不与真实世界的身份绑定，具备强大的匿名性，也被用于非法交易、洗钱、勒索等恶意行为，引起了一些争议。&lt;/p>
&lt;p>作为一个去中心化的区块链系统，所有人都可以访问，也可以在本地维护一个节点参与到比特币网络中，下文也会应用&lt;code>Bitcoin Core&lt;/code>客户端在本地维护一个节点。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/bitcoin_network_nodes.png" alt="bitcoin_network_nodes">&lt;/p>
&lt;p>节点分为全节点和轻节点两种，早期所有的节点都是全节点，但随着数据量越来越大，运行在手机或平板等设备上的比特币客户端不需要存储整个区块链的信息，称为&lt;code>Simplified Payment Verification(SPV)&lt;/code>节点，也叫轻节点。&lt;/p>
&lt;p>&lt;code>Bitcoin Core&lt;/code>客户端就是一个全节点，下文也会具体讲述。全节点一直在线，维护着完整的区块链信息；因为其内存里维护着完整的&lt;code>UTXO&lt;/code>集合，所以通过验证整个区块链的区块和交易信息（从创世区块到最新区块）来验证交易的合法性；也会决定哪些交易会被打包到区块中；验证交易即挖矿，可以决定沿着哪条链继续挖，在出现等长的分叉时，也会选择哪一个分叉；同时监听别的矿工挖出来的区块，验证合法性。&lt;/p>
&lt;p>轻节点不需要一直在线，也不需要保留整个区块链（数据量庞大），只需要保留每个区块的块头；且只需要保存与自己有关的区块，而不需要保存链上全部交易；因为并没有保存全部信息，无法验证大多数交易的合法性和网上发布的新区块的正确性，只能检验与自己有关的区块；可以通过&lt;code>Merkle Proof&lt;/code>验证一笔交易存在，但不能确认一笔交易不存在；可以验证挖矿的难度，因为保存在块头中。&lt;/p>
&lt;blockquote>
&lt;p>下面通过一个示例来讲解一下全节点和轻节点的交易验证方式。&lt;/p>
&lt;/blockquote>
&lt;p>假如要验证一个位于 block 300,000 的交易 T，全节点会查验全部 300,000 个区块（直到创世区块），建立一个完整&lt;code>UTXO&lt;/code>的数据库来确保这个交易没有被花费；而轻节点则会通过&lt;code>Merkle Path&lt;/code>来链接所有和交易 T 相关的区块，然后等待 300,001 至 300,006 个区块来进行确认，从而验证交易的合法性。&lt;/p>
&lt;h3 id="区块链结构">区块链结构&lt;/h3>
&lt;p>区块链是由顺序链接起来的区块组成的一种数据结构，可以存于单文件或者数据库中，&lt;code>Bitcoin Client&lt;/code>使用 Google 的&lt;code>LevelDB&lt;/code>数据库存储数据。每一个区块都指向前一个区块，任何一个区块进行了修改的话，其所有后面的区块都会受到影响，所以想要篡改一个区块的话需要同时篡改之后的所有区块，这需要大量的算力，往往成本大于收益，因此极大地保障了安全性。&lt;/p>
&lt;p>区块链结构包含区块&lt;code>Block Size (4 bytes)&lt;/code>、&lt;code>Block Header&lt;/code>、&lt;code>Transaction Counter(1-9 bytes)&lt;/code>和&lt;code>Transaction&lt;/code>几个核心组成部分。&lt;/p>
&lt;p>区块链的块头大小为 80 bytes，存储着&lt;code>Version(4 bytes)&lt;/code>、&lt;code>Previous Block Hash(32 bytes)&lt;/code>、&lt;code>Merkle Tree Root(32 bytes)&lt;/code>、&lt;code>Timestamp(4 bytes)&lt;/code>、&lt;code>Difficulty Target(4 bytes)&lt;/code>和&lt;code>Nonce(4 bytes)&lt;/code>。&lt;/p>
&lt;p>每一个区块的哈希值通过对区块头进行两次哈希运算，即&lt;code>SHA256(SHA256(Block Header))&lt;/code>，并不存在区块链结构中，而是由每个节点接收到区块后计算得到，是独一无二的；此外，&lt;code>Block Height&lt;/code>也可以作为区块的标识符。&lt;/p>
&lt;h4 id="merkle-tree">Merkle Tree&lt;/h4>
&lt;p>&lt;code>Merkle Tree&lt;/code>默克尔树是区块链中很重要的一个数据结构，主要通过哈希算法来验证较大数据集（也是通过双重哈希的方式&lt;code>SHA256(SHA256(Block Header))&lt;/code>），结构如下图所示：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/merkle_tree_example.png" alt="merkle_tree_example">&lt;/p>
&lt;p>通过&lt;code>Merkle Tree&lt;/code>的方式可以很快地验证一个交易存在于某个区块中（算法复杂度为&lt;code>LogN&lt;/code>），例如，如果要验证一个交易 K 存在于区块中，只需要访问很少的节点&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/merkle_proof_example.png" alt="merkle_proof_example">&lt;/p>
&lt;p>因为比特币网络中存在大量交易，这种方式能够极大提高效率，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/merkle_proof_efficiency.png" alt="merkle_proof_efficiency">&lt;/p>
&lt;p>因为轻节点（例如手机上的比特币钱包）不保存整个区块链数据，通过&lt;code>Merkle Tree&lt;/code>结构可以很方便地查找交易，轻节点会构造一个&lt;code>Bloom filter&lt;/code>布隆过滤器来得到与自身相关的交易：&lt;/p>
&lt;ol>
&lt;li>首先，初始化布隆过滤器为空值，获取钱包中的所有地址，创建一个检索模式来匹配与这个交易输出相关的地址，将检索模式加入布隆过滤器；&lt;/li>
&lt;li>然后布隆过滤器被发送至各个节点（通过&lt;code>filterload&lt;/code>消息）；&lt;/li>
&lt;li>节点收到后会发送一个包含符合条件的区块头和符合交易的&lt;code>Merkle Path&lt;/code>的&lt;code>merkleblock&lt;/code>消息和一个包含过滤结果的&lt;code>tx&lt;/code>消息。&lt;/li>
&lt;/ol>
&lt;p>过程中，轻节点会使用&lt;code>Merkle Path&lt;/code>来链接交易与区块，并通过区块头来组成区块链，从而能够验证交易存在于区块链中。&lt;/p>
&lt;p>使用布隆过滤器会返回符合筛选条件的结果，也会存在着一些误报，因此返回了很多不相关的结果，也能够在轻节点向其他节点请求相关地址时保护了隐私性。&lt;/p>
&lt;h3 id="比特币网络">比特币网络&lt;/h3>
&lt;p>比特币系统运行在一个 P2P 点对点网络上，节点之间是平等的，没有身份、权限的区别；没有中心化的服务器，网络也没有层级区分。&lt;/p>
&lt;p>每个节点都要维护一个等待上链的交易的集合，每个区块大小为 1M，因此需要几秒才能够穿到大多数的节点。假设一个节点监听到了 A-&amp;gt;B 的交易，会将其写入集合，如果同时又发现了一个 A-&amp;gt;C 的双花攻击，则不会再写入，而如果监听到同样一笔 A-&amp;gt;B 的交易或者同一个币来源的 A-&amp;gt;C 的交易，则会将该集合中 A-&amp;gt;B 的交易删除。&lt;/p>
&lt;h3 id="比特币共识协议">比特币共识协议&lt;/h3>
&lt;p>比特币作为一个人人都可以参与的开发系统，需要解决恶意节点的威胁，解决思路为工作量证明机制，也就是算力投票机制，当产生一笔新交易，广播新的数据记录，全网执行共识算法，即矿工挖矿来验证记录，即求解随机数，率先解出难题的矿工获得记账权，产生新区块，然后对外广播新区块，其他节点验证通过后加至主链。&lt;/p>
&lt;h3 id="钱包">钱包&lt;/h3>
&lt;p>作为一个数字货币系统，比特币有自己的钱包系统，主要由私钥、公钥和钱包地址三个部分组成。&lt;/p>
&lt;blockquote>
&lt;p>生成钱包地址的过程如下：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>采用&lt;code>ECDSA(Elliptic Curve Digital Signature Algorithm)&lt;/code>椭圆曲线算法，利用私钥生成对应的公钥&lt;/li>
&lt;li>公钥很长且难以输入和记忆，因此再通过&lt;code>SHA256&lt;/code>和&lt;code>RIPEMD160&lt;/code>算法得到一个公钥哈希值&lt;/li>
&lt;li>最后再用&lt;code>Base58Check&lt;/code>进行处理，得到一个可读性较强的钱包地址&lt;/li>
&lt;/ol>
&lt;h3 id="交易过程">交易过程&lt;/h3>
&lt;p>有了钱包（和资产）后，就可以开始交易了。我们来通过一个典型的比特币交易来理解这一流程：&lt;/p>
&lt;p>A 和 B 都拥有一个比特币钱包地址（可以用 Bitcoin Client 生成，原理如上），假设 A 要给 B 转账 5 个 BTC，A 需要得到 B 的钱包地址，然后用自己的私钥对&lt;code>A-&amp;gt;B转账5个BTC&lt;/code>这笔交易签名（因为 A 的私钥仅有自己知道，所以拥有私钥则是拥有钱包资产的归属权）；然后发布这笔交易，在比特币系统中发起交易需要支付小额矿工费作为交易手续费；矿工会开始验证这笔交易的合法性，得到六个确认后交易就可以被比特币账本所接受，整个验证过程大约 10 分钟。&lt;/p>
&lt;blockquote>
&lt;p>矿工为什么要消耗大量算力来验证交易呢？&lt;/p>
&lt;/blockquote>
&lt;p>矿工在验证过程中可以得到出块奖励和矿工费，出块奖励会四年递减，因此，后期主要激励是矿工费。&lt;/p>
&lt;blockquote>
&lt;p>为什么验证要 10 分钟呢？&lt;/p>
&lt;/blockquote>
&lt;p>比特币其实并不是绝对安全的，新交易容易受到一些恶意攻击，而通过控制挖矿难度把验证过程控制在 10 分钟左右则可以很大程度上阻止恶意攻击，这只是一种概率上的保证。&lt;/p>
&lt;blockquote>
&lt;p>比特币系统中怎么避免双重花费呢？&lt;/p>
&lt;/blockquote>
&lt;p>比特币采用了一种叫&lt;code>UTXO(Unspent Transaction Outputs)&lt;/code>的概念，当一个用户收到一笔 BTC 交易时，会计入&lt;code>UTXO&lt;/code>中。&lt;/p>
&lt;p>在这个示例中，A 想要给 B 转账 5 个 BTC，A 的这 5 个 BTC 可能来自于两个&lt;code>UTXO&lt;/code>(2 BTC + 3 BTC)，因此 A 在转账给 B 时，矿工需要检验的是这两笔&lt;code>UTXO&lt;/code>在这笔交易之前有没有被花掉，如果检测已经被花费了，则交易不合法。&lt;/p>
&lt;p>下图很好地阐释了多笔交易的流向和&lt;code>UTXO&lt;/code>的相关概念&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/btc_utxo_example.png" alt="btc_utxo_example">&lt;/p>
&lt;p>此外，&lt;code>UTXO&lt;/code>有一个很重要的特性，不可分割，假如 A 有 20 个 BTC，他想转账 5 个 BTC 给 B，那交易会先将 20 个 BTC 作为输入，然后产生两个输出，一个向 B 转账 5 个 BTC，一个返还给 A 剩下的 15 个 BTC，因此，A 又拥有了一笔价值为 15 BTC 的 &lt;code>UTXO&lt;/code>；如果单个&lt;code>UTXO&lt;/code>不够支付，则可以组合多个形成输入，但总额一定要大于交易额。&lt;/p>
&lt;blockquote>
&lt;p>矿工怎么验证交易发起者有足够的余额呢？&lt;/p>
&lt;/blockquote>
&lt;p>这个问题看起来很简单，第一反应是像支付宝这样查询一下余额是否足够就可以。但比特币是一种基于交易的账本模式，并没有帐户概念，因此并不能直接查询余额，要想知道一个帐户的剩余资产，则需要回顾以前所有的交易，并且找到所有&lt;code>UTXO&lt;/code>并相加。&lt;/p>
&lt;h3 id="交易模型">交易模型&lt;/h3>
&lt;blockquote>
&lt;p>上文讲了一个交易是怎么发生的，那比特币交易由哪些部分组成呢？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/blockchain_bitcoin_script_detail.png" alt="blockchain_bitcoin_script_detail">&lt;/p>
&lt;p>如图，最开始的部分是&lt;code>Version&lt;/code>，表示版本。&lt;/p>
&lt;p>然后是 Input 相关的信息：&lt;code>Input Count&lt;/code>表示数量，&lt;code>Input Info&lt;/code>表示输入的内容，也就是&lt;code>Unlocking Script&lt;/code>，主要用于核对输入来源、输入是否可用以及其他输入的细节。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Previous output hash&lt;/code> - 所有输入都能追溯回一个输出，这指向包含将在该输入中花费的 UTXO，该 UTXO 的哈希值在这里以相反的顺序保存&lt;/li>
&lt;li>&lt;code>Previous output index&lt;/code> - 一个交易可以有多个由它们的索引号引用的&lt;code>UTXO&lt;/code>，第一个索引是 0&lt;/li>
&lt;li>&lt;code>Unlocking Script Size&lt;/code> - &lt;code>Unlocking Script&lt;/code>的字节大小&lt;/li>
&lt;li>&lt;code>Unlocking Script&lt;/code> - 满足&lt;code>UTXO Unlocking Script&lt;/code>的哈希&lt;/li>
&lt;li>&lt;code>Sequence Number&lt;/code> - 默认为&lt;code>ffffffff&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>接着是 Output 相关的信息，&lt;code>Output Count&lt;/code>表示数量，&lt;code>Output Info&lt;/code>表示输出的内容，也就是&lt;code>Locking Script&lt;/code>,主要用于记录输出了多少比特币，未来支出的条件以及输出的细节。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Amount&lt;/code> - 以 Satoshis(最小的比特币单位)表示的输出比特币数量，10^8 Satoshis = 1 比特币&lt;/li>
&lt;li>&lt;code>Locking Script Size&lt;/code> - 这是 Locking Script 的字节大小&lt;/li>
&lt;li>&lt;code>Locking Script&lt;/code> - 这是 Locking Script 的哈希，它指定了使用此输出必须满足的条件&lt;/li>
&lt;/ul>
&lt;p>最后是&lt;code>Locktime&lt;/code>，表示一个交易可以被最早添加到区块链的时间/块，如果小于 500 million 的话直接读取块高度，而如果大于 500 million 则读取时间戳。&lt;/p>
&lt;h3 id="比特币脚本">比特币脚本&lt;/h3>
&lt;p>在交易中有提到&lt;code>Unlocking script&lt;/code>和&lt;code>Locking script&lt;/code>，那什么是比特币脚本呢？&lt;/p>
&lt;p>比特币脚本是记录在每个交易中的指令列表，当脚本被执行时可以检验交易是否有效、比特币是否可以使用等。一个典型的脚本如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&amp;lt;sig&amp;gt; &amp;lt;pubKey&amp;gt; OP_DUP OP_HASH160 &amp;lt;pubKeyHash&amp;gt; OP_EQUALVERIFY OP_CHECKSIG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比特币脚本是基于栈从左至右执行的，使用&lt;code>Opcodes&lt;/code>对数据进行操作，在上面这个脚本语言中，&amp;lt;&amp;gt;包含的是要被推入 stack 的数据，没有&amp;lt;&amp;gt;包括、以 OP_ 为前缀的是操作符（OP 可省略），脚本也可以嵌入数据永久记录在链上（不超过 40 bytes），所记录的数据不会影响&lt;code>UTXO&lt;/code>。&lt;/p>
&lt;p>在交易中，&lt;code>&amp;lt;sig&amp;gt; &amp;lt;pubKey&amp;gt;&lt;/code>是&lt;code>Unlocking script&lt;/code>，&lt;code>OP_DUP OP_HASH160 &amp;lt;pubKeyHash&amp;gt; OP_EQUALVERIFY OP_CHECKSIG&lt;/code>部分是&lt;code>Locking script&lt;/code>。&lt;/p>
&lt;p>跟大多数编程语言相比，比特币脚本是非图灵完备的，没有循环或复杂的流程控制，执行起来很简单，不论在哪里执行结果都是确定性的，也不会保存状态，且脚本与脚本之间是相互独立的。因为以上特征，虽然比特币脚本相对安全，但没办法处理很复杂的逻辑，因此不适合用来处理一些复杂的业务，&lt;code>Ethereum&lt;/code>所提供的智能合约就在这一点上实现了创新性的突破，因此诞生了很多去中心化应用。&lt;/p>
&lt;h3 id="挖矿">挖矿&lt;/h3>
&lt;p>在上文对整个交易过程中提到了挖矿，接下来我们详细讲一下。&lt;/p>
&lt;p>有的节点为了得到出块奖励和矿工费，赚取收益，因此会对交易进行验证，称为矿工挖矿。出块奖励由&lt;code>coinbase&lt;/code>创建，每四年会递减，从 2009 年的 25 个，到现在已经减少为 6.5 个。&lt;/p>
&lt;p>挖矿其实是一个不断尝试随机数以达到某个设定目标值的过程，如小于某个 target 值，这个难度是人为设置来调整验证时间、提升安全性的，而不是解决数学难题。&lt;/p>
&lt;p>矿工们会不断尝试这个值，成功率很低，但是尝试次数可以很多，因此，算力强的节点有成比例的优势，更容易解出难题。&lt;/p>
&lt;blockquote>
&lt;p>那挖矿难度为什么要进行调整呢？&lt;/p>
&lt;/blockquote>
&lt;p>因为在比特币系统中，出块时间太短容易出现分叉，如果分叉过多则会影响系统达成共识，危害系统安全性。比特币系统通过难度调整把出块速度稳定在 10 分钟左右，从而防止交易被算改。&lt;/p>
&lt;blockquote>
&lt;p>挖矿难度是如何调整的呢？&lt;/p>
&lt;/blockquote>
&lt;p>系统会在每产生 2016 个区块时（约两周）调整一次目标阈值，存在块头中，全网所有节点需要遵从新的难度进行挖矿，如果恶意节点不调整代码中的 target 的话，诚实的矿工则不会认可&lt;/p>
&lt;p>目标阈值 = 目标阈值 * (产生 2016 个区块的实际时间 / 产生 2016 个区块的预计时间)&lt;/p>
&lt;p>比特币诞生之初，矿工很少，挖矿难度也较低，大多都是用家用电脑（CPU）直接挖矿；随着越来越多的人参与到比特币生态中，挖矿的难度也越来越高，慢慢开始用一些算力较强的 GPU 进行挖矿，也有一些专用的&lt;code>ASIC(Application Specific Integrated circuit)&lt;/code>专用挖矿芯片以及矿机随着市场需求逐步诞生；而现在也出现了很多大型矿池，集合了全网大量算力进行集中挖矿。&lt;/p>
&lt;p>在这种大型矿池系统中，&lt;code>Pool Manager&lt;/code>担任了全节点的作用，而集合的大量矿工会一起计算哈希值，最后通过工作量证明机制来分配收益。但算力过于集中容易产生一些中心化风险，如某个大型矿池达到了全网 51% 以上算力的话就可以对交易进行回滚或者对某些交易进行抵制等。&lt;/p>
&lt;h3 id="分叉">分叉&lt;/h3>
&lt;p>比特币系统中，也会有未达成一致性意见的情况发生，称为分叉。分叉是主要分为两种类型，一种是状态分叉，往往是一些节点故意进行的；另一种称为协议分叉，也就是说对比特币协议产生了一些分歧。&lt;/p>
&lt;p>协议分叉又可以分为两种类型，一种叫硬分叉，也就是对于协议的部分内容产生了不可兼容的修改，比如将比特币的块大小由 1M 调整为 4M，这种分叉方式是永久的，从某个节点开始形成了两条平行发展的链，比如&lt;code>Bitcoin Classic&lt;/code>，形成了两种币。&lt;/p>
&lt;p>另一种则叫软分叉，比如还是调整比特币的块大小，但是从 1M 调整为 0.5M，这样调整后，就会出现新节点挖小区块，旧的节点挖大的区块的情况，软分叉是非永久性的，比较典型的例子是对 coinbase 的内容进行修改以及&lt;code>P2SH(Pay to Script Hash)&lt;/code>产生的分叉。&lt;/p>
&lt;h2 id="bitcoin-core-客户端">Bitcoin Core 客户端&lt;/h2>
&lt;p>&lt;code>Bitcoin Core&lt;/code>是比特币的实现，又被称为&lt;code>Bitcoin-QT&lt;/code>或&lt;code>Satoshi-client&lt;/code>，可以通过这个客户端连接至比特币网络、验证区块链、发送与接收比特币等。有&lt;code>Mainnet&lt;/code>、&lt;code>Testnet&lt;/code>和&lt;code>Regnet&lt;/code>三个网络，可以进行切换。&lt;/p>
&lt;p>提供了一个&lt;code>Debug Console&lt;/code>来与比特币区块链直接进行交互，常见操作如下：&lt;/p>
&lt;blockquote>
&lt;p>Blockchain&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getblockchaininfo: 返回有关区块链处理的各种状态信息&lt;/li>
&lt;li>getblockcount: 返回区块链中的块数&lt;/li>
&lt;li>verifychain: 验证区块链数据库&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Hash&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getblockhash: 返回所提供的区块哈希值&lt;/li>
&lt;li>getnetworkhashps: 基于指定数量的最近块，返回每秒网络哈希数&lt;/li>
&lt;li>getbestblockhash: 返回最佳块的哈希值&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Blocks&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getblock: 返回块信息的详细信息&lt;/li>
&lt;li>getblockheader: 返回有关区块头信息&lt;/li>
&lt;li>generate: 立即将指定数量的块挖矿到钱包中的一个地址&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Wallet&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getwalletinfo: 返回一个对象，该对象包含有关钱包状态的各种信息&lt;/li>
&lt;li>listwallets: 返回当前加载的钱包列表&lt;/li>
&lt;li>walletpassphrasechange: 更改钱包密码&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Mempool&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getmempoolinfo: 返回内存池活动状态的详细信息&lt;/li>
&lt;li>getrawmempool: 返回内存池中的所有交易详细信息&lt;/li>
&lt;li>getmempoolentry: 返回给定交易的内存池数据&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Transaction&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getchaintxstats: 计算关于链中交易总数和速率的统计数据&lt;/li>
&lt;li>getrawtransaction: 返回原始交易数据&lt;/li>
&lt;li>listtransactions: 返回给定帐户的交易列表&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Signature&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>signrawtransaction: 签署原始交易的输入&lt;/li>
&lt;li>signmessage: 使用地址的私钥对信息进行签名&lt;/li>
&lt;li>dumpprivkey: 获取私钥&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Network&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getnetworkinfo: 返回 P2P 网络的状态信息&lt;/li>
&lt;li>getpeerinfo: 返回每个连接网络节点的数据&lt;/li>
&lt;li>getconnectioncount: 返回节点的连接数&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Mining&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>getmininginfo: 返回包含挖掘相关信息的对象&lt;/li>
&lt;li>getblocktemplate: 返回构造块所需的数据&lt;/li>
&lt;li>prioritisetransaction: 以较高或较低的优先级接受交易进入挖掘的块&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对比特币核心技术的一些解读，主要从它的基础原理和数据模型层面进行了一些深入了解，通过对比特币的学习，能够很好地理解区块链的设计理念和运行机制，接下来将会对被称为区块链 2.0 的以太坊进行学习和分析，敬请期待！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://msccs.cs.hku.hk/public/courses/2020/COMP7408A/">COMP7408 Distributed Ledger and Blockchain Technology&lt;/a>, &lt;em>Professor S.M. Yiu, HKU&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309">Udacity Blockchain Developer Nanodegree&lt;/a>, &lt;em>Udacity&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用&lt;/a>，&lt;em>肖臻，北京大学&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.ituring.com.cn/book/2434">区块链技术进阶与实战&lt;/a>，&lt;em>蔡亮 李启雷 梁秀波，浙江大学 | 趣链科技&lt;/em>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>区块链基础知识与关键技术</title><link>https://jpg6.com/en/2021/02/12/blockchain_basic/</link><pubDate>Fri, 12 Feb 2021 12:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/02/12/blockchain_basic/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在上 HKU 的&lt;code>&amp;lt;COMP7408 Distributed Ledger and Blockchain Technology&amp;gt;&lt;/code>课程，对区块链的基础概念有了更系统的认知，结合之前上过的北京大学肖臻老师《&lt;a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用&lt;/a>》公开课，深知区块链知识体系之庞大，打算更新系列文章对区块链、比特币、以太坊等进行系统的知识梳理，如有错漏，欢迎交流指正。&lt;/p>
&lt;h2 id="区块链中的密码学原理">区块链中的密码学原理&lt;/h2>
&lt;p>区块链和密码学紧密相关，如比特币采用的核心的公私钥加密技术、数字签名、哈希等，包括很多共识算法也是基于复杂的密码学概念，因此，在开始学习区块链之前，要先了解几个核心的密码学概念，从而能够更深入理解其在区块链体系中的应用。&lt;/p>
&lt;h3 id="哈希函数">哈希函数&lt;/h3>
&lt;p>哈希函数是把一个任意长度的源数据经过一系列算法变成一个固定长度输出值的方法，概念很简单，但其具备的几个特性使它被各个领域广泛应用。&lt;/p>
&lt;p>可以访问这个 &lt;a href="https://andersbrownworth.com/blockchain/hash">Demo&lt;/a> 体验一下哈希函数的工作原理（以&lt;code>SHA256&lt;/code>为例）！&lt;/p>
&lt;p>第一个特性是单向不可逆性。将一个输入 x 进行哈希运算得到值 H(x)，这一过程很容易，但是如果给定一个值 H(x)，几乎不可能逆推得到 x 的取值，这一特性很好地保护了源数据。&lt;/p>
&lt;p>第二个特性是抗碰撞性。给定一个值 x 和另一个值 y，如果 x 不等于 y，那 H(x) 几乎不可能等于 H(y)，并非完全不可能，但是几率非常低，因此，一个数据的 Hash 值几乎是唯一的，这可以很好地用于身份验证等场景。&lt;/p>
&lt;p>第三个特性是哈希计算不可预测。很难根据现有条件推导出哈希值，但是很容易检验是否正确，这一机制主要应用于&lt;code>PoW&lt;/code>挖矿机制中。&lt;/p>
&lt;h3 id="加密解密">加密/解密&lt;/h3>
&lt;p>加密机制主要分为对称加密和非对称加密两类。&lt;/p>
&lt;p>对称加密机制是两方用同一个密钥来进行信息的加密和解密，很方便，效率也很高，但是密钥的分发存在很大的风险，如果通过网络等方式进行分发，很容易会出现密钥泄漏，从而导致信息泄漏。&lt;/p>
&lt;p>非对称加密机制主要指的是公私钥加密机制，每个人通过算法生成一对密钥，称为公钥和私钥，如果 A 想发送一个信息给 B，可以用 B 的公钥对文件进行加密，将加密后的信息发给 B，这个过程中，即使信息被截获或出现泄漏，也不会暴露源文件，所以可以用任何方式进行传播，当 B 收到加密文件后，用自己的私钥进行解密，从而获取文件内容。B 的私钥没有经过任何渠道进行传播，仅自己知道，所以具备极高的安全性。&lt;/p>
&lt;p>在现实应用中，对很大的文件进行非对称加密效率较低，所以一般采用一种组合机制：假设 A 想发送一个大文件 D 给 B，则先将文件 D 用一个密钥 K 进行对称加密，再用 B 的公钥对密钥 K 进行非对称加密。A 将加密后的密钥 K 和文件 D 发送给 B，期间即使被截获或泄漏，因为没有 B 的私钥，所以无法得到密钥 K，也就无法访问文件 D。B 收到加密后的文件和密钥后，则先用自己的私钥解密得到密钥 K，再用密钥 K 对文件 D 进行解密，从而获取文件内容。&lt;/p>
&lt;h3 id="数字签名">数字签名&lt;/h3>
&lt;p>数字签名是非对称加密机制的另一种用法，上文讲到每个人拥有一对生成的公钥和私钥，在加密/解密应用中，是用公钥进行加密，用私钥进行解密，而数字签名机制刚好相反，假设一个文件持有者用自己的私钥对文件进行加密，其他人可以用他的公钥进行解密，如果得到结果则可以证明文件的归属权。&lt;/p>
&lt;p>数字签名机制最典型的应用就是比特币区块链网络中，用私钥证明自己对比特币的归属权，对交易进行签名，其他人则可以用公钥来验证交易是否合法，整个过程无需暴露自己的私钥，保障了资产的安全。&lt;/p>
&lt;h2 id="区块链基本概念">区块链基本概念&lt;/h2>
&lt;p>随着历史的发展，人们的记账方式从单式记账，发展到复式记账、数字记账，最后到分布式记账，因为传统的中心化数字记账则往往依赖于某个或某些组织的可信度，存在一些信任风险，而区块链技术本质上就是一种分布式账本技术，一群人共同维护着一个去中心化的数据库，通过共识机制来共同记账。区块链很容易追溯历史记录，而因为去中心化信任机制的存在，也几乎不可篡改（或者是篡改的成本远远大于收益）。&lt;/p>
&lt;p>相比于传统的数据库，区块链只有增加和查询两种操作，所有的操作历史记录都会准确地保存在账本中且不可变，具备很高的透明度和安全性，当然，代价就是所有节点必须通过一些机制达成共识（因此效率较低，不适合实时性的操作），而且因为每个节点都要永久保存历史记录，会占据很大的存储空间。&lt;/p>
&lt;h3 id="应用场景">应用场景&lt;/h3>
&lt;blockquote>
&lt;p>那怎么判断一个公司/业务是否适合采用区块链作为解决方案呢？&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>是否需要数据库？&lt;/li>
&lt;li>是否需要共享写入&lt;/li>
&lt;li>是否需要多方达成信任？&lt;/li>
&lt;li>是否能够脱离第三方机构运作？&lt;/li>
&lt;li>是否能够脱离权限机制运作？&lt;/li>
&lt;/ol>
&lt;p>区块链作为一个分布式数据库，主要做的还是信息存储的工作，只是通过其各类机制，在不需要第三方机构介入的前提下让有共同需求但并不互相信任的实体之间也能以相对较低的代价达成一致，从而满足需求，除此之外，系统还有加密认证、高透明度等特性，能够满足一些业务需求。而如果所涉及到的数据不能公开/数据量非常大/需要外部服务来存储数据，或者是业务规则经常发生变化，那区块链就并不适合作为其解决方案。&lt;/p>
&lt;blockquote>
&lt;p>因此，在以上的标准下，有如下一些需求很适合区块链作为其解决方案：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>需要建立一个共享的数据库，且有多方参与&lt;/li>
&lt;li>参与业务的各方没有建立信任&lt;/li>
&lt;li>现有业务信任一个或者多个信任机构&lt;/li>
&lt;li>现有业务有加密认证的业务需求&lt;/li>
&lt;li>数据需要集成到不同的数据库且业务数字化和一致性的需求迫切&lt;/li>
&lt;li>对于系统参与者有统一的规则&lt;/li>
&lt;li>多方决策是透明的&lt;/li>
&lt;li>需要客观的、不可改变的记录&lt;/li>
&lt;li>非实时性处理业务&lt;/li>
&lt;/ol>
&lt;p>但其实在很多应用场景里，企业需要在去中心化和效率之间做一些权衡，且有时候很多复杂的业务对透明度、规则都有不同的需求，因此，基于复杂的商业化需求，也有“联盟链”这样的解决方案，能够更好地与现有的系统结合，以满足业务需求。&lt;/p>
&lt;h2 id="区块链类型">区块链类型&lt;/h2>
&lt;p>区块链也有不同的类型，主要有私有链、公有链、联盟链三种。&lt;/p>
&lt;p>私有链主要是应用于某一个特定领域或者只是在某一个企业运行的区块链，主要是用于解决信任问题，如跨部门协作等场景，一般不需要外部机构来访问数据。&lt;/p>
&lt;p>公有链则是公开的交易，往往用于一些需要交易/数据公开的业务，如认证、溯源、金融等场景，比如比特币、以太坊和&lt;code>EOS&lt;/code>等。&lt;/p>
&lt;p>联盟链最大的特征是节点需要验证权限才能参与到区块链网络中，而认证一般都是与其现实角色所关联的，因此，联盟链也具有中心化的属性，但效率、拓展性和交易隐私则大大提升了，满足了企业级应用的需求，其中最广泛使用的就是&lt;code>Hyperledger Fabric&lt;/code>了。值得一提的是，联盟链往往不需要代币来作为激励，而是将参与的各个节点作为记账节点，通过区块链机制实现跨部门之间的业务协同所带来的经济效益作为内部激励，是一种更健康、更符合企业应用的方式。&lt;/p>
&lt;p>长期来看的话，公有链和联盟链在技术上也会逐渐趋于融合，即使是同一个业务，可以将需要信任的数据放在共有链上，而一些行业数据和私有的数据则可以放在联盟链上，通过权限管理来保障交易隐私。&lt;/p>
&lt;h2 id="区块链基本框架">区块链基本框架&lt;/h2>
&lt;blockquote>
&lt;p>那一个区块链究竟由哪些部分组成呢？&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>区块&lt;/li>
&lt;li>区块链&lt;/li>
&lt;li>P2P 网络&lt;/li>
&lt;li>共识机制&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ol>
&lt;h3 id="区块">区块&lt;/h3>
&lt;p>区块链就是由一个个区块组成的生态系统，每一个区块中包含了前一个区块链的哈希值、时间戳、&lt;code>Merkle Root&lt;/code>、&lt;code>Nonce&lt;/code>以及区块数据几个部分，比特币的区块大小为 1 MB。可以访问这个 &lt;a href="https://andersbrownworth.com/blockchain/block">Demo&lt;/a> 来体验一下一个区块的生成过程。&lt;/p>
&lt;p>因为每个区块都包含前一个区块的哈希值，根据前文所述的哈希性质，哪怕是极其微小的改变哈希值也会截然不同，因此很容易检测某个区块是否被篡改；Nonce 值则主要是用于调整挖矿难度，可以把时间控制在 10 分钟左右，以保障安全性。&lt;/p>
&lt;h3 id="区块链">区块链&lt;/h3>
&lt;p>所有的区块串联起来就形成了区块链，是一个存储着网络中所有交易历史记录的账本，因为每一个区块都包含着上一个区块的哈希信息（比如比特币系统是将上一个区块的块头取两次哈希），因此如果有交易发生变化则会造成区块链断裂，有一个小 &lt;a href="https://andersbrownworth.com/blockchain/blockchain">Demo&lt;/a> 很好地演示了这一过程，大家可以体验一下！&lt;/p>
&lt;h3 id="p2p-网络">P2P 网络&lt;/h3>
&lt;p>P2P 网络是用于不同用户之间共享信息和资源的一种分布式网络，是一种分布式网络，网络中的每个人都能够得到一份信息备份，而且都有访问权限；而中心化网络是所有人都连接至一个（或一组）中心化网络；去中心化网络是有多个这样的中心网络，但没有一个单点网络可以拥有所有的信息。下图很好地解释了它们之间的区别：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/blockchain_network.png" alt="blockchain_network">&lt;/p>
&lt;h3 id="共识机制">共识机制&lt;/h3>
&lt;p>区块链网络是由多个网络节点组成的，其中每个节点都存有一份信息备份，那它们是如何对交易达成一致的呢？也就是说，它们作为独立的节点，需要有一种机制来保障互相信任，这就是共识机制。&lt;/p>
&lt;p>常用的共识机制有&lt;code>PoW(Proof of Work)&lt;/code>工作量证明，&lt;code>PoS(Proof of Stake)&lt;/code>权益证明，&lt;code>DPoS(Delegated Proof of Stake&lt;/code>委任权益证明，&lt;code>DBFT(Delegated Byzantine Fault Tolerance)&lt;/code>等。&lt;/p>
&lt;p>比特币/以太坊主要采用的是工作量证明机制，通过算力比拼来增加恶意节点的作恶成本。通过动态调整挖矿的难度来让一笔交易时间控制在 10 分钟左右（6 个确认），但随着比特币挖矿越来越火热，消耗资源越来越多，对环境造成破坏；有些矿池拥有大量资源，也会造成一些中心化的风险。&lt;/p>
&lt;p>权益证明机制则是通过权益（一般是代币）持有者进行投票来达成共识。这种机制不需要像工作量证明一样进行大量的算力比拼，但是也有一些风险，称为&lt;code>Nothing at Stake&lt;/code>问题，很多权益持有者会在所有区块都投注并从中获利。为了解决这个问题，系统设置了一些规则，如对同时在多个链创建区块的用户/在错误链上创建区块的用户设置一些惩罚机制。目前以太坊正在向这种共识机制转变。&lt;/p>
&lt;p>&lt;code>EOS&lt;/code>则采用了委任权益证明，选出一些代表性的节点来进行投票，这种方式目的是优化社区投票的效率和结果，但带来了一些中心化的风险。&lt;/p>
&lt;p>&lt;code>DBFT&lt;/code>共识机制则是通过对节点分配不同的角色来达成共识，这样可以很大程度降低开销和避免分叉，但是也有核心角色作恶的风险。&lt;/p>
&lt;h2 id="区块链安全与隐私">区块链安全与隐私&lt;/h2>
&lt;h3 id="安全">安全&lt;/h3>
&lt;p>区块链作为一个较新的技术，也存在很多安全隐患，如对数字货币交易所的攻击、智能合约漏洞、对共识协议的攻击、对网络流量（互联网 ISP）的攻击以及上传恶意数据等。比较著名的案例有 Mt.Gox 事件、以太坊 DAO 事件等，因此，对区块链的安全风险也是区块链的重要研究方向。&lt;/p>
&lt;p>可以从协议、加密方案、应用、程序开发和系统等角度进行风险分析，提高区块链应用的安全性。例如在以太坊区块链中，可以对&lt;code>Solidity&lt;/code>编程语言、&lt;code>EVM&lt;/code>和区块链本身进行一些分析。&lt;/p>
&lt;p>如智能合约中的一种叫低成本攻击的方式，就是通过识别以太坊网络中较低&lt;code>Gas&lt;/code>费用的操作，重复执行以破坏整个网络。&lt;/p>
&lt;p>对于安全问题，构建一个通用的代码检测器来检查恶意代码将会是一个更通用的解决方案。&lt;/p>
&lt;h3 id="隐私">隐私&lt;/h3>
&lt;p>在讲区块链概念的时候，提到了它很重要的一个特征，隐私性。也就是说，所有人都能看到链上的交易细节和历史记录，这一特性主要应用在食品、药物等供应链环节，但是对于一些金融场景，如个人账户余额、交易信息，则容易造成一些隐私风险。&lt;/p>
&lt;blockquote>
&lt;p>那有哪些技术能够应用于这些存在高价值、敏感信息的隐私保护呢？&lt;/p>
&lt;/blockquote>
&lt;p>硬件层面，可以采用可信的执行环境，采用一些安全硬件，如&lt;code>Intel SGX&lt;/code>，很大程度保障了隐私；网络可以采用多路径转发以避免从节点的 ip 地址推算出真实身份。&lt;/p>
&lt;p>在技术层面，混币技术可以把很多交易进行一些混合，这样不容易找出对应的交易发送方和接收方；盲签技术可以保障第三方机构不能将参与交易的双方联系起来；环签用于保障交易签名的匿名性；零知识证明则可以应用于一方（证明者）向另一方（验证者）证明一个陈述是正确的，而无需透露除该陈述是正确的以外的人和信息；同态加密可以保护原数据，给定 E(x)和 E(y)，可以很容易计算出某些关于 x, y 的加密函数值（同态运算）；基于属性的加密（&lt;code>Attribute-based Encryption, ABE&lt;/code>）则为各个节点添加一些属性/角色，实现权限控制，从而保护隐私。&lt;/p>
&lt;p>值得注意的是，即使一笔交易生成多个 inputs 和 outputs，这些 inputs 和 outputs 的地址也可能被人关联；除此之外，地址账户和现实世界中的真实身份也可能产生关联。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上就是对区块链基础知识的一些梳理，主要从概念和原理层面进行了一些学习，后续还会更新对比特币、以太坊、&lt;code>Hyperledger Fabric&lt;/code>等典型应用的分析与思考，并对 IPFS、跨链、NFT 等热门技术进行一些探究，敬请期待！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://msccs.cs.hku.hk/public/courses/2020/COMP7408A/">COMP7408 Distributed Ledger and Blockchain Technology&lt;/a>, &lt;em>Professor S.M. Yiu, HKU&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.udacity.com/course/blockchain-developer-nanodegree--nd1309">Udacity Blockchain Developer Nanodegree&lt;/a>, &lt;em>Udacity&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.bilibili.com/video/BV1Vt411X7JF">区块链技术与应用&lt;/a>，&lt;em>肖臻，北京大学&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.ituring.com.cn/book/2434">区块链技术进阶与实战&lt;/a>，&lt;em>蔡亮 李启雷 梁秀波，浙江大学 | 趣链科技&lt;/em>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>用 OKR 的方式梳理自己的学习计划</title><link>https://jpg6.com/en/2021/02/11/learning_plan_okr/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0800</pubDate><guid>https://jpg6.com/en/2021/02/11/learning_plan_okr/</guid><description>&lt;h2 id="用一句话形容理想情况下自己想要达到的状态">用一句话形容理想情况下，自己想要达到的状态&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>具体目标范围&lt;/strong>：提升编程技术能力&lt;/li>
&lt;li>&lt;strong>时间周期&lt;/strong>：2 个月&lt;/li>
&lt;li>&lt;strong>描述&lt;/strong>：我想要成为一名具备过硬的编程能力的开发者，并对技术有持续学习的开放心态 &lt;em>&lt;strong>— 目标 O&lt;/strong>&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="寻找关键词拆解状态为目标">寻找关键词，拆解状态为目标&lt;/h2>
&lt;h3 id="我需要提升解决的部分">我需要提升解决的部分&lt;/h3>
&lt;ul>
&lt;li>过硬的编程能力&lt;/li>
&lt;li>持续学习的开放心态&lt;/li>
&lt;/ul>
&lt;h3 id="想要达到的程度">想要达到的程度&lt;/h3>
&lt;ul>
&lt;li>能够通过技术创造价值&lt;/li>
&lt;li>对技术有热爱和追求&lt;/li>
&lt;li>B 站 Up 主“是落拓呀”的持续学习状态&lt;/li>
&lt;/ul>
&lt;h2 id="制定每一个关键词目标的指标">制定每一个关键词/目标的指标&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>过硬的编程能力&lt;/strong>：能够满足目前香港/内地区块链公司，如蚂蚁链、腾讯区块链、杭州趣链科技等目标公司的技术面试要求，并主导完成 1-2 个完整的项目，深入技术细节 &lt;strong>— KR1&lt;/strong>&lt;/li>
&lt;li>&lt;strong>持续学习的开放心态&lt;/strong>：提升对于热门区块链技术平台（Ethereum、Hyperledger）与 Java 后端技术的理解与学习，并完成多篇原创技术博客 &lt;strong>— KR2&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="填充每一个关键指标的-todo-list">填充每一个关键指标的 todo list&lt;/h2>
&lt;h3 id="过硬的编程能力">过硬的编程能力&lt;/h3>
&lt;ol>
&lt;li>每天按照分类与难度刷 LeetCode 算法题
&lt;ol>
&lt;li>白天刷 5-10 题&lt;/li>
&lt;li>晚上按照节奏复习之前刷过的题的思路&lt;/li>
&lt;li>看关于算法框架思路的书籍，完善&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>完成区块链音乐版权项目毕业设计
&lt;ol>
&lt;li>每天至少 2 小时学习 Ethereum 智能合约编写相关&lt;/li>
&lt;li>按照项目进度进行开发&lt;/li>
&lt;li>与导师和同学定期交流，优化项目&lt;/li>
&lt;li>调研市场上区块链产品，思考运营与商业化相关&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>完成开源项目 RPC 框架的学习
&lt;ol>
&lt;li>每天至少 1 小时学习课程并实践代码&lt;/li>
&lt;li>撰写关于 RPC 框架原理和核心知识点的技术博文&lt;/li>
&lt;li>将此作为亮点项目，添加至简历并与同学进行模拟面试&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>针对 GitHub 与一些书籍的面试经验，学习掌握计算机基础面试知识，和同学每周模拟面试，现场写算法题并讲解，找到问题并提出建议&lt;/li>
&lt;li>参加春招面试，积攒面试经验查漏补缺，总结心得&lt;/li>
&lt;li>和落拓学长交流区块链学习心得和路径，寻求建议&lt;/li>
&lt;/ol>
&lt;h3 id="持续学习的开放心态">持续学习的开放心态&lt;/h3>
&lt;ol>
&lt;li>完成学校 COMP7408 区块链与分布式账本课程（共计 30 学时，每周一节 3 小时的课程）
&lt;ol>
&lt;li>每周一晚上参加线下课程&lt;/li>
&lt;li>课程第二天花 3-6 小时整理当周课程的知识点与拓展部分&lt;/li>
&lt;li>每周 2-3 小时将课程中的理论部分通过代码实践&lt;/li>
&lt;li>每天至少 3 天对之前所有知识点进行复习和查漏补缺（每次 30 分钟左右）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Udacity 区块链开发课程并整理笔记（共计约 40 学时）
&lt;ol>
&lt;li>每天至少 2 小时学习课程并实践代码&lt;/li>
&lt;li>每天至少 3 天对之前所有知识点进行复习和查漏补缺（每次 30 分钟左右）&lt;/li>
&lt;li>阶段性对课程里的项目进行详细整理，添加至简历并针对面试进行准备&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>每天学习间隙整理基础理论知识，并了解一些前沿技术和产品&lt;/li>
&lt;li>完成 CSDN 关于 Spring Boot 和其他框架的入门视频并整理&lt;/li>
&lt;li>完成 Udacity 关于 Java 开发相关框架的介绍并进行项目实践&lt;/li>
&lt;li>结合自己的理解与学习笔记，撰写针对特定技术的原创博客&lt;/li>
&lt;li>定期和目前从事区块链的同学进行交流讨论，补充项目经验至简历与面试准备&lt;/li>
&lt;/ol></description></item><item><title>COMP7801 Topic 2 Spatial Data Management</title><link>https://jpg6.com/en/2021/02/06/comp7801_topic2/</link><pubDate>Sat, 06 Feb 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/02/06/comp7801_topic2/</guid><description>&lt;h2 id="spatial-data-management">Spatial Data Management&lt;/h2>
&lt;h3 id="concepts">Concepts&lt;/h3>
&lt;p>&lt;strong>Spatial Data&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Location data
&lt;ul>
&lt;li>Check-in service&lt;/li>
&lt;li>Online Maps&lt;/li>
&lt;li>Location-based services&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Location tracking&lt;/li>
&lt;li>Traffic Data&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Spatial Databases&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>PostgreSQL with PostGIS&lt;/li>
&lt;li>Neo4J-spatial&lt;/li>
&lt;li>HadoopGIS&lt;/li>
&lt;li>Ingres&lt;/li>
&lt;li>GeoMesa&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Spatial Data Management&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Spatial Database Systems
&lt;ul>
&lt;li>Manage large collections of multidimensional objects (2D/3D)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A spatial object
&lt;ul>
&lt;li>Contains (at least) one spatial attributes that describes its location and/or geometry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A spatial relation
&lt;ul>
&lt;li>Is an organized collection of spatial objects of the same entity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="spatial-data">Spatial Data&lt;/h3>
&lt;p>&lt;strong>Representation&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Points (Cities in large-scale map)&lt;/li>
&lt;li>Extent (rivers, forest, etc.)
&lt;ul>
&lt;li>Vector (approximation by geometric objects)&lt;/li>
&lt;li>Raster (A set of pixels in the grid)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Application&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Spatial data
&lt;ul>
&lt;li>GIS&lt;/li>
&lt;li>Segemented images&lt;/li>
&lt;li>Components of CAD constructs or VLSI circuit&lt;/li>
&lt;li>Stars on the sky&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Spatial database
&lt;ul>
&lt;li>Users of mobile devices&lt;/li>
&lt;li>Geographers, life scientists&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="features-of-spatial">Features of spatial&lt;/h4>
&lt;ul>
&lt;li>Dimensionality
&lt;ul>
&lt;li>There is no total ordering of objects in the multidimensional space that preserves spatial proximity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Complex spatial extent&lt;/li>
&lt;li>No standard definitions of spatial operations and algebra&lt;/li>
&lt;/ul>
&lt;p>Relationa indexes (like B+ trees) and query processing methods (sort-merge join, hash-join) are not applicable&lt;/p>
&lt;p>Spatial access methods (SAMs) for spatial data have to be defined&lt;/p>
&lt;ul>
&lt;li>Index spatial objects&lt;/li>
&lt;li>Facilitate efficient processing of simple spatial query types (e.g. range queries)&lt;/li>
&lt;/ul>
&lt;h3 id="spatial-relationships">Spatial Relationships&lt;/h3>
&lt;p>A spatial relationship associates two objects according to their relative location and extent in space. Sometimes also called &amp;ldquo;spatial relations&amp;rdquo;.&lt;/p>
&lt;p>Can refer to a database relation which stores spatial objects.&lt;/p>
&lt;p>&lt;strong>Classification&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Topological relationships&lt;/li>
&lt;li>Distance relationships&lt;/li>
&lt;li>Directional relationships&lt;/li>
&lt;/ul>
&lt;h4 id="topological-relationships">Topological relationships&lt;/h4>
&lt;p>Each object is characterized by the space it occupies in the universe (A set of pixels).&lt;/p>
&lt;p>A set of relationsips between their boundaries and interiors&lt;/p>
&lt;ul>
&lt;li>Boundary&lt;/li>
&lt;li>Interior (some may not have, points, line segments, etc.)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>A hierarchy of relations&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>intersect (or overlaps)
&lt;ul>
&lt;li>equals&lt;/li>
&lt;li>inside&lt;/li>
&lt;li>contains&lt;/li>
&lt;li>adjacent&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>disjoint&lt;/li>
&lt;/ul>
&lt;h4 id="distance-relationships">Distance relationships&lt;/h4>
&lt;p>Associate two objects based on their geometric (Euclidean distance), and it&amp;rsquo;s usually abstracted into human mind.&lt;/p>
&lt;p>Distance relationships are expressed either explicitly or by some abstract distance class.&lt;/p>
&lt;h4 id="directional-relationships">Directional relationships&lt;/h4>
&lt;p>Associates two object based on their relative orientation according to a global reference system.&lt;/p>
&lt;h3 id="spatial-queries">Spatial Queries&lt;/h3>
&lt;p>Applied on one (or more) spatial relations to retrieve objects staisfying some spatial relationships&lt;/p>
&lt;ul>
&lt;li>Nearest neighbor query&lt;/li>
&lt;li>Spatial join&lt;/li>
&lt;li>Range query
&lt;ul>
&lt;li>Spatial selction&lt;/li>
&lt;li>window query&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="spatial-query-processing">Spatial Query Processing&lt;/h3>
&lt;p>Evaluating spatial relationships on geometric data is slow.&lt;/p>
&lt;p>A spatial object is approximated by its minimum bounding rectangle (MBR)&lt;/p>
&lt;p>&lt;strong>Process&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Filter: The MBR is tested against the query predicate&lt;/li>
&lt;li>Refinement: The exact geometry of objects that pass the filter step is tested for qualification&lt;/li>
&lt;/ol>
&lt;h3 id="spatial-access-methods-sams">Spatial Access Methods (SAMs)&lt;/h3>
&lt;p>&lt;strong>The problem of indexing spatial data&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>No dynamic access method with good theoretical worst-case guarantees for range queries&lt;/li>
&lt;/ul>
&lt;p>SAMs aim at the minimization of the expected cost.&lt;/p>
&lt;ul>
&lt;li>Indexing of multidimensional points&lt;/li>
&lt;/ul>
&lt;h4 id="point-access-methods">Point access methods&lt;/h4>
&lt;p>Divide the apce into disjoint partitions and group the points according to the regions they belong&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/point_access_methods.png" alt="point_access_methods">&lt;/p>
&lt;p>Not effective for extended objects (may need to be clipped into several parts which leads to data redundancy and affects performance negatively).&lt;/p>
&lt;p>Object clipping can be avoided if we allow the regions of object to overlap.&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/object_clipping.png" alt="object_clipping">&lt;/p>
&lt;p>&lt;strong>Optimization&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Group the objects below into 3 groups of 4 objects each such that the MBRs of the groups have the minimum overlap&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/overlap_region.png" alt="overlap_region">&lt;/p>
&lt;ul>
&lt;li>Hard optimization problem&lt;/li>
&lt;/ul>
&lt;h3 id="the-r-tree">The R-tree&lt;/h3>
&lt;p>&lt;strong>Concept&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Group object MBRs to disk blocks hierarchically&lt;/li>
&lt;li>Each group of object is a leaf of the tree&lt;/li>
&lt;li>The MBRs of the leaf nodes are grouped to form nodes at the next level&lt;/li>
&lt;li>Grouping is recursively applied at each level until a single group (the root) is formed&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/R_Tree_example.png" alt="R_Tree_example">&lt;/p>
&lt;p>&lt;strong>Elements&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Leaf node entries: &amp;lt;MBR, object-id&amp;gt;, all leaves are in same level&lt;/li>
&lt;li>Non-leaf node entries: &amp;lt;MBR, ptr&amp;gt;, pointing to entries&lt;/li>
&lt;li>Root: have at least two children&lt;/li>
&lt;li>Non-root node parameters
&lt;ul>
&lt;li>M&lt;/li>
&lt;li>m&lt;/li>
&lt;li>m &amp;lt;= M/2&lt;/li>
&lt;li>Usually m = 0.4 M&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="range-searching-using-an-r-tree">Range searching using an R-tree&lt;/h4>
&lt;p>Range_query (query W, R-tree node n)&lt;/p>
&lt;ul>
&lt;li>If n is not a leaf node
&lt;ul>
&lt;li>For each index entry e in n such that e.MBR intersects W
&lt;ul>
&lt;li>Visit node n&amp;rsquo; pointed by e.ptr&lt;/li>
&lt;li>Range_query (W, n')&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If n is a leaf
&lt;ul>
&lt;li>For each index entry e in n such that e.MBR intersects W
&lt;ul>
&lt;li>Visit object o pointed by e.object-id&lt;/li>
&lt;li>Test range query against exact geometry of o; If o intersects W, report o&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>May follow multiple paths during search&lt;/li>
&lt;li>Different search predicates are used for different realtionships with W&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/range_search.png" alt="range_search">&lt;/p>
&lt;h4 id="construction-of-the-r-tree">Construction of the R-tree&lt;/h4>
&lt;ul>
&lt;li>Dynamically constructed/maintained&lt;/li>
&lt;li>Insertions/deletions interleave with search operations
&lt;ul>
&lt;li>Insertion similiar to B+ Tree, but with special optimization algorithms
&lt;ul>
&lt;li>Choose the path where a new MBR is inserted&lt;/li>
&lt;li>Split overflow nodes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Underflows in deletions
&lt;ul>
&lt;li>Deleting the underflow leaf node&lt;/li>
&lt;li>Re-insert the remaining entries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="r-tree">R*-tree&lt;/h3>
&lt;p>Only different in the insertion algorithm (compared to R-tree), aiming at constructing a tree of high quality&lt;/p>
&lt;p>&lt;strong>A good tree&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>nodes with small MBRs&lt;/li>
&lt;li>nodes with small overlap&lt;/li>
&lt;li>nodes that look like squares&lt;/li>
&lt;li>nodes as full as possible&lt;/li>
&lt;/ul>
&lt;h3 id="optimization">Optimization&lt;/h3>
&lt;ul>
&lt;li>Minimize the area covered by an index rectangle (small area means small dead space)&lt;/li>
&lt;li>Minimize overlap between node MBRs (Minimizes the number of traversed paths)&lt;/li>
&lt;li>Minimize the margins of node MBRs (Square-like nodes, smaller number of intersections for a random query, better structure)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/margin_minimization.png" alt="margin_minimization">&lt;/p>
&lt;ul>
&lt;li>Optimize the storage utilization
&lt;ul>
&lt;li>Nodes in tree should be filled as much as possible&lt;/li>
&lt;li>Minimizes tree height and potentially decreases dead space&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Insertion heuristics (Select the path)
&lt;ul>
&lt;li>Least MBR enlargement after insertion
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/MBR_enlargement.png" alt="MBR_enlargement">&lt;/li>
&lt;li>Least MBR overlap after insertion
&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/MBR_overlap.png" alt="MBR_overlap">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="node-spliting">Node Spliting&lt;/h3>
&lt;p>&lt;strong>Determine the split axis&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>For each axis (i.e. x and y axis)
&lt;ul>
&lt;li>Sum=0;&lt;/li>
&lt;li>sort entries by the lower value, then by upper value&lt;/li>
&lt;li>for each sorting (e.g. lower value)
&lt;ul>
&lt;li>for k=m to M+1-m&lt;/li>
&lt;li>place first k entries in group A, and the remaining ones in group B&lt;/li>
&lt;li>
&lt;ul>
&lt;li>Sum = Sum + margin(A) + margin(B)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Choose axis with the minimum Sum&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Distribute entries along axis&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Along the split axis, choose the distribution with minimum overlap&lt;/li>
&lt;li>If there are multiple groupings with minimal overlap choose &amp;lt;A,B&amp;gt; such that area(A)+area(B) is minimized&lt;/li>
&lt;/ul>
&lt;h4 id="insertion-heuristics-forced-reinsert">Insertion heuristics: Forced Reinsert&lt;/h4>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/forced_reinsert.png" alt="forced_reinsert">&lt;/p>
&lt;ul>
&lt;li>Forced Reinsert
&lt;ul>
&lt;li>When R*-tree node n overflows, instead of splitting n immediately, try to see if some entries in n could possibly fit better in another node&lt;/li>
&lt;li>Find the 30% furthest entries from the center of the group&lt;/li>
&lt;li>Re-insert them to the tree (not to be repeated if another overflow occurs)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Slightly more expensive, but better tree structure:
&lt;ul>
&lt;li>less overlap&lt;/li>
&lt;li>more space is utilized (more full nodes)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="bulk-loading-r-trees">Bulk-loading R-trees&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/bulk_loading_R_tree.png" alt="bulk_loading_R_tree">&lt;/p>
&lt;p>Given a static set S of rectangles, build an R-tree that indexes S.&lt;/p>
&lt;ul>
&lt;li>Method 1: iteratively insert rectangles into an initially empty tree
&lt;ul>
&lt;li>Feature
&lt;ul>
&lt;li>tree reorganization is slow&lt;/li>
&lt;li>tree nodes are not as full as possible: more space occupied for the tree&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Method 2 (x-sorting): bulk-load the rectangles into the tree using some fast (sort or hash-based) process
&lt;ul>
&lt;li>sort rectangles using the x-coordinate of their center&lt;/li>
&lt;li>pack M consecutive rectangles in leaf nodes&lt;/li>
&lt;li>build tree bottom-up&lt;/li>
&lt;li>Feature
&lt;ul>
&lt;li>R-tree is built fast&lt;/li>
&lt;li>good space utilization&lt;/li>
&lt;li>results in leaf nodes that are have long stripes as MBRs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Method 3 (Hilbert sorting): use a space-filling curve to order the rectangles
&lt;ul>
&lt;li>much better structure, but still the nodes have large overlap&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Method 4 (sort-tile-recursive): Sort using one axis first and then groups of sqrt(n) rectangles using the other axis
&lt;ul>
&lt;li>Usually the best structure compared to other bulk-loading methods&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="k-nearest-neighbor-search">K Nearest Neighbor Search&lt;/h3>
&lt;p>Given a spatial relation R, a query object q, and a number k &amp;lt;|R|, find the k-nearest neighbors of q in R.&lt;/p>
&lt;p>We can have more than one k-NN sets (with multiple possible equidistant furthest points in them).&lt;/p>
&lt;h4 id="distance-measures-and-mbrs">Distance measures and MBRs&lt;/h4>
&lt;p>Distances between MBRs lower-bound the distances between the corresponding objects&lt;/p>
&lt;p>dist(MBR(oi),MBR(oj)) ≤ dist(oi, oj)&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/distance_mbr.png" alt="distance_mbr">&lt;/p>
&lt;p>Distances between R-tree node MBRs lower-bound the distances between the entries in them&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/min_distance_mbr.png" alt="min_distance_mbr">&lt;/p>
&lt;p>The distance between a query object q and an R-tree node MBR lower-bounds the distances between q and the objects indexed under this node&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/q_distance_mbr.png" alt="q_distance_mbr">&lt;/p>
&lt;h4 id="depth-first-nn-search-using-an-r-tree">Depth-first NN search using an R-tree&lt;/h4>
&lt;ol>
&lt;li>Start from the root and visit the node nearest to q&lt;/li>
&lt;li>Continue recursively, until a leaf node nl is visited.&lt;/li>
&lt;li>Find the NN of q in nl.&lt;/li>
&lt;li>Continue visiting other nodes after backtracking as long there are nodes closer to q than the current NN.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/DFNNS_code.png" alt="DFNNS_code">&lt;/p>
&lt;ul>
&lt;li>Large space can be pruned by avoiding visiting R-tree nodes and their sub-trees&lt;/li>
&lt;li>Should order the entries of a node in increasing distance from q to maximize potential for a good NN found fast&lt;/li>
&lt;li>Can be easily adapted for k-NN search&lt;/li>
&lt;li>Requires at most one tree path to be currently in memory – good for small memory buffers
&lt;ul>
&lt;li>Characteristic of all depth-first search algorithms&lt;/li>
&lt;li>Recall that the range search algorithm is also DF&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>However, does not visit the least possible number of nodes&lt;/li>
&lt;li>Also, not incremental – more on this later&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/DFNNS_example.png" alt="DFNNS_example">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">1. visit root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dist&lt;span class="o">(&lt;/span>q,M1&lt;span class="o">)&lt;/span>&amp;lt;dist&lt;span class="o">(&lt;/span>q,oNN&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">must visit node M1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. visit M1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dist&lt;span class="o">(&lt;/span>q,m1&lt;span class="o">)&lt;/span>&amp;lt;dist&lt;span class="o">(&lt;/span>q,oNN&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">must visit node m1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. visit m1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check a,b,c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">found new NN:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">oNN&lt;/span> &lt;span class="o">=&lt;/span> a, dist&lt;span class="o">(&lt;/span>q,oNN&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. backtrack to M1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check m2dist&lt;span class="o">(&lt;/span>q,m2&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">3&lt;/span> &amp;gt;&lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No need to visit node m2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check m3dist&lt;span class="o">(&lt;/span>q,m3&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">)&lt;/span> &amp;gt;&lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No need to visit node m3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. backtrack to root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check M2dist&lt;span class="o">(&lt;/span>q,M2&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span> &amp;lt; sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">must visit node M2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. visit M2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check m4dist&lt;span class="o">(&lt;/span>q,m4&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span> &amp;lt; sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">must visit node m4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. visit m4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check i,j,k
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">found new NN:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">oNN&lt;/span> &lt;span class="o">=&lt;/span> k, dist&lt;span class="o">(&lt;/span>q,oNN&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. backtrack to M2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check m5dist&lt;span class="o">(&lt;/span>q,m5&lt;span class="o">)&lt;/span> &amp;gt;&lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No need to visit node m5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check m6dist&lt;span class="o">(&lt;/span>q,m6&lt;span class="o">)&lt;/span> &amp;gt;&lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No need to visit node m6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. backtrack to root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">check M3dist&lt;span class="o">(&lt;/span>q,M3&lt;span class="o">)&lt;/span> &amp;gt;&lt;span class="o">=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">No need to visit node M3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. backtrack from root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Algorithm terminates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">oNN&lt;/span> &lt;span class="o">=&lt;/span>k with dist&lt;span class="o">(&lt;/span>q,oNN&lt;span class="o">)=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span> found
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="best-first-nn-search">Best-first NN search&lt;/h4>
&lt;p>Put all entries in a priority queue and always “open” the closest one, independently of the node that contains it.&lt;/p>
&lt;p>Thus the best (i.e., closest) entry is always visited first.&lt;/p>
&lt;ul>
&lt;li>A more efficient algorithm (given large enough memory)&lt;/li>
&lt;li>Optimal in the number of R-tree nodes visited for a given query q&lt;/li>
&lt;li>Uses a priority queue to organize seen entries and prioritize the next node to be visited&lt;/li>
&lt;li>Adaptable for k-NN search and incremental NN search&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/BFNNS_code.png" alt="BFNNS_code">&lt;/p>
&lt;ul>
&lt;li>In the previous example, we have visited fewer nodes compared to DF-NN algorithm
&lt;ul>
&lt;li>Only nodes whose MBR intersect the disk centered at q with radius the real NN distance are visited (see if you can you prove this)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The algorithm can be adapted for incremental NN search
&lt;ul>
&lt;li>After having found the NN can we easily (incrementally) find the next NN without starting search from the beginning?
&lt;ul>
&lt;li>put objects on the heap&lt;/li>
&lt;li>never prune, but wait until an object comes out&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The algorithm can be used for k-NN search
&lt;ul>
&lt;li>use a second heap to organize the NN found so far (same can be done for DF-NN)&lt;/li>
&lt;li>no need if we just use the inc. version of the algorithm&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;hellip; but: The heap can grow very large until the algorithm terminates&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/BFNNS_example.png" alt="BFNNS_example">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Step 1: put all entries of root on heap Q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Q&lt;/span> &lt;span class="o">=&lt;/span> M1&lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>, M2&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">))&lt;/span>, M3&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>8&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Step 2: get closest entry &lt;span class="o">(&lt;/span>top element of Q&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">M1&lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span>. Visit node M1. Put all entries of
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">visited node on heap Q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Q&lt;/span> &lt;span class="o">=&lt;/span> M2&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">))&lt;/span>, m1&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">))&lt;/span>, M3&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">))&lt;/span>, M3&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>8&lt;span class="o">))&lt;/span>, m2&lt;span class="o">(&lt;/span>3&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Step 3: get closest entry &lt;span class="o">(&lt;/span>top element of Q&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">M2&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">))&lt;/span>. Visit node M2. Put all entries of
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">visited node on heap Q
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Q&lt;/span> &lt;span class="o">=&lt;/span>m4&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">))&lt;/span>, m1&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">))&lt;/span>, M3&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">))&lt;/span>, M3&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>8&lt;span class="o">))&lt;/span>, m2&lt;span class="o">(&lt;/span>3&lt;span class="o">)&lt;/span>,  m5&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>13&lt;span class="o">))&lt;/span>, m5&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>17&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Step 4: get closest entry &lt;span class="o">(&lt;/span>top element of Q&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">m4&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">))&lt;/span>. Visit node m4. m4 is a leaf node, so update NN &lt;span class="k">if&lt;/span> some object in m4 is closer than the current NN:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">oNN&lt;/span> &lt;span class="o">=&lt;/span> k, dist&lt;span class="o">(&lt;/span>q,oNN&lt;span class="o">)=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Q&lt;/span> &lt;span class="o">=&lt;/span>m1&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">))&lt;/span>, M3&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">))&lt;/span>, M3&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>8&lt;span class="o">))&lt;/span>, m2&lt;span class="o">(&lt;/span>3&lt;span class="o">)&lt;/span>,  m5&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>13&lt;span class="o">))&lt;/span>, m5&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>17&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Step 5: get closest entry &lt;span class="o">(&lt;/span>top element of Q&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">m1&lt;span class="o">(&lt;/span>sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">))&lt;/span>. Since sqrt&lt;span class="o">(&lt;/span>5&lt;span class="o">)&lt;/span> &amp;gt;&lt;span class="o">=&lt;/span> dist&lt;span class="o">(&lt;/span>q,oNN&lt;span class="o">)=&lt;/span> sqrt&lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span>, search stops and oNN is returned as the NN of q
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>incremental NN search&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Example 1: find the nearest large city (&amp;gt;10,000 residents) to my current position
&lt;ul>
&lt;li>Solution 1:
&lt;ul>
&lt;li>find all large cities&lt;/li>
&lt;li>apply NN search on the result&lt;/li>
&lt;li>could be slow if many such cities&lt;/li>
&lt;li>also R-tree may not be available for large cities only&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Solution 2:
&lt;ul>
&lt;li>incrementally find NN and check if the large city requirement is satisfied; if not get the next NN&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Example 2: find the nearest hotel; see if you like it; if not get the next one; see if you like it; &amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="spatial-joins">Spatial Joins&lt;/h3>
&lt;p>Most algorithms focus on the efficient processing of the filter step.&lt;/p>
&lt;p>Most spatial predicates on actual objects reduce to intersection of MBRs in the filter step. Thus all algorithms consider mainly the intersect predicate.&lt;/p>
&lt;p>&lt;strong>Types&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>intersection joins&lt;/li>
&lt;li>Semi-join: Find the cities that intersect a river&lt;/li>
&lt;li>Similarity join: Find pairs of hotels, restaurants close to each other (with distance smaller than 100m)&lt;/li>
&lt;li>Closest pairs: Find the closest pair of hotels, restaurants&lt;/li>
&lt;li>All-NN: For each hotel find the nearest restaurant&lt;/li>
&lt;li>Iceberg distance join: Find hotels close to at least 10 restaurants&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Three categories of spatial join algorithms&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Both inputs are indexed (e.g., synchronized tree traversal)&lt;/li>
&lt;li>One input is indexed (e.g., indexed nested loops)&lt;/li>
&lt;li>Neither input is indexed (e.g., spatial hash join)&lt;/li>
&lt;/ul>
&lt;h4 id="r-tree-intersection-join">R-tree (Intersection) Join&lt;/h4>
&lt;p>Applies on two R-trees of spatial relations R and S&lt;/p>
&lt;p>Node MBRs at the high level of the trees can prune object combinations to be checked&lt;/p>
&lt;p>This pseudo-code version assumes that the trees have same height&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/R_tree_join_code.png" alt="R_tree_join_code">&lt;/p>
&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>run for root(RA), root(RB)&lt;/li>
&lt;li>for every intersecting pair there (e.g., A1, B1) run recursively for pointed nodes&lt;/li>
&lt;li>intersecting pairs of leaf nodes are qualifying object MBR pairs&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/R_tree_join_example.png" alt="R_tree_join_example">&lt;/p>
&lt;h4 id="optimization-1">Optimization&lt;/h4>
&lt;p>&lt;strong>space restriction&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>If an entry in n1 does not intersect the MBR of n2 it may not intersect any entry in n2.&lt;/li>
&lt;li>Perform two scans in n1 and n2 to prune such entries&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/R_tree_join_optimization.png" alt="R_tree_join_optimization">&lt;/p>
&lt;p>&lt;strong>plane sweep&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Sort entries in both nodes on their lower-x value (lower bound of x-projection)&lt;/li>
&lt;li>Sweep a line to find fast all entry pairs that qualify x-intersection
&lt;ul>
&lt;li>for each of them check y-intersection&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/R_tree_join_optimization2.png" alt="R_tree_join_optimization2">&lt;/p>
&lt;ul>
&lt;li>Worst-case sub-optimal. But very effective on the average&lt;/li>
&lt;li>Worst-case optimal algorithms require advanced data structures for y-intersection. Large hidden constants, thus high cost for this problem size&lt;/li>
&lt;li>Can be used with other spatial join algorithms&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>R-tree join&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>The most efficient algorithm (assuming that the relations are indexed)&lt;/li>
&lt;li>Cannot be used for non-indexed inputs&lt;/li>
&lt;li>unless we build on-the-fly R-trees&lt;/li>
&lt;li>Comes with some I/O scheduling techniques for minimizing the page accesses&lt;/li>
&lt;/ul>
&lt;h4 id="joining-non-indexed-inputs">Joining non-indexed inputs&lt;/h4>
&lt;p>&lt;strong>Spatial hash join&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/spatial_hash_join.png" alt="spatial_hash_join">&lt;/p>
&lt;p>&lt;strong>Partition based spatial merge join&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/spatial_merge_join.png" alt="spatial_merge_join">&lt;/p>
&lt;p>&lt;strong>Indexed Nested Loops&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/indexed_nest_loops.png" alt="indexed_nest_loops">&lt;/p>
&lt;p>&lt;strong>Seeded tree join and Bulk-load and Match build an on-the-fly R-tree&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/seeded_tree_join.png" alt="seeded_tree_join">&lt;/p>
&lt;p>&lt;strong>Slot-index spatial join applies hash-join using the entries of a high R-tree level&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/slot_index_spatial_join.png" alt="slot_index_spatial_join">&lt;/p>
&lt;h3 id="the-refinement-step">The refinement step&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/refinement_step.png" alt="refinement_step">&lt;/p>
&lt;ul>
&lt;li>Step 1: find MBR pairs that intersect&lt;/li>
&lt;li>Step 2: compare some more detailed approximations to make conclusions (a.k.a. geometric filter)
&lt;ul>
&lt;li>conservative approximations
&lt;ul>
&lt;li>e.g., convex hull&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>progressive approximation
&lt;ul>
&lt;li>e.g., maximum enclosed rectangle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/refinement_detailed_approximations.png" alt="refinement_detailed_approximations">&lt;/p>
&lt;ul>
&lt;li>Step 3: if still join predicate inconclusive, perform expensive refinement step
&lt;ul>
&lt;li>can be processed by computational geometry algorithms&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multi-step processing (R-tree join as example)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/refinement_multi_step.png" alt="refinement_multi_step">&lt;/p></description></item><item><title>COMP7801 Topic 1b Database Indexing</title><link>https://jpg6.com/en/2021/01/30/comp7801_topic1b/</link><pubDate>Sat, 30 Jan 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/01/30/comp7801_topic1b/</guid><description>&lt;h2 id="database-indexing">Database Indexing&lt;/h2>
&lt;h3 id="concepts">Concepts&lt;/h3>
&lt;ul>
&lt;li>Indexing mechanisms used to speed up access to desired data&lt;/li>
&lt;li>Search Key
&lt;ul>
&lt;li>An attribute or a set of attributes used to look up records in a file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An index file consists of records (called index entries) of the form &lt;code>search key - pointer&lt;/code>&lt;/li>
&lt;li>Index files are typically much smaller than the original file&lt;/li>
&lt;li>Two basic kinds of indices
&lt;ul>
&lt;li>Ordered indices: search keys are stored in sorted order&lt;/li>
&lt;li>Hash indices: search keys are distributed across &amp;ldquo;buckets&amp;rdquo; using a &amp;ldquo;hash function&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/indexing_example.png" alt="indexing_example">&lt;/p>
&lt;h3 id="good-index">Good Index&lt;/h3>
&lt;ul>
&lt;li>Index quality is evaluated by several factors
&lt;ul>
&lt;li>Access types supported by the index efficiently
&lt;ul>
&lt;li>records with a specified value in the attribute (equality query)&lt;/li>
&lt;li>or records with an attribute value falling in a specified range of values (range query)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Access time – query response time&lt;/li>
&lt;li>Insertion time – data record insertion time&lt;/li>
&lt;li>Deletion time – data record deletion time&lt;/li>
&lt;li>Space overhead – size of the index file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="classification-of-indexes">Classification of Indexes&lt;/h3>
&lt;ul>
&lt;li>Primary index
&lt;ul>
&lt;li>In a sequentially ordered file, the index whose search key specifies the sequential order of the file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secondary index
&lt;ul>
&lt;li>an index whose search key specifies an order different from the sequential order of the file&lt;/li>
&lt;li>Also called non-clustered index&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/classification_of_indexing.png" alt="classification_of_indexing">&lt;/p>
&lt;ul>
&lt;li>Dense index
&lt;ul>
&lt;li>Index record appears for every search-key value in the file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sparse Index
&lt;ul>
&lt;li>Contains index records for only some search-key values&lt;/li>
&lt;li>Applicable when records are sequentially ordered on search-key&lt;/li>
&lt;li>Less space and less maintenance overhead for insertions and deletions&lt;/li>
&lt;li>Generally slower than dense index for locating records&lt;/li>
&lt;li>Good tradeoff: sparse index with an index entry for every block in file, corresponding to least search-key value in the block&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/classification_of_indexing_2.png" alt="classification_of_indexing_2">&lt;/p>
&lt;h4 id="primary-and-secondary-indices">Primary and Secondary Indices&lt;/h4>
&lt;ul>
&lt;li>Secondary indices have to be dense&lt;/li>
&lt;li>Indices offer substantial benefits when searching for records
&lt;ul>
&lt;li>Index is much smaller than relation file (cheap scan)&lt;/li>
&lt;li>Index can be ordered (fast search)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>When a file is modified, every index on the file must be updated
&lt;ul>
&lt;li>Updating indices imposes overhead on database modification&lt;/li>
&lt;li>Indexes should be used with care&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sequential scan using primary index is efficient, but a sequential scan using a secondary index is expensive
&lt;ul>
&lt;li>Each record access may fetch a new block from disk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="multilevel-index">Multilevel Index&lt;/h3>
&lt;ul>
&lt;li>If index does not fit in memory, access becomes expensive&lt;/li>
&lt;li>To reduce number of disk accesses to index records, treat 1st level of index kept on disk as a sequential file and construct a sparse index on it
&lt;ul>
&lt;li>outer index – a sparse index on 1st-level index file&lt;/li>
&lt;li>inner index – the 1st-level index file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If even outer index is too large to fit in main memory, yet another level of index can be created, and so on&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/multilevel_index_example.png" alt="multilevel_index_example">&lt;/p>
&lt;h3 id="b-tree-index-files">B+-Tree Index Files&lt;/h3>
&lt;ul>
&lt;li>A dynamic, multi-level index&lt;/li>
&lt;li>Advantage
&lt;ul>
&lt;li>automatically reorganizes itself with small local changes, in the face of insertions and deletions&lt;/li>
&lt;li>Reorganization of entire file is not required to maintain performance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Disadvantage of B+-trees
&lt;ul>
&lt;li>Extra insertion and deletion overhead, space overhead&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Advantages of B+-trees outweigh disadvantages, and they are used extensively&lt;/li>
&lt;/ul>
&lt;h4 id="basic-properties">Basic Properties&lt;/h4>
&lt;ul>
&lt;li>Disk-based tree structure
&lt;ul>
&lt;li>every node of the tree is a block and has an address (block-id) on the disk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multiway tree
&lt;ul>
&lt;li>each node has multiple children (between n/2 and n, where n/2 is the order or degree of the tree)&lt;/li>
&lt;li>Therefore, at least 50% of the space in a node is guaranteed to be occupied (this rule may not apply to tree root)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Balanced tree
&lt;ul>
&lt;li>all paths from the root to a leaf have the same length&lt;/li>
&lt;li>guarantees good search performance (to be seen later)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Disjoint partition of attribute domain into ranges
&lt;ul>
&lt;li>each sub-tree indexes a range in the attribute domain&lt;/li>
&lt;li>the entries of a directory node define the separators between domain intervals&lt;/li>
&lt;li>leaf nodes store index entries and pointers to the relation file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/B_Plus_Tree_Example.png" alt="B_Plus_Tree_Example">&lt;/p>
&lt;h4 id="non-leaf-nodes-in-b-trees">Non-Leaf Nodes in B+-Trees&lt;/h4>
&lt;ul>
&lt;li>Each non-leaf node contains up to n-1 search key values and up to n pointers&lt;/li>
&lt;li>All non-leaf nodes (except root) contain at least n/2 pointers (n/2 is sometimes called the minimum fan-out or degree)&lt;/li>
&lt;li>Non leaf nodes form a multi-level sparse index on the leaf nodes. For a non-leaf node with m pointers
&lt;ul>
&lt;li>All the search-keys in the subtree to which P1 points are less than K1&lt;/li>
&lt;li>For 2 &amp;lt;= i &amp;lt;= n – 1, all the search-keys in the subtree to which Pi points have values greater than or equal to Ki–1 and smaller than Km–1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/B_Plus_Tree_Non_Leaf_Node.png" alt="B_Plus_Tree_Non_Leaf_Node">&lt;/p>
&lt;h4 id="leaf-node-in-a-b-tree">Leaf Node in a B+-Tree&lt;/h4>
&lt;ul>
&lt;li>Contains between (n-1)/2 and n-1 entries&lt;/li>
&lt;li>Each index entry is a search key value + a record-id&lt;/li>
&lt;li>If Li, Lj are leaf nodes and i &amp;lt; j, Li’s search-key values are all smaller than Lj’s search-key values&lt;/li>
&lt;li>Each leaf node is linked with a pointer to the next node&lt;/li>
&lt;/ul>
&lt;h4 id="observations">Observations&lt;/h4>
&lt;ul>
&lt;li>Since the inter-node connections are done by pointers, &amp;ldquo;logically&amp;rdquo; close blocks need not be “physically” close
&lt;ul>
&lt;li>Nodes of the tree are dynamically created/deleted, so we cannot guarantee physical closeness&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The non-leaf levels of the B+-tree form a hierarchy of sparse indices&lt;/li>
&lt;li>The B+-tree contains a relatively small number of levels (logarithmic in the size of the main file), thus searches can be conducted efficiently&lt;/li>
&lt;li>Insertions and deletions to the main file can be handled efficiently (in logarithmic time)&lt;/li>
&lt;/ul>
&lt;h4 id="queries">Queries&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Find all records with a search-key value of k&lt;/p>
&lt;ul>
&lt;li>Start with the root node
&lt;ul>
&lt;li>Examine the node for the smallest search-key value &amp;gt; k&lt;/li>
&lt;li>If such a value exists, assume it is Ki. Then follow Pi to the child node. (E.g. P2 is for keys in K1 &amp;lt;= Keys &amp;lt; K2 )&lt;/li>
&lt;li>Otherwise k &amp;gt;= Kn–1, where there are n pointers in the node. Then follow Pn to the child node&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If the node reached by following the pointer above is not a leaf node, repeat the above procedure on the node, and follow the corresponding pointer&lt;/li>
&lt;li>Eventually reach a leaf node. If for some i, key Ki = k follow pointer Pi to the desired record. Else no record with search-key value k exists&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>In processing a query, a path is traversed in the tree from the root to some leaf node&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If there are K search-key values in the file, the path is not longer than log(n/2)(K). (The degree of a node is no less than n/2)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A node has generally the same size of a disk block, typically 4 kilobytes, and n is typically around 100 (40 bytes per index entry)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>With 1 million search key values and n/2 = 50, at most log50(1,000,000) = 4 nodes are accessed in a lookup&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Contrast this with a balanced binary tree with 1 million search key values — around 20 nodes are accessed in a lookup&lt;/p>
&lt;ul>
&lt;li>(log2(1,000,000) ~= 20)&lt;/li>
&lt;li>above difference is significant since every node access may need a disk I/O, costing around 10 milliseconds!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Similar result for a binary search of an ordered sequential file&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="range-queries">Range Queries&lt;/h4>
&lt;ul>
&lt;li>Find all records with a search-key value between k and m (k&amp;lt;m)
&lt;ul>
&lt;li>Start with the root node
&lt;ul>
&lt;li>Examine the node for the smallest search-key value &amp;gt; k&lt;/li>
&lt;li>If such a value exists, assume it is Kj
&lt;ul>
&lt;li>Then follow Pi to the child node&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Otherwise k &amp;gt;= Kn–1, where there are n pointers in the node
&lt;ul>
&lt;li>Then follow Pn to the child node.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If the node reached by following the pointer above is not a leaf node, repeat the above procedure on the node, and follow the corresponding pointer&lt;/li>
&lt;li>Eventually reach a leaf node. If for some i, k &amp;lt;= Ki &amp;lt;= m follow pointer Pi to the desired record. Continue with next entry Ki+1, while Ki+1 &amp;lt;= m. If at end of leaf node follow pointer to next node, until Ki &amp;gt;m or end of index&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/B_Plus_Tree_Range_Query.png" alt="B_Plus_Tree_Range_Query">&lt;/p>
&lt;h4 id="insertion">Insertion&lt;/h4>
&lt;ul>
&lt;li>Find the leaf node in which the search-key value to be inserted would appear&lt;/li>
&lt;li>If the search-key value is already there in the leaf node, record is added to file and if necessary one more pointer is associated with the search key value&lt;/li>
&lt;li>If the search-key value is not there, then add the record to the main file. Then
&lt;ul>
&lt;li>If there is room in the leaf node, insert (key-value, pointer) pair in the leaf node&lt;/li>
&lt;li>Otherwise, split the node (along with the new (key-value, pointer) entry) as discussed in the next slides&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/B_Plus_Tree_Insertion.png" alt="B_Plus_Tree_Insertion">&lt;/p>
&lt;h4 id="splitting">Splitting&lt;/h4>
&lt;ul>
&lt;li>Splitting a node
&lt;ul>
&lt;li>take the (search-key value, pointer) pairs (including the one being inserted) in sorted order. Place the first n/2 in the original node, and the rest in a new node&lt;/li>
&lt;li>let the new node be p, and let k be the least key value in p. Insert (k,p) in the parent of the node being split. If the parent is full, split it and propagate the split further up&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The splitting of nodes proceeds upwards till a node that is not full is found. In the worst case the root node may be split increasing the height of the tree by 1&lt;/li>
&lt;li>Non-leaf node splitting
&lt;ul>
&lt;li>Overflown node has n+1 pointers and n values&lt;/li>
&lt;li>Leave first n/2 key values and n/2+1 pointers to original node&lt;/li>
&lt;li>Move last n/2 key values and n/2+1 pointers to new node&lt;/li>
&lt;li>insert (middle key value, pointer to new node) to parent node&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/B_Plus_Tree_splitting.png" alt="B_Plus_Tree_splitting">&lt;/p>
&lt;h4 id="deletion">Deletion&lt;/h4>
&lt;ul>
&lt;li>Find the record to be deleted, and remove it from the relation file&lt;/li>
&lt;li>Remove (search-key value, record-id) of deleted record from the leaf node of the B+-tree&lt;/li>
&lt;li>If the node has too few entries due to the removal, and the entries in the node and a sibling fit into a single node, then
&lt;ul>
&lt;li>Insert all the search-key values in the two nodes into a single node (the one on the left), and delete the other node. (Deletion triggers a merge)&lt;/li>
&lt;li>Delete the pair (Ki–1, Pi), where Pi is the pointer to the deleted node, from its parent, recursively using the above procedure&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Otherwise, if the node has too few entries due to the removal, and the entries in the node and a sibling does not fit into a single node, then
&lt;ul>
&lt;li>Redistribute the pointers between the node and a sibling such that both have more than the minimum number of entries. (Deletion and rebalancing)&lt;/li>
&lt;li>Update the corresponding search-key value in the parent of the node&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The node deletions may cascade upwards until a node which has n/2 or more pointers is found. If the root node has only one pointer after deletion, it is deleted and the sole child becomes the root&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/B_Plus_Tree_deletion.png" alt="B_Plus_Tree_deletion">&lt;/p>
&lt;h3 id="static-hashing">Static Hashing&lt;/h3>
&lt;ul>
&lt;li>A bucket is a unit of storage containing one or more records (a bucket is typically a disk block)&lt;/li>
&lt;li>In a hash file organization we obtain the bucket of a record directly from its search-key value using a hash function&lt;/li>
&lt;li>Hash function h is a function from the set of all search-key values K to the set of all bucket addresses B&lt;/li>
&lt;li>Hash function is used to locate records for access, insertion as well as deletion&lt;/li>
&lt;li>Records with different search-key values may be mapped to the same bucket; thus entire bucket has to be searched sequentially to locate a record. (Collision)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/indexing_hashing.png" alt="indexing_hashing">&lt;/p>
&lt;h4 id="hash-function">Hash Function&lt;/h4>
&lt;ul>
&lt;li>Worst case has function maps all search-key values to the same bucket; this makes access time proportional to the number of search-key values in the file&lt;/li>
&lt;li>An ideal hash function is uniform, i.e., each bucket is assigned the same number of search-key values from the set of all possible values&lt;/li>
&lt;li>Ideal hash function is random, so each bucket will have the same number of records assigned to it irrespective of the actual distribution of search-key values in the file&lt;/li>
&lt;li>Typical hash functions perform computation on the internal binary representation of the search-key
&lt;ul>
&lt;li>For example, for a string search-key, the binary representations of all the characters in the string could be added and the sum modulo the number of buckets could be returned&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="handling-of-bucket-overflows">Handling of Bucket Overflows&lt;/h4>
&lt;ul>
&lt;li>Bucket overflow can occur because of
&lt;ul>
&lt;li>Insufficient buckets&lt;/li>
&lt;li>Skew in distribution of records. This can occur due to two reasons
&lt;ul>
&lt;li>multiple records have same search-key value&lt;/li>
&lt;li>chosen hash function produces non-uniform distribution of key values&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Although the probability of bucket overflow can be reduced, it cannot be eliminated; it is handled by using overflow buckets&lt;/li>
&lt;li>Overflow chaining / closed hashing – the overflow buckets of a given bucket are chained together in a linked list&lt;/li>
&lt;/ul>
&lt;h4 id="hash-indices">Hash Indices&lt;/h4>
&lt;ul>
&lt;li>Hashing can be used not only for file organization, but also for index-structure creation&lt;/li>
&lt;li>A hash index organizes the search keys, with their associated record pointers, into a hash file structure&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/Hash_Index.png" alt="Hash_Index">&lt;/p>
&lt;h4 id="deficiencies-of-static-hashing">Deficiencies of Static Hashing&lt;/h4>
&lt;ul>
&lt;li>In static hashing, function h maps search-key values to a fixed set of B of bucket addresses
&lt;ul>
&lt;li>Databases grow with time. If initial number of buckets is too small, performance will degrade due to too much overflows&lt;/li>
&lt;li>If file size at some point in the future is anticipated and number of buckets allocated accordingly, significant amount of space will be wasted initially&lt;/li>
&lt;li>If database shrinks, again space will be wasted&lt;/li>
&lt;li>One option is periodic re-organization of the file with a new hash function, but it is very expensive.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>These problems can be avoided by using techniques that allow the number of buckets to be modified dynamically (dynamic hashing)&lt;/li>
&lt;/ul></description></item><item><title>COMP7103 Topic 1 Introduction</title><link>https://jpg6.com/en/2021/01/28/comp7103_topic1/</link><pubDate>Thu, 28 Jan 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/01/28/comp7103_topic1/</guid><description>&lt;h1 id="comp7103-data-mining">COMP7103 Data Mining&lt;/h1>
&lt;h2 id="topic-1-introduction">Topic 1 Introduction&lt;/h2>
&lt;p>&lt;strong>Decision-Support System (DSS)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A decision-support system (DSS) is a system that assists decision makers to make important decisions for an organization or business&lt;/li>
&lt;li>KDD and data mining are important components in many DSS&amp;rsquo;s&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Data and Knowledge&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Data
&lt;ul>
&lt;li>A collecion of facts about certain group of objects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pattern
&lt;ul>
&lt;li>Certain characteristics of data that are frequently observed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Knowledge
&lt;ul>
&lt;li>Some general rules about the objects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Data Warehouse&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>An integration of various departmental databases (organization-wide data)&lt;/li>
&lt;li>Avoids overloading local operational databases&lt;/li>
&lt;li>A convenient place where KDD and data mining applications are performed&lt;/li>
&lt;li>Provide data mining algorithms an easy access to the required data&lt;/li>
&lt;li>Wrappers
&lt;ul>
&lt;li>Extract&lt;/li>
&lt;li>Transform&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Can also be used to support other DSS tools, e.g. On-Line Analytical Processing (OLAP) - analyze large amount of data, Online Transaction Processing (OLTP)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Data Mining and KDD&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>KDD (Knowledge Discovery in Databases)
&lt;ul>
&lt;li>A process of discovering useful knowledge from big collection of data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data Mining
&lt;ul>
&lt;li>A step within the KDD process in which interesting patterns are found. Some of these patterns are then interpreted and transformed into useful knowledge.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Data Mining is a step in the whole KDD process&lt;/em>&lt;/p>
&lt;p>&lt;em>KDD is a process of identifying patterns in data and deriving knowledge from them&lt;/em>&lt;/p>
&lt;ul>
&lt;li>valid&lt;/li>
&lt;li>novel&lt;/li>
&lt;li>potentially useful&lt;/li>
&lt;li>understandable&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Data Mining&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/data_mining_system.png" alt="data_mining_system">&lt;/p>
&lt;p>&lt;strong>Databases&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Bottom layer of the architecture&lt;/li>
&lt;li>Contains data sources (raw data)&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Traditional Database usually only provides the functions of storing and retrieving facts&lt;/em>&lt;/p>
&lt;p>&lt;em>The knowledge resulting from data mining should carry certain degree of predictive ability or descriptive (explanatory) ability (or both)&lt;/em>&lt;/p>
&lt;p>&lt;strong>Data Mining Engine&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Applies data mining algorithms on data&lt;/li>
&lt;li>Provides multiple functionality&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Evaluation Module&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Allow users to specify what is/isn&amp;rsquo;t interesting&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Knowledge Base&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Capture domain specific knowledge&lt;/li>
&lt;li>Stores the rules generated by data mining&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Graphical User Interface&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Presents mined patterns and rules to users in an easy-to-visualize way&lt;/li>
&lt;li>Provides feedback mechanisms for the users to specify the criteria of interestingness&lt;/li>
&lt;li>Provides a query language or query interface for users to select and retrieve&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Challenges of Data Mining&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Technical
&lt;ul>
&lt;li>Scalability&lt;/li>
&lt;li>Dimensionality&lt;/li>
&lt;li>Data stream&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data
&lt;ul>
&lt;li>Complex and heterogeneous data&lt;/li>
&lt;li>Data quality&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Privacy
&lt;ul>
&lt;li>Data ownership and distribution&lt;/li>
&lt;li>Privacy preservation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Results
&lt;ul>
&lt;li>Interpretation of patterns&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The KDD Process&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/kdd_process.png" alt="kdd_process">&lt;/p>
&lt;ul>
&lt;li>Step 1: Goal Setting
&lt;ul>
&lt;li>Understand your application domain&lt;/li>
&lt;li>Obtain prior known knowledge&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Step 2: Data Collection
&lt;ul>
&lt;li>Characteristics&lt;/li>
&lt;li>Where to find&lt;/li>
&lt;li>How to store&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Step 3: Data Cleaning and Preprocessing
&lt;ul>
&lt;li>Missing data&lt;/li>
&lt;li>Incorrect data (noise)&lt;/li>
&lt;li>Outliers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Step 4: Data Reduction and Transformation (or Preparation)
&lt;ul>
&lt;li>Compact data into a form&lt;/li>
&lt;li>Improve data mining algorithms&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Step 5: Data Mining
&lt;ul>
&lt;li>Pick a data mining model&lt;/li>
&lt;li>Pick a data mining algorithm&lt;/li>
&lt;li>Apply the algorithm to the data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Step 6: Result Evaluation
&lt;ul>
&lt;li>Check the results and goals&lt;/li>
&lt;li>Refine and re-run (if not)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Step 7: Knowledge Consolidation
&lt;ul>
&lt;li>Document&lt;/li>
&lt;li>Report&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Iterative and Interactive&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Some steps of the process need to be refined, and the whole process be repeated&lt;/li>
&lt;li>Certain amount of human involvement is needed to monitor and to fine tune the steps&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Prediction&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Uses database records that describe information about past behavior to automatically generate a model (or rule) that can predict future behavior&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Description&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Derive patterns that summarize the underlying relationships in data and to describe the characteristics of data&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>OLAP (On-Line Analytical Processing)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>View data in a multi-dimensional model (a data cube)&lt;/li>
&lt;li>Fast aggregation&lt;/li>
&lt;li>Summarization&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Example&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Selection -&amp;gt; Group-by -&amp;gt; Summarization&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Classification&lt;/strong>&lt;/p>
&lt;p>&lt;em>Supervised learning&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Goal
&lt;ul>
&lt;li>Unseen records should be assigned a class (accuracy)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Approach
&lt;ul>
&lt;li>Given a training set&lt;/li>
&lt;li>Learn classifier&lt;/li>
&lt;li>Find a model&lt;/li>
&lt;li>Test the model using test set&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Example&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Direct Marketing
&lt;ul>
&lt;li>Reduce cost of mailing by targeting a set of consumers likely to buy a new cell-phone product&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Regression&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Goal
&lt;ul>
&lt;li>Preduct a value of numerical variable based on the values of other variables&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Example&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Predicting sales amounts of new product based on advertising expenditure&lt;/li>
&lt;li>Predicting wind velocities as a function of temperature, humidity, air pressure, etc.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Clustering&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Given a set of data objects with a set of attributes and similarity measure&lt;/li>
&lt;li>Find clusters (e.g. distance-based clustering)
&lt;ul>
&lt;li>Maximize the intra-cluster similarity&lt;/li>
&lt;li>Minimize the inter-cluster similarity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Objects in one cluster are more similiar to one another&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/illustrating_cluster.png" alt="illustrating_cluster">&lt;/p>
&lt;p>&lt;em>Example&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Document Clustering
&lt;ul>
&lt;li>To find groups of documents that are similar to each other based on the important terms they contain&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Association Rule Discovery&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Given a set of records each of which contains some items from a given collection&lt;/li>
&lt;li>Goal
&lt;ul>
&lt;li>Produce dependency rules which predict occurrence of an item based on occurrences of other items&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Example&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Marketing and Sales Promotion&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sequence Analysis&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Given a sequence database contains sequences of events&lt;/li>
&lt;li>Find sequences
&lt;ul>
&lt;li>Interesting&lt;/li>
&lt;li>Frequently occurring&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Predict future behavior.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Example&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Renting movies&lt;/li>
&lt;li>Buying habits&lt;/li>
&lt;li>Web serving behavior&lt;/li>
&lt;li>Web log analysis&lt;/li>
&lt;/ul></description></item><item><title>COMP7801 Topic 1a Relational Database</title><link>https://jpg6.com/en/2021/01/23/comp7801_topic1a/</link><pubDate>Sat, 23 Jan 2021 01:18:17 +0800</pubDate><guid>https://jpg6.com/en/2021/01/23/comp7801_topic1a/</guid><description>&lt;h2 id="relational-databases">Relational Databases&lt;/h2>
&lt;h3 id="structure-of-relational-databases">Structure of Relational Databases&lt;/h3>
&lt;h4 id="basic-structure">Basic structure&lt;/h4>
&lt;ul>
&lt;li>Given sets D1, D2, &amp;hellip;, Dn&lt;/li>
&lt;li>A relation r is a subset of D1 x D2 x &amp;hellip;, x Dn&lt;/li>
&lt;li>A relation is a set of n-tuples (a1, a2, &amp;hellip;, an) where each ai &lt;belong to> Di&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>if
&lt;ul>
&lt;li>&lt;code>customer-name = {Jones, Smith, Curry, Lindsay}&lt;/code>&lt;/li>
&lt;li>&lt;code>customer-street = {Main, North, Park}&lt;/code>&lt;/li>
&lt;li>&lt;code>customer-city = {Harrison, Rye, Pittsfield}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then
&lt;ul>
&lt;li>&lt;code>r = {(Jones, Main, Harrison), (Smith, North, Rye), (Curry, North, Rye), (Lindsay, Park, Pittsfield)}&lt;/code> is a relation over customer-name x customer-street x customer-city&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="attribute-types">Attribute Types&lt;/h4>
&lt;ul>
&lt;li>Each attribute of a relation has a name&lt;/li>
&lt;li>The set of allowed values for each attribute is called the domain of the attribute&lt;/li>
&lt;/ul>
&lt;h4 id="relation-schema">Relation Schema&lt;/h4>
&lt;ul>
&lt;li>A1, A2, &amp;hellip;, An are attributes&lt;/li>
&lt;li>R = (A1, A2, &amp;hellip;, An ) is a relation schema
&lt;ul>
&lt;li>E.g. &lt;code>Account-schema = (account-number, branch-name, balance)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>r(R) is a relation on the relation schema R
&lt;ul>
&lt;li>E.g. &lt;code>customer(Customer-schema)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="relation-instance">Relation Instance&lt;/h4>
&lt;ul>
&lt;li>The current values (relation instance) of a relation are specified by a table&lt;/li>
&lt;li>An element t of r is a tuple, represented by a row in a table&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/relation_instance.png" alt="relation_instance">&lt;/p>
&lt;h3 id="database">Database&lt;/h3>
&lt;ul>
&lt;li>A database consists of multiple relations which are inter-related&lt;/li>
&lt;li>Information about an enterprise is broken up into parts, with each relation storing one part of the information&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/database_overview.png" alt="database_overview">&lt;/p>
&lt;h4 id="query-language">Query language&lt;/h4>
&lt;p>Language in which user requests information from the database&lt;/p>
&lt;ul>
&lt;li>Categories
&lt;ul>
&lt;li>procedural&lt;/li>
&lt;li>non-procedural&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pure languages
&lt;ul>
&lt;li>Relational Algebra
&lt;ul>
&lt;li>The operators take one or more relations as inputs and give a new relation as a result&lt;/li>
&lt;li>Operations
&lt;ul>
&lt;li>select&lt;/li>
&lt;li>project&lt;/li>
&lt;li>union&lt;/li>
&lt;li>set-Intersection&lt;/li>
&lt;li>set difference&lt;/li>
&lt;li>cartesian product&lt;/li>
&lt;li>rename&lt;/li>
&lt;li>Natural Join&lt;/li>
&lt;li>Aggregate Functions
&lt;ul>
&lt;li>avg: average value&lt;/li>
&lt;li>min: minimum value&lt;/li>
&lt;li>max: maximum value&lt;/li>
&lt;li>sum: sum of values&lt;/li>
&lt;li>count: number of values&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Relational Calculus&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SQL&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>SQL is based on set and relational operations with certain modifications and enhancements&lt;/li>
&lt;li>A typical SQL query has the form
&lt;ul>
&lt;li>&lt;code>select A1, A2, ..., Anfrom r1, r2, ..., rm where P&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The result of an SQL query is a multiset of tuples&lt;/li>
&lt;li>Clauses
&lt;ul>
&lt;li>select
&lt;ul>
&lt;li>To force the elimination of duplicates, insert the keyword &lt;code>distinct&lt;/code> after &lt;code>select&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>where
&lt;ul>
&lt;li>The where clause specifies conditions that the result must satisfy
&lt;ul>
&lt;li>Comparison results can be combined using the logical connectives and, or, and not&lt;/li>
&lt;li>Comparisons can be applied to results of arithmetic expressions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>from
&lt;ul>
&lt;li>The from clause lists the relations involved in the query&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Aggregate Functions
&lt;ul>
&lt;li>Group By
&lt;ul>
&lt;li>Find the number of depositors for each branch
&lt;ul>
&lt;li>&lt;code>select branch-name,count (distinct customer-name)from depositor,account where depositor.account-number = account.account-numbergroup by branch-name&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Having
&lt;ul>
&lt;li>formation of groups whereas predicates in the where clause are applied before forming groups&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Query Evaluation&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Basic operations
&lt;ul>
&lt;li>Selections&lt;/li>
&lt;li>Joins&lt;/li>
&lt;li>Other operations (projection, aggregation)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transformation of queries into a tree of operations&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Query Optimizationh&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Many equivalent expressions to the original query can be derived&lt;/li>
&lt;li>The query optimizer uses statistical data and appropriate algorithms to compute an expression of low evaluation cost&lt;/li>
&lt;/ul>
&lt;h3 id="storage-of-databases">Storage of databases&lt;/h3>
&lt;h4 id="physical-storage-media">Physical Storage Media&lt;/h4>
&lt;ul>
&lt;li>Cache
&lt;ul>
&lt;li>fastest and most costly form of storage&lt;/li>
&lt;li>volatile&lt;/li>
&lt;li>managed by the computer system hardware&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Main memory
&lt;ul>
&lt;li>fast access&lt;/li>
&lt;li>generally too small (or too expensive) to store the entire database&lt;/li>
&lt;li>Volatile
&lt;ul>
&lt;li>contents of main memory are usually lost if a power failure or system crash occurs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Magnetic-disk
&lt;ul>
&lt;li>Data is stored on spinning disk, and read/written magnetically&lt;/li>
&lt;li>Primary medium for the long-term storage of data&lt;/li>
&lt;li>typically stores entire database&lt;/li>
&lt;li>Data must be moved from disk to main memory for access, and written back for storage
&lt;ul>
&lt;li>Much slower access than main memory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>direct-access – possible to read data on disk in any order, unlike magnetic tape&lt;/li>
&lt;li>Capacities range up to several TB currently&lt;/li>
&lt;li>Survives power failures and system crashes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="storage-hierarchy">Storage Hierarchy&lt;/h4>
&lt;ul>
&lt;li>Primary storage
&lt;ul>
&lt;li>Fastest media but volatile (cache, main memory).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secondary storage&lt;/li>
&lt;li>Next level in hierarchy, non-volatile, moderately fast access time
&lt;ul>
&lt;li>Also called on-line storage, E.g. flash memory, magnetic disks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tertiary storage: lowest level in hierarchy, non-volatile, slow access time
&lt;ul>
&lt;li>Also called off-line storage, E.g. magnetic tape, optical storage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/memory_hierarchy.png" alt="memory_hierarchy">&lt;/p>
&lt;h4 id="magnetic-disks">Magnetic Disks&lt;/h4>
&lt;ul>
&lt;li>Read-write head
&lt;ul>
&lt;li>Positioned very close to the platter surface (almost touching it)&lt;/li>
&lt;li>Reads or writes magnetically encoded information.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Surface of platter divided into circular tracks
&lt;ul>
&lt;li>Over 16,000 tracks per platter on typical hard disks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Each track is divided into sectors
&lt;ul>
&lt;li>A sector is the smallest unit of data that can be read or written&lt;/li>
&lt;li>Sector size typically 512 bytes&lt;/li>
&lt;li>Typical sectors per track: 200 (on inner tracks) to 400 (on outer tracks)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>To read/write a sector
&lt;ul>
&lt;li>disk arm swings to position head on right track&lt;/li>
&lt;li>platter spins continually; data is read/written as sector passes under head&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Head-disk assemblies
&lt;ul>
&lt;li>multiple disk platters on a single spindle (typically 2 to 4)&lt;/li>
&lt;li>one head per platter, mounted on a common arm.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cylinder i consists of ith track of all the platters&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/magnetic_hard_disk.png" alt="magnetic_hard_disk">&lt;/p>
&lt;h4 id="performance-measures-of-disks">Performance Measures of Disks&lt;/h4>
&lt;ul>
&lt;li>Access time – the time it takes from when a read or write request is issued to when data transfer begins
&lt;ul>
&lt;li>Seek time – time it takes to reposition the arm over the correct track
&lt;ul>
&lt;li>Average seek time is 1/2 the worst case seek time
&lt;ul>
&lt;li>Would be 1/3 if all tracks had the same number of sectors, and we ignore the time to start and stop arm movement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>4 to 10 milliseconds on typical disks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Rotational latency – time it takes for the sector to be accessed to appear under the head
&lt;ul>
&lt;li>Average latency is 1/2 of the worst case latency&lt;/li>
&lt;li>4 to 11 milliseconds on typical disks (5400 to 15000 r.p.m.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data-transfer rate – the rate at which data can be retrieved from or stored to the disk
&lt;ul>
&lt;li>4 to 8 MB per second is typical&lt;/li>
&lt;li>Multiple disks may share a controller, so rate that controller can handle is also important&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="optimization-of-disk-block-access">Optimization of Disk-Block Access&lt;/h4>
&lt;ul>
&lt;li>Block – a contiguous sequence of sectors from a single track
&lt;ul>
&lt;li>data is transferred between disk and main memory in blocks&lt;/li>
&lt;li>sizes range from 512 bytes to several kilobytes
&lt;ul>
&lt;li>Smaller blocks: more transfers from disk&lt;/li>
&lt;li>Larger blocks: more space wasted due to partially filled blocks&lt;/li>
&lt;li>Typical block sizes today range from 4 to 16 kilobytes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Disk-arm-scheduling algorithms order pending accesses to tracks so that disk arm movement is minimized&lt;/li>
&lt;/ul>
&lt;h4 id="storage-access">Storage Access&lt;/h4>
&lt;ul>
&lt;li>A database file is partitioned into fixed-length storage units called blocks. Blocks are units of both storage allocation and data transfer. Typical size of a block ranges between 4Kb-16Kb&lt;/li>
&lt;li>Database system seeks to minimize the number of block transfers between the disk and memory. We can reduce the number of disk accesses by keeping as many blocks as possible in main memory&lt;/li>
&lt;li>Buffer
&lt;ul>
&lt;li>portion of main memory available to store copies of disk blocks.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Buffer manager
&lt;ul>
&lt;li>subsystem responsible for allocating buffer space in main memory.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/storage_access.png" alt="storage_access">&lt;/p>
&lt;h4 id="buffer-manager">Buffer manager&lt;/h4>
&lt;ul>
&lt;li>Programs call on the buffer manager when they need a block from disk
&lt;ul>
&lt;li>If the block is already in the buffer, the requesting program is given the address of the block in main memory&lt;/li>
&lt;li>If the block is not in the buffer
&lt;ul>
&lt;li>the buffer manager allocates space in the buffer for the block, replacing (throwing out) some other block, if required, to make space for the new block&lt;/li>
&lt;li>The block that is thrown out is written back to disk only if it was modified since the most recent time that it was written to/fetched from the disk&lt;/li>
&lt;li>Once space is allocated in the buffer, the buffer manager reads the block from the disk to the buffer, and passes the address of the block in main memory to requester&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Buffer-Replacement Policies&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Most operating systems replace the block least recently used (LRU strategy)&lt;/li>
&lt;li>Idea behind LRU – use past pattern of block references as a predictor of future references. If a block has not been recently used, then it is unlikely that it will be used in the near future&lt;/li>
&lt;li>This replacement policy is also used at different applications. A proxy server keeps in the most recently used web pages in a local cache. If a user requests again a page he has seen, it does not need to be downloaded again in the future&lt;/li>
&lt;li>LRU works well for unpredicted access patterns&lt;/li>
&lt;li>However, queries have well-defined access patterns (such as sequential scans), and a database system can use the information in a user’s query to predict future references&lt;/li>
&lt;li>LRU can be a bad strategy for certain access patterns involving repeated scans of data. Mixed strategy with hints on replacement strategy provided by the query optimizer is preferable&lt;/li>
&lt;/ul>
&lt;h4 id="file-organization">File Organization&lt;/h4>
&lt;ul>
&lt;li>The database is stored as a collection of files. Each file is a sequence of records. A record is a sequence of fields&lt;/li>
&lt;li>Each record has an address in the file, which is called record pointer or record id (simply rid)&lt;/li>
&lt;li>A simple approach
&lt;ul>
&lt;li>assume record size is fixed&lt;/li>
&lt;li>each file has records of one particular type only&lt;/li>
&lt;li>different files are used for different relations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Organization of Records in Files&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Heap
&lt;ul>
&lt;li>a record can be placed anywhere in the file where there is space&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sequential
&lt;ul>
&lt;li>store records in sequential order, based on the value of the search key of each record&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hashing
&lt;ul>
&lt;li>a hash function computed on some attribute of each record; the result specifies in which block of the file the record should be placed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Records of each relation may be stored in a separate file. In a clustered file organization records of several different relations can be stored in the same file
&lt;ul>
&lt;li>Motivation: store related records on the same block to minimize I/O&lt;/li>
&lt;li>However, not good for queries accessing only a few relations&lt;/li>
&lt;li>In general, this representation is barely used&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>LeetCode 刷题常用数据结构（Java 篇）</title><link>https://jpg6.com/en/2021/01/01/algorithm_data_structure_java/</link><pubDate>Fri, 01 Jan 2021 00:12:17 +0800</pubDate><guid>https://jpg6.com/en/2021/01/01/algorithm_data_structure_java/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近开始刷 LeetCode 算法题，针对工作需求的算法刷题其实主要是锻炼解决问题的思路和代码撰写能力，而不是像算法竞赛那样用复杂的数据结构，所以常用的数据结构和操作并不多，熟练使用也能很好地提升自己的代码质量，特此做一个整理，以便于查阅。&lt;/p>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;h3 id="数组-">数组 []&lt;/h3>
&lt;h4 id="初始化">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个大小为10，默认值为0的数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">nums&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个二位boolean数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="o">[][]&lt;/span> &lt;span class="n">visited&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">boolean&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">][&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 函数开头一般要做一个非空检查，然后用索引下标访问元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 访问num[i]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="字符串-string">字符串 String&lt;/h3>
&lt;h4 id="初始化-1">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="访问字符串">访问字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// String不支持用[]直接访问字符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">charAt&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="修改字符串">修改字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// String不支持直接修改字符串，要转化为char[]类型才能修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">chars&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">chars&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="判断字符串是否相同">判断字符串是否相同&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 一定要用equals方法进行判断，不能直接用==
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 相等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 不相等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="拼接字符串">拼接字符串&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 支持直接用+进行连接，但是效率不高
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">s3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;!&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="通过-stringbuilder-进行频繁的字符串拼接以提高效率">通过 StringBuilder 进行频繁的字符串拼接以提高效率&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">StringBuilder&lt;/span> &lt;span class="n">sb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="sc">&amp;#39;f&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// append方法支持拼接字符、字符串、数字等类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sb&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="动态数组-arraylist">动态数组 ArrayList&lt;/h3>
&lt;h4 id="初始化-2">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个存储String类型的动态数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">strings&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个存储int类型的动态数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法-1">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 判断是否为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 返回元素个数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 访问索引元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在尾部添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="双链表-linkedlist">双链表 LinkedList&lt;/h3>
&lt;h4 id="初始化-3">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个存储String类型的双链表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">strings&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个存储int类型的双链表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">nums&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法-2">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 判断是否为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 返回元素个数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在尾部添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 删除尾部最后一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">removeLast&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在头部添加元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">addFirst&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 删除头部第一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">removeFirst&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="哈希表-hashmap">哈希表 HashMap&lt;/h3>
&lt;h4 id="初始化-4">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个整数映射到字符串的哈希表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个字符串映射到数组的哈希表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&amp;gt;&lt;/span> &lt;span class="n">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法-3">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 判断是否存在Key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">containsKey&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取Key的对应Value，如果不存在则返回null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">V&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取Key的对应Value，如果不存在则返回null
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">V&lt;/span> &lt;span class="nf">getOrDefault&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">defaultValue&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将Key和Value存入哈希表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">V&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将Key和Value存入哈希表，如果存在，则什么都不做
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">V&lt;/span> &lt;span class="nf">putIfAbsent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">K&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 删除键值对并返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">V&lt;/span> &lt;span class="nf">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取哈希表中所有Key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Set&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">keySet&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="队列-queue">队列 Queue&lt;/h3>
&lt;h4 id="初始化-5">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Java中的Queue是一个接口
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个存储String的队列
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法-4">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 判断是否为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 返回元素个数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 返回队头元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">peek&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 删除并返回队头元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">poll&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在队尾插入元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="堆栈-stack">堆栈 Stack&lt;/h3>
&lt;h4 id="初始化-6">初始化&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化一个int类型的堆栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常用方法-5">常用方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 判断是否为空
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 返回元素个数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将元素压入栈顶
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 返回栈顶元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">peek&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 删除并的返回栈顶元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">E&lt;/span> &lt;span class="nf">pop&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>刷题路漫漫&amp;hellip;加油！&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://leetcode.com">LeetCode 官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/labuladong/fucking-algorithm">labuladong 的算法小抄&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>xDeepFM for Recommender Systems - 推荐系统</title><link>https://jpg6.com/en/2020/11/11/comp7404_group_project/</link><pubDate>Wed, 11 Nov 2020 16:30:25 +0800</pubDate><guid>https://jpg6.com/en/2020/11/11/comp7404_group_project/</guid><description>&lt;h1 id="xdeepfm-for-recommender-systems">xDeepFM for Recommender Systems&lt;/h1>
&lt;p>eXtreme Deep Factorization Machine (&lt;a href="https://arxiv.org/abs/1803.05170">xDeepFM&lt;/a>)&lt;/p>
&lt;p>This paper proposes a novel Compressed Interaction Network (CIN), which aims to generate feature interactions in an explicit fashion and at the vector-wise level.&lt;/p>
&lt;h2 id="github-repository">Github Repository&lt;/h2>
&lt;p>&lt;a href="https://github.com/pseudoyu/xDeepFM_for_Recommender_Systems">GitHub: xDeepFM_for_Recommender_Systems&lt;/a>&lt;/p>
&lt;h2 id="video-demo">Video Demo&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=rFEGAtTZLyQ">YouTube&lt;/a> | &lt;a href="https://drive.google.com/file/d/1qPx6H9R1b-EDP7HZpAg5bDjkzR8QEHnR/view?usp=sharing">Google Drive&lt;/a>&lt;/p>
&lt;h2 id="datasets">Datasets&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>&lt;a href="http://labs.criteo.com/2014/02/kaggle-display-advertising-challenge-dataset/">Criteo Dataset&lt;/a>.&lt;/strong> It is a famous industry benchmarking dataset for developing models predicting ad click-through rate, and is publicly accessible. Given a user and the page he is visiting, the goal is to predict the probability that he will clik on a given ad&lt;/li>
&lt;/ol>
&lt;h2 id="running-environment">Running Environment&lt;/h2>
&lt;p>I strongly recommmend that you use &lt;a href="https://www.anaconda.com">Anaconda&lt;/a> to implement this project. Here are some simple instructions:&lt;/p>
&lt;ol>
&lt;li>Download a suitable version (&lt;a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-Windows-x86_64.exe">Windows&lt;/a>/&lt;a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-MacOSX-x86_64.pkg">MacOS&lt;/a>/&lt;a href="https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh">Linux&lt;/a>) for your OS and install it (check for latest version from &lt;a href="https://www.anaconda.com">Anaconda&lt;/a>)
&lt;ol>
&lt;li>On Windows or MacOS, you can just use the &lt;em>.exe&lt;/em> or &lt;em>.pkg&lt;/em> installer and follow the instructions&lt;/li>
&lt;li>On Linux, you may need to run &lt;code>bash ./.Anaconda3-2020.07-Linux-x86_64.sh&lt;/code> in the same directory of the downloaded &lt;em>.sh&lt;/em> file to allow the installer to initialize Anaconda3 in your .bashrc&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Create a dedicated Conda environment for this project (strongly recommended)
&lt;ol>
&lt;li>Run &lt;code>conda create -n xdeepfm python=3.6&lt;/code> and enter &lt;code>y&lt;/code> to create the conda environment&lt;/li>
&lt;li>Run &lt;code>conda activate xdeepfm&lt;/code> to activate the project environment&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Run &lt;code>pip install -r requirements.txt&lt;/code> to install the package dependencies&lt;/li>
&lt;li>Now you can run the code simply through &lt;code>python main.py&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> YouPath/xDeepFM_for_Recommender_Systems/exdeepfm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bash ./.Anaconda3-2020.07-Linux-x86_64.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda create -n xdeepfm &lt;span class="nv">python&lt;/span>&lt;span class="o">=&lt;/span>3.6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">conda activate xdeepfm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python main.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dependencies">Dependencies&lt;/h3>
&lt;ul>
&lt;li>absl-py==0.8.1&lt;/li>
&lt;li>astor==0.8.0&lt;/li>
&lt;li>gast==0.3.2&lt;/li>
&lt;li>google-pasta==0.1.7&lt;/li>
&lt;li>grpcio==1.24.3&lt;/li>
&lt;li>h5py==2.10.0&lt;/li>
&lt;li>joblib==0.14.0&lt;/li>
&lt;li>Keras-Applications==1.0.8&lt;/li>
&lt;li>Keras-Preprocessing==1.1.0&lt;/li>
&lt;li>Markdown==3.1.1&lt;/li>
&lt;li>numpy==1.17.3&lt;/li>
&lt;li>packaging==19.2&lt;/li>
&lt;li>protobuf==3.10.0&lt;/li>
&lt;li>pyparsing==2.4.2&lt;/li>
&lt;li>PyYAML==5.1.2&lt;/li>
&lt;li>scikit-learn==0.21.3&lt;/li>
&lt;li>scipy==1.3.1&lt;/li>
&lt;li>six==1.12.0&lt;/li>
&lt;li>sklearn==0.0&lt;/li>
&lt;li>tensorboard==1.14.0&lt;/li>
&lt;li>tensorflow==1.14.0&lt;/li>
&lt;li>tensorflow-estimator==1.14.0&lt;/li>
&lt;li>termcolor==1.1.0&lt;/li>
&lt;li>Werkzeug==0.16.0&lt;/li>
&lt;li>wrapt==1.11.2&lt;/li>
&lt;/ul>
&lt;h2 id="running-results">Running Results&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/comp7404_screenshot1.png" alt="comp7404_screenshot1">&lt;/p>
&lt;p>&lt;strong>&amp;hellip;&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/comp7404_screenshot2.png" alt="comp7404_screenshot2">&lt;/p></description></item><item><title>ICOM6045 Topic 1 Cryptography</title><link>https://jpg6.com/en/2020/10/21/icom6045_topic1/</link><pubDate>Wed, 21 Oct 2020 19:53:17 +0800</pubDate><guid>https://jpg6.com/en/2020/10/21/icom6045_topic1/</guid><description>&lt;h1 id="icom6045-fundamentals-of-e-commerce-security">ICOM6045 Fundamentals of E-Commerce Security&lt;/h1>
&lt;h2 id="topic-1-cryptography">Topic 1 Cryptography&lt;/h2>
&lt;h2 id="definition">Definition&lt;/h2>
&lt;ul>
&lt;li>Process of transforming information to make it unreadable to anyone except those possessing the key&lt;/li>
&lt;/ul>
&lt;h2 id="purpose">Purpose&lt;/h2>
&lt;ul>
&lt;li>Data confidentiality&lt;/li>
&lt;/ul>
&lt;h2 id="transpositionspermutations">Transpositions/Permutations&lt;/h2>
&lt;ul>
&lt;li>An encryption in which the letters of the message are rearranged&lt;/li>
&lt;li>Function
&lt;ul>
&lt;li>Try to break established patterns&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>Columnar transposition
&lt;ul>
&lt;li>Rearrangement of the characters of the plaintext into columns&lt;/li>
&lt;li>Based on characteristic patterns of pairs of adjacent letters, called digrams&lt;/li>
&lt;li>Analysis
&lt;ul>
&lt;li>Compute the letter frequencies
&lt;ul>
&lt;li>Break the text into columns by compare a block of ciphertext characters against characters successively farther away in the ciphertext.&lt;/li>
&lt;li>
&lt;ol>
&lt;li>Do common digrams appear.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>Do most of the digram look reasonable&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Complexity
&lt;ul>
&lt;li>No additional work&lt;/li>
&lt;li>Require storage for all characters of the message&lt;/li>
&lt;li>Not good for long message&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Alternative
&lt;ul>
&lt;li>Permute the characters of the plaintext with a fixed period d&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="confusion">Confusion&lt;/h2>
&lt;ul>
&lt;li>Cipher that makes relationship between the plaintext/key pair and the ciphertext as complex as possible&lt;/li>
&lt;li>Good confusion
&lt;ul>
&lt;li>poly-alphabetic substitution with a long key&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bad confusion
&lt;ul>
&lt;li>Caesar cipher&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="diffusion">Diffusion&lt;/h2>
&lt;ul>
&lt;li>Cipher that spreads the information from the plaintext over the entire ciphertext&lt;/li>
&lt;li>Change in the plaintext should affect many parts of the ciphertext&lt;/li>
&lt;li>Good diffusion
&lt;ul>
&lt;li>DES&lt;/li>
&lt;li>Transposition cipher&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bad diffusion
&lt;ul>
&lt;li>Substitutin cipher&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="cryptanalysis">Cryptanalysis&lt;/h2>
&lt;ul>
&lt;li>Index of coincidence (A tool to rate how wella particular distribution
matches the distribution of letter in English)&lt;/li>
&lt;li>Procedure
&lt;ul>
&lt;li>Measure of roughness(variance)&lt;/li>
&lt;li>If the distribution is perfectly flat&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Examine
&lt;ul>
&lt;li>Is it encrypted&lt;/li>
&lt;li>How is it encrypted&lt;/li>
&lt;li>What is the key&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="types">Types&lt;/h2>
&lt;h3 id="symmetric-key-encryption">Symmetric Key Encryption&lt;/h3>
&lt;ul>
&lt;li>Procedure (Single key)
&lt;ul>
&lt;li>Original message&lt;/li>
&lt;li>Key -&amp;gt; Encryption algorithm&lt;/li>
&lt;li>Encrypted message&lt;/li>
&lt;li>Encrypted message sent over Internet&lt;/li>
&lt;li>Encrypted message arrives destination&lt;/li>
&lt;li>Key -&amp;gt; Decryption algorithm&lt;/li>
&lt;li>Original message&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Algorithms
&lt;ul>
&lt;li>DES(Data Encryption Standard)
&lt;ul>
&lt;li>Most commonly used block cipher&lt;/li>
&lt;li>Purpose
&lt;ul>
&lt;li>Facilitate hardware implementation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Form
&lt;ul>
&lt;li>A block cipher with 56-bit key (64-bit including parity bits)&lt;/li>
&lt;li>&amp;ldquo;Feistel&amp;rdquo; network structure&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AES(Advanced Encryption Standard)&lt;/li>
&lt;li>RC4&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Stream cipher
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>Convert one symbol of plaintext immediately into a symbol of ciphertext&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Advantage
&lt;ul>
&lt;li>Speed of transformation&lt;/li>
&lt;li>Low error propagation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Disadvantage
&lt;ul>
&lt;li>Low diffusion&lt;/li>
&lt;li>Possible for malicious insertions and modifications&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Block cipher
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>Encrypt a group of plaintext symbol as one block&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Advantage
&lt;ul>
&lt;li>Diffusion&lt;/li>
&lt;li>Immunity to insertion&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Disadvantage
&lt;ul>
&lt;li>Slowness of encryption&lt;/li>
&lt;li>Error propagation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Kasiski method
&lt;ul>
&lt;li>Search for repeated sequence of characters&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>3 occurrences of the 11-character sequence&lt;/li>
&lt;li>Distance between first 2 sequence = 141- 90 = 51&lt;/li>
&lt;li>Distance between second 2 sequences = 213 - 141 = 72&lt;/li>
&lt;li>The common divisor between 51 and 72 is 3&lt;/li>
&lt;li>Estimated key length is 3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;ldquo;Perfect&amp;rdquo; substitution cipher
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>Many alphabets for an unrecognizable distribution&lt;/li>
&lt;li>No apparent pattern for the choice of an alphabet at a particular point&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Function
&lt;ul>
&lt;li>Confuse the Kasiski method&lt;/li>
&lt;li>Index of coincidence would be close to 0.038&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Application
&lt;ul>
&lt;li>Caesar cipher
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>The message is enciphered with a 27-symbol alphabet (A-&amp;gt;Z) and the blank, the blank is translated to itself&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Permutation
&lt;ul>
&lt;li>Each letter is translated to a fixed number of letters after it in the alphabet&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The &amp;ldquo;real&amp;rdquo; Caessar cipher by Julius Caesar used a shift of 3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mono-alphabetic substitutions
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>The alphabet is scrambled, and each plaintext letter maps to a unique ciphertext letter&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Permutation
&lt;ul>
&lt;li>A permutation is a recording of the elements of a series&lt;/li>
&lt;li>A permutation can be a function&lt;/li>
&lt;li>Some permutations can&amp;rsquo;t be represented as simple equation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Weakness
&lt;ul>
&lt;li>Frequency distribution&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Polyalphabetic substitutions
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>Combine distributions that are high with ones that are low&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Analysis
&lt;ul>
&lt;li>Use Kasiski method to predict likely numbers of enciphering alphabets&lt;/li>
&lt;li>If no numbers emerge fairly regularly, may not a poly-alphabetic substitution&lt;/li>
&lt;li>Compute the index of coincidence to validate the predictions from step 1&lt;/li>
&lt;li>When step 1 and 3 indicate a promising value, separate the ciphertext into appropriate subsets and independently compute index of coincidence of each subset&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>Rotor Machines&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Vigenere cipher
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>Vigenere tableau
&lt;ul>
&lt;li>A collection of 26 permutations&lt;/li>
&lt;li>Written in a 26*26 matrix&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Permutation
&lt;ul>
&lt;li>Use a key (keyword) -&amp;gt; select particular permutaion&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>One-time pad
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>Based on a large nonrepeating set of keys (written on paper and glued together into a pad)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Procedure
&lt;ul>
&lt;li>Sender writes key one time above the letters of the plaintext&lt;/li>
&lt;li>Encipher the plaintext with a chart like Vigenere tableau&lt;/li>
&lt;li>Sender destroys the key&lt;/li>
&lt;li>Receiver takes the appropriate number of keys&lt;/li>
&lt;li>Decipher the message&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>Vernam cipher
&lt;ul>
&lt;li>Involves an arbitrarily long nonrepeating sequence of numbers that are combined with the plaintext&lt;/li>
&lt;li>Possible attack
&lt;ul>
&lt;li>Random number generator&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="public-key-encryption">Public Key Encryption&lt;/h3>
&lt;ul>
&lt;li>Procedure (Everyone has 2 keys)
&lt;ul>
&lt;li>Original message&lt;/li>
&lt;li>Encryption key -&amp;gt; Encryption algorithm
&lt;ul>
&lt;li>Plaintext &amp;lt;- Encryption
&lt;ul>
&lt;li>The original form of a message&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ciphertext &amp;lt;- Decryption
&lt;ul>
&lt;li>The encrypted form a message&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Original plaintext&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Encrypted message&lt;/li>
&lt;li>Encrypted message sent over Internet&lt;/li>
&lt;li>Encrypted message arrives destination&lt;/li>
&lt;li>Decryption key -&amp;gt; Decryption algorithm&lt;/li>
&lt;li>Original message&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Algorithms
&lt;ul>
&lt;li>RSA&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>ICOM6012 Topic 4 Transport Layer</title><link>https://jpg6.com/en/2020/10/20/icom6012_topic4/</link><pubDate>Tue, 20 Oct 2020 09:37:44 +0800</pubDate><guid>https://jpg6.com/en/2020/10/20/icom6012_topic4/</guid><description>&lt;h1 id="icom6012-internet-infrastructure-technologies">ICOM6012 Internet Infrastructure Technologies&lt;/h1>
&lt;h2 id="topic-4-transport-layer">Topic 4 Transport Layer&lt;/h2>
&lt;h2 id="actions">Actions&lt;/h2>
&lt;h3 id="sender">Sender&lt;/h3>
&lt;ul>
&lt;li>Get application layer message&lt;/li>
&lt;li>Determine segment header fields values&lt;/li>
&lt;li>Create segment&lt;/li>
&lt;li>Pass segment to IP&lt;/li>
&lt;/ul>
&lt;h3 id="receiver">Receiver&lt;/h3>
&lt;ul>
&lt;li>Receive segment from IP&lt;/li>
&lt;li>Check header values&lt;/li>
&lt;li>Extract application layer message&lt;/li>
&lt;li>Demultiplexes message up to application via socket&lt;/li>
&lt;/ul>
&lt;h2 id="services">Services&lt;/h2>
&lt;h3 id="provide-logical-communication-between-processes">Provide logical communication between processes&lt;/h3>
&lt;h3 id="run-in-end-system">Run in end system&lt;/h3>
&lt;ul>
&lt;li>Send side
&lt;ul>
&lt;li>Break app messages into segment&lt;/li>
&lt;li>Pass to network layer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Receive side
&lt;ul>
&lt;li>Reassembles segments into messages&lt;/li>
&lt;li>Pass to application layer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="protocols">Protocols&lt;/h2>
&lt;h3 id="tcp">TCP&lt;/h3>
&lt;ul>
&lt;li>Features
&lt;ul>
&lt;li>Point-to-point
&lt;ul>
&lt;li>One sender, one receiver&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reliable, in-order byte system
&lt;ul>
&lt;li>No message boundaries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Full duplex data
&lt;ul>
&lt;li>Bi-directional data flow in same connection&lt;/li>
&lt;li>MSS: maximum segment size (excluding header)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cumulative ACKs&lt;/li>
&lt;li>Pipelining
&lt;ul>
&lt;li>TCP congestion and flow control set window size&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Flow Control
&lt;ul>
&lt;li>Sender will not overwhelm receiver&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Congestion control&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Concepts
&lt;ul>
&lt;li>Segment structure&lt;/li>
&lt;li>Sequence numbers
&lt;ul>
&lt;li>Byte stream &amp;ldquo;number&amp;rdquo; of first byte in segment&amp;rsquo;s data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Acknowledgements (ACKs)
&lt;ul>
&lt;li>Seq # of next byte expected from other side&lt;/li>
&lt;li>Cumulative ACKs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Procedure
&lt;ul>
&lt;li>Connection-oriented
&lt;ul>
&lt;li>Handshaking initializes sender, receiver state before data exchange&lt;/li>
&lt;li>TCP socket identified by 4-tuple
&lt;ul>
&lt;li>Source IP&lt;/li>
&lt;li>Source Port #&lt;/li>
&lt;li>Dest IP&lt;/li>
&lt;li>Dest Port #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Server host may support many simultaneous TCP sockets&lt;/li>
&lt;li>Web servers have different sockets for each connecting client
(Non-persistent HTTP will have different socket for each request)&lt;/li>
&lt;li>Demux
&lt;ul>
&lt;li>Receiver uses all four values to direct segment to appropriate socket&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3-way handshake
&lt;ul>
&lt;li>Connection setup&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Connection management
&lt;ul>
&lt;li>Handshake
&lt;ul>
&lt;li>Agree to establish connection&lt;/li>
&lt;li>Agree on connection parameters&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Retransmission&lt;/li>
&lt;li>Closing a connection&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Events
&lt;ul>
&lt;li>Data received from application
&lt;ul>
&lt;li>Create segment with seq # (a byte-stream number of first data byte in segment)&lt;/li>
&lt;li>Start timer if not already running
&lt;ul>
&lt;li>Think of timer as for oldest unACKed segment&lt;/li>
&lt;li>Expiration interval: TimeOutInterval&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Timeout
&lt;ul>
&lt;li>Retransmit segment that caused timeout&lt;/li>
&lt;li>Restart timer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACK received
&lt;ul>
&lt;li>Update what is known to ACKed&lt;/li>
&lt;li>Start timer if there are still unACKed segment&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shortcomings
&lt;ul>
&lt;li>SYN DoS Attack
&lt;ul>
&lt;li>Half-open TCP connections consume all the TCP connection resources&lt;/li>
&lt;li>SYN packet with a spoofed source address&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="udp">UDP&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Features&lt;/p>
&lt;ul>
&lt;li>No frills&lt;/li>
&lt;li>Bare bones&lt;/li>
&lt;li>&amp;ldquo;Best effort&amp;rdquo;
&lt;ul>
&lt;li>Lost&lt;/li>
&lt;li>Delivered out-of-order to app&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>No handshaking&lt;/li>
&lt;li>Handle independently&lt;/li>
&lt;li>Services not available
&lt;ul>
&lt;li>Delay guarantee&lt;/li>
&lt;li>Bandwidth guarantee&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Concepts&lt;/p>
&lt;ul>
&lt;li>Segment format
&lt;ul>
&lt;li>Source port #&lt;/li>
&lt;li>Dest port #&lt;/li>
&lt;li>Length&lt;/li>
&lt;li>Checksum
&lt;ul>
&lt;li>Detect errors
&lt;ul>
&lt;li>Sender
&lt;ul>
&lt;li>Treat segement contents&lt;/li>
&lt;li>Checksum: 1&amp;rsquo;s complement sum&lt;/li>
&lt;li>Put checksum into UDP field value&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Receiver
&lt;ul>
&lt;li>Compute checksum of received segment&lt;/li>
&lt;li>Check equality
&lt;ul>
&lt;li>No: error detected&lt;/li>
&lt;li>Yes: no error detected (not sure)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Checksum calculation may be disabled in order to speed up the processing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Procedure&lt;/p>
&lt;ul>
&lt;li>Connectionless demux
&lt;ul>
&lt;li>Create socket with unique local port #&lt;/li>
&lt;li>Sender side: create datagram to send into UDP socket
&lt;ul>
&lt;li>Dest IP&lt;/li>
&lt;li>Dest port #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Receive side: receive UDP segment
(IP datagrams with same dest port #, but different source will be directed to same socket)
&lt;ul>
&lt;li>Check dest port #&lt;/li>
&lt;li>Direct UDP segment to socket with that port #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Utilization&lt;/p>
&lt;ul>
&lt;li>Streaming multimedia apps
&lt;ul>
&lt;li>Loss tolerant&lt;/li>
&lt;li>Rate sensitive&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS&lt;/li>
&lt;li>SNMP&lt;/li>
&lt;li>HTTP/3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Shortcomings&lt;/p>
&lt;ul>
&lt;li>Need reliability at application layer&lt;/li>
&lt;li>Congestion control&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="sctp">SCTP&lt;/h3>
&lt;h3 id="dccp">DCCP&lt;/h3>
&lt;h2 id="multiplexing-and-demultiplexing">Multiplexing and Demultiplexing&lt;/h2>
&lt;h3 id="multiplexing-at-sender">Multiplexing at sender&lt;/h3>
&lt;ul>
&lt;li>Handle data from multiple sockets, add transport header&lt;/li>
&lt;/ul>
&lt;h3 id="demultiplexing-at-receiver">Demultiplexing at receiver&lt;/h3>
&lt;ul>
&lt;li>Handle data info to deliver received segments to correct socket&lt;/li>
&lt;/ul>
&lt;h3 id="host-receivers-ip-datagram-host-uses-ip--port--to-redirect-segment">Host receivers IP datagram (Host uses IP &amp;amp; port # to redirect segment)&lt;/h3>
&lt;ul>
&lt;li>Source IP&lt;/li>
&lt;li>Dest IP&lt;/li>
&lt;li>One transport layer segment
&lt;ul>
&lt;li>Source port #&lt;/li>
&lt;li>Dest port #&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="congestion-control">Congestion Control&lt;/h2>
&lt;h3 id="cause">Cause&lt;/h3>
&lt;ul>
&lt;li>Too many sources sending too much data too fast for network to handle&lt;/li>
&lt;/ul>
&lt;h3 id="manifestations">Manifestations&lt;/h3>
&lt;ul>
&lt;li>Long delay
&lt;ul>
&lt;li>Queueing in router buffers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Packet loss
&lt;ul>
&lt;li>Buffer overflow at network&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="approaches">Approaches&lt;/h3>
&lt;ul>
&lt;li>End-end congestion control
&lt;ul>
&lt;li>Features
&lt;ul>
&lt;li>No explicit feedback from network&lt;/li>
&lt;li>Congestion inferred from observed loss, delay&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Network-assisted congestion control
&lt;ul>
&lt;li>Features
&lt;ul>
&lt;li>Routers provide direct feedback to hosts with flow passing through congested router&lt;/li>
&lt;li>May indicate congestion level or explicit set sending rate&lt;/li>
&lt;li>TCP ECN ATM DECbit protocols&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="tcp-congestion-control">TCP Congestion Control&lt;/h3>
&lt;ul>
&lt;li>AIMD
&lt;ul>
&lt;li>Sender can increase sending rate until packet loss occurs, then decrease&lt;/li>
&lt;li>Additive increase
&lt;ul>
&lt;li>1 MSS (maximum segment size) until loss detected&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multiplicative decrease
&lt;ul>
&lt;li>Cut sending rate in half at each loss event&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Detecting, reacting to loss
&lt;ul>
&lt;li>ACKs problem
&lt;ul>
&lt;li>cwnd is cut in half&lt;/li>
&lt;li>Window grow linearly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Timeout event
&lt;ul>
&lt;li>cwnd is set to 1 MSS&lt;/li>
&lt;li>Window grow exponentially to threshold, then linearly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TCP slow start
&lt;ul>
&lt;li>Initially cwnd = 1 MSS&lt;/li>
&lt;li>Double cwnd every RTT&lt;/li>
&lt;li>Done by incrementing cwnd for every ACK received&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>ICOM6012 Topic 3 Application Layer</title><link>https://jpg6.com/en/2020/10/19/icom6012_topic3/</link><pubDate>Mon, 19 Oct 2020 17:50:44 +0800</pubDate><guid>https://jpg6.com/en/2020/10/19/icom6012_topic3/</guid><description>&lt;h1 id="icom6012-internet-infrastructure-technologies">ICOM6012 Internet Infrastructure Technologies&lt;/h1>
&lt;h2 id="topic-3-application-layer">Topic 3 Application Layer&lt;/h2>
&lt;p>&lt;strong>Creating a Network App&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Run on different end systems&lt;/li>
&lt;li>Communication over network&lt;/li>
&lt;li>No need to write for network-core devices&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Client-Server Architecture (The Centralized Internet)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Server
&lt;ul>
&lt;li>Always-on host&lt;/li>
&lt;li>Permanent IP address&lt;/li>
&lt;li>Often in data centers (for scaling)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Clients
&lt;ul>
&lt;li>Contact, communicate with server&lt;/li>
&lt;li>May be intermittently connected&lt;/li>
&lt;li>May have dynamic IP addresses&lt;/li>
&lt;li>Don&amp;rsquo;t communicate directly with each other&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Peer-to-Peer (P2P) Architecture&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>No always-on server&lt;/li>
&lt;li>Arbitrary end systems directly communicate&lt;/li>
&lt;li>Peers request service from other peers, providing service in return to other peers
&lt;ul>
&lt;li>Self scalability - new peers bring new service capacity, as well as new service demands&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Peers are intermittently connected with dynamic IP addresses
&lt;ul>
&lt;li>Complex management&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Processes Communicating&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Process: program running within a host
&lt;ul>
&lt;li>Same host
&lt;ul>
&lt;li>Inter-process communication (defined by OS)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Different hosts
&lt;ul>
&lt;li>Exchanging messages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Client, servers
&lt;ul>
&lt;li>Client process: process that initiates communication&lt;/li>
&lt;li>Server process: process that waits to be contacted&lt;/li>
&lt;li>Applications with P2P architecture have both&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Sockets&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Process sends/receives messages to/from its socket&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/sockets.png" alt="sockets">&lt;/p>
&lt;p>&lt;strong>Addressing Processes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>To receive messages, process must have identifier
&lt;ul>
&lt;li>IP address
&lt;ul>
&lt;li>Host has unique 32-bits IP address&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Port number
&lt;ul>
&lt;li>Port 0 - 1023: Well-known
&lt;ul>
&lt;li>HTTP server: 80&lt;/li>
&lt;li>Mail server: 25&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Port 1024 - 49151: Registered ports&lt;/li>
&lt;li>Port &amp;gt; 49151: Dynamic/private ports&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>An Application-Layer Protocol Defines&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Types of messages exchanged
&lt;ul>
&lt;li>Request&lt;/li>
&lt;li>Response&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Message syntax
&lt;ul>
&lt;li>What field&lt;/li>
&lt;li>How fields are delineated&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Message semantics
&lt;ul>
&lt;li>Meaning of information in fields&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Rules
&lt;ul>
&lt;li>When and how process send &amp;amp; respond to messages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Protocols
&lt;ul>
&lt;li>Open protocols
&lt;ul>
&lt;li>Defined in RFCs (by IETF)&lt;/li>
&lt;li>Everyone has access to protocol definition&lt;/li>
&lt;li>Allow for interoperability&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>HTTP&lt;/li>
&lt;li>SMTP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Proprietary protocols
&lt;ul>
&lt;li>Skype&lt;/li>
&lt;li>Zoom&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Transport Service&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Data integrity&lt;/li>
&lt;li>Timing&lt;/li>
&lt;li>Throughput&lt;/li>
&lt;li>Security&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/transport_service.png" alt="transport_service">&lt;/p>
&lt;p>&lt;strong>Internet Transport Protocols Services&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>TCP service
&lt;ul>
&lt;li>Connection-oriented&lt;/li>
&lt;li>Reliable transport&lt;/li>
&lt;li>Flow control&lt;/li>
&lt;li>Congestion control&lt;/li>
&lt;li>Doesn&amp;rsquo;t provide
&lt;ul>
&lt;li>Timing&lt;/li>
&lt;li>Minimum throughput guarantee&lt;/li>
&lt;li>Security&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>UDP service
&lt;ul>
&lt;li>Unreliable data transfer&lt;/li>
&lt;li>Doesn&amp;rsquo;t provide
&lt;ul>
&lt;li>Reliability&lt;/li>
&lt;li>Flow control&lt;/li>
&lt;li>Congestion control&lt;/li>
&lt;li>Timing&lt;/li>
&lt;li>Throughput guarantee&lt;/li>
&lt;li>Security&lt;/li>
&lt;li>Connection setup&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/transport_protocols.png" alt="transport_protocols">&lt;/p>
&lt;p>&lt;strong>Securing TCP&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>TCP &amp;amp; UDP
&lt;ul>
&lt;li>No encryption&lt;/li>
&lt;li>Cleartext passwords sent into socket traverse Internet in cleartext&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SSL (Secure Socket Layer) / TLS (Transport Layer Security)
&lt;ul>
&lt;li>Provides encrypted TCP connection&lt;/li>
&lt;li>Data integrity&lt;/li>
&lt;li>End-point authentication&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SSL/TLS is at Application Layer
&lt;ul>
&lt;li>Apps use SSL/TLS libraries, which &amp;ldquo;talk&amp;rdquo; to TCP&lt;/li>
&lt;li>Cleartext passwords sent into socket traverse Internet encrypted&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ssl_tls.png" alt="ssl_tls">&lt;/p>
&lt;p>&lt;strong>The IP Hourglass&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ip_hourglass.png" alt="ip_hourglass">&lt;/p>
&lt;p>&lt;strong>HTTP Overview&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>HTTP: Hypertext Transfer Protocol&lt;/li>
&lt;li>Web&amp;rsquo;s application-layer protocol&lt;/li>
&lt;li>Client/Server model
&lt;ul>
&lt;li>Client - browser that requests, receives and &amp;ldquo;display&amp;rdquo; web objects&lt;/li>
&lt;li>Server - Web server sends objects in response to requests&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Development
&lt;ul>
&lt;li>HTTP/1.0: RFC 1945 (1996)&lt;/li>
&lt;li>HTTP/1.1: RFC 2616 (1997)&lt;/li>
&lt;li>HTTP/2: RFC 7540 (2015)&lt;/li>
&lt;li>HTTP/3: Internet-Draft (2020)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Uses TCP
&lt;ul>
&lt;li>Client initiates TCP connection (create sockets) to server, port 80&lt;/li>
&lt;li>Server accepts TCP connection from client&lt;/li>
&lt;li>HTTP messages exchanged between browser and web server&lt;/li>
&lt;li>TCP connection closed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP is stateless
&lt;ul>
&lt;li>Server maintains no information about past client requests&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>HTTP Connections&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Non-persistent HTTP
&lt;ul>
&lt;li>Downloading multiple objects required multiple connections
&lt;ul>
&lt;li>Sequential&lt;/li>
&lt;li>Parallel&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Procedures
&lt;ul>
&lt;li>TCP connection opened&lt;/li>
&lt;li>At most one object sent over TCP connection&lt;/li>
&lt;li>TCP connection closed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OS must work and allocate host resources for each TCP connection&lt;/li>
&lt;li>Browser often open parallel TCP connections to fetch referenced objects&lt;/li>
&lt;li>HTTP response time (2RTT+)
&lt;ul>
&lt;li>RTT: Time for a small packet to travel from client to server and back&lt;/li>
&lt;li>1RTT to initiate TCP connection&lt;/li>
&lt;li>1RTT for HTTP request and first few bytes of HTTP response to return&lt;/li>
&lt;li>File transmission time&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Persistent HTTP
&lt;ul>
&lt;li>Procedures
&lt;ul>
&lt;li>TCP connection opened to a server&lt;/li>
&lt;li>Multiple objects can be sent over single TCP connection between clients and that server&lt;/li>
&lt;li>TCP connection closed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Server leaves connection open after sending response&lt;/li>
&lt;li>Subsequent HTTP messages between same client/server are sent over connection&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Persistent HTTP without pipelining
&lt;ul>
&lt;li>Client issues new request only when previous response has been received&lt;/li>
&lt;li>1RTT for each referenced object&lt;/li>
&lt;li>Head-of-line (HoL) blocking&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Persistent HTTP with pipelining
&lt;ul>
&lt;li>Client sends requests as soon as it encounters a referenced object&lt;/li>
&lt;li>As little as 1RTT for all the referenced objects&lt;/li>
&lt;li>&lt;em>Not activated in practice&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>HTTP Message&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Request
&lt;ul>
&lt;li>In ASCII (human readable format)&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/http_request.png" alt="http_request">&lt;/li>
&lt;li>Methods
&lt;ul>
&lt;li>POST&lt;/li>
&lt;li>GET&lt;/li>
&lt;li>HEAD&lt;/li>
&lt;li>PUT&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Response
&lt;ul>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/http_response.png" alt="http_response">&lt;/li>
&lt;li>Statu Code
&lt;ul>
&lt;li>Informational, 1XX&lt;/li>
&lt;li>Successful, 2XX, (200 OK)&lt;/li>
&lt;li>Redirection, 3XX, (301 Moved Permanently)&lt;/li>
&lt;li>Client Error, 4XX, (400 Bad Request, 404 Not Found)&lt;/li>
&lt;li>Server Error, 5XX, (505 HTTP Version Not Support)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Cookies&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Components
&lt;ul>
&lt;li>Cookie header line of HTTP response message&lt;/li>
&lt;li>Cookie header line in next HTTP request message&lt;/li>
&lt;li>Cookie file kept on user&amp;rsquo;s host, managed by user&amp;rsquo;s browser&lt;/li>
&lt;li>Back-end database at website&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cookie_example.png" alt="cookie_example">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3rd-party cookies
&lt;ul>
&lt;li>Many sites use third party advertisements&lt;/li>
&lt;li>The third party can set a cookie that identifies the user&lt;/li>
&lt;li>This cookie is sent to the third party each time an ad is downloaded by the user’s browser along with the address of the page that contains the link to the ad&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/3_party_cookies.png" alt="3_party_cookies">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Web Caches (Proxy Servers)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Goal
&lt;ul>
&lt;li>Satisfy client request without involving origin server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>User configures browser to point to a web cache&lt;/li>
&lt;li>Browser sends all HTTP requsets to cache
&lt;ul>
&lt;li>If object in cache: cache returns object&lt;/li>
&lt;li>Else: cache requests object from origin server, then returns object to client&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Conditional GET&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Goal
&lt;ul>
&lt;li>Don&amp;rsquo;t send object if cache has up-to-date cached version
&lt;ul>
&lt;li>No object transmission delay&lt;/li>
&lt;li>Lower link utilization&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cache: specify date of cached copy in HTTP request&lt;/li>
&lt;li>Server: response contains no object if cached copy is up-to-date&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/conditional_get.png" alt="conditional_get">&lt;/p>
&lt;p>&lt;strong>HTTP/2&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Goals
&lt;ul>
&lt;li>Backward compatible with HTTP 1.1&lt;/li>
&lt;li>Improve page load speed
&lt;ul>
&lt;li>Data compression of HTTP headers&lt;/li>
&lt;li>HTTP/2 Server Push&lt;/li>
&lt;li>Pipelining of requests&lt;/li>
&lt;li>Fixing the head-of-line blocking problem in HTTP 1.1&lt;/li>
&lt;li>Multiplexing multiple requests over a single TCP connection&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mitigating HOL blocking
&lt;ul>
&lt;li>Objects divided into frames, frame transmission interleaved&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>HTTP/2 to HTTP/3&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Goal
&lt;ul>
&lt;li>To further decrease delay in multi-object HTTP requests&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/2 over single TCP connection means
&lt;ul>
&lt;li>Recovery from packet loss still stalls all object transmissions =&amp;gt; Head-of-line blocking!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP/3 over UDP (to address the HoL blocking)
&lt;ul>
&lt;li>Adds security, per object error and congestion-control&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Email&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Components
&lt;ul>
&lt;li>User agents
&lt;ul>
&lt;li>Composing, editing, reading mail messages&lt;/li>
&lt;li>Outgoing, incoming messages stored on server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mail server
&lt;ul>
&lt;li>Mailbox&lt;/li>
&lt;li>Message queue&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SMTP (Simple Mail Transfer Protocol)
&lt;ul>
&lt;li>Client: Sending mail server&lt;/li>
&lt;li>Server: Receiving mail server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SMTP [RFC 5321]&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Uses TCP to reliably transfer email message from client to server, port 25 (or 587)&lt;/li>
&lt;li>Direct transfer: sending server to receiving server&lt;/li>
&lt;li>Three phases of transfer
&lt;ul>
&lt;li>Handshaking (greeting)&lt;/li>
&lt;li>Transfer of messages&lt;/li>
&lt;li>Closure&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Command/response interaction (like HTTP, FTP)
&lt;ul>
&lt;li>Commands: ASCII text&lt;/li>
&lt;li>Response: status code and phrase&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Messages must be in 7-bit ASCII&lt;/li>
&lt;li>Uses persistent connections&lt;/li>
&lt;li>use &lt;em>CRLF.CRLF&lt;/em> to determine end of message&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/smtp_example.png" alt="smtp_example">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Mail Message Format&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>RFC 822: standard for text message format
&lt;ul>
&lt;li>Header lines (different from SMTP MAIL FROM, RCPT TO commands)
&lt;ul>
&lt;li>To&lt;/li>
&lt;li>From&lt;/li>
&lt;li>Subject&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Body (the message)
&lt;ul>
&lt;li>ASCII characters only&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Message Format: multimedia extensions&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>MIME (multipurpose internet mail extension): multimedia mail extension (to RFC 822), RFC 2045, 2056&lt;/li>
&lt;li>Additional lines in msg header declare MIME content type&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mail_mime.png" alt="mail_mime">&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Mail Access Protocols&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mail_access_protocols.png" alt="mail_access_protocols">&lt;/p>
&lt;ul>
&lt;li>SMTP
&lt;ul>
&lt;li>Delivery/storage to receiver&amp;rsquo;s server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mail access protocol: retrieval from server
&lt;ul>
&lt;li>POP
&lt;ul>
&lt;li>Post Office Protocol [RFC 1939]: authorization, download&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IMAP
&lt;ul>
&lt;li>Internet Mail Access Protocol [RFC 1730]: more features, including manipulation of stored msgs on server&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTTP
&lt;ul>
&lt;li>Provides web-based interface on top of STMP (to send), IMAP (or POP) to retrieve e-mail messages&lt;/li>
&lt;li>Gmail, Hotmail, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>DNS (Domain Name System)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Why not a single centralized DNS server
&lt;ul>
&lt;li>Single point of failure&lt;/li>
&lt;li>Traffic jam due to huge number of requests/queries&lt;/li>
&lt;li>Long distance =&amp;gt; slow response&lt;/li>
&lt;li>Maintenance issue&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS services
&lt;ul>
&lt;li>Hostname to IP address translation&lt;/li>
&lt;li>Host aliasing&lt;/li>
&lt;li>Mail server aliasing&lt;/li>
&lt;li>Load distribution&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/dns_services.png" alt="dns_services">&lt;/li>
&lt;li>Root Name Servers
&lt;ul>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/root_name_servers.png" alt="root_name_servers">&lt;/li>
&lt;li>13 LOGICAL root name servers, but 1086(or more) PHYICAL servers&lt;/li>
&lt;li>Reply with a referral to the DNS servers for a TLD, or indicating no such TLD exists.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TLD &amp;amp; authoritative servers
&lt;ul>
&lt;li>Top-level domain (TLD) servers
&lt;ul>
&lt;li>gTLD (originally 7): com, net, biz, edu, org, int, mil, &amp;hellip;&lt;/li>
&lt;li>ccTLD (249): uk, cn, hk, &amp;hellip;&lt;/li>
&lt;li>IDN (internationalized top-level domains): .中国, .香港 and .台灣&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Authoritative DNS servers
&lt;ul>
&lt;li>Organization&amp;rsquo;s own DNS server(s), providing authoritative hostname to IP mappings for organization’s named hosts&lt;/li>
&lt;li>Can be maintained by organization or service provider&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Local/Default DNS Server&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Does not strictly belong to hierarchy&lt;/li>
&lt;li>When host makes DNS query, query is sent to its local DNS server
&lt;ul>
&lt;li>Has local cache of recent name-to-address translation&lt;/li>
&lt;li>Acts as proxy, forwards query into hierarchy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Each ISP (residential ISP, company, university) has one&lt;/li>
&lt;li>Public DNS server
&lt;ul>
&lt;li>Google public DNS (with IP address 8.8.8.8)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Your home WiFi router may act as your local DNS server&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>DNS: Caching, Updating Records&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Once (any) name server learns mapping, it caches mapping
&lt;ul>
&lt;li>Cache entries timeout (disappear) after some time (TTL)&lt;/li>
&lt;li>TLD servers typically cached in local name servers
&lt;ul>
&lt;li>Root name servers not often visited&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cached entries may be out-of-date
&lt;ul>
&lt;li>If name host changes IP address, may not be known Internet-wide until all TTLs expire&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Update/notify mechanisms proposed IETF standard
&lt;ul>
&lt;li>RFC 2136&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>DNS Records&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>DNS: distributed db storing resource records (RR)
&lt;ul>
&lt;li>RR format
&lt;ul>
&lt;li>(name, value, type, ttl)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>type = A&lt;/li>
&lt;li>type = CNAME&lt;/li>
&lt;li>type = NS&lt;/li>
&lt;li>type = MX&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>DNS Protocol, Messages&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>DNS query and reply messages, both with same message format
&lt;ul>
&lt;li>Message header
&lt;ul>
&lt;li>Identification
&lt;ul>
&lt;li>16 bit&lt;/li>
&lt;li>For query, reply to query uses same&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Flags
&lt;ul>
&lt;li>Query or reply&lt;/li>
&lt;li>Recursion desired&lt;/li>
&lt;li>Recursion available&lt;/li>
&lt;li>Reply is authoritative&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/dns_message.png" alt="dns_message">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Attacking DNS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>DDoS attacks
&lt;ul>
&lt;li>Bombard root servers with traffic
&lt;ul>
&lt;li>Not successful to date&lt;/li>
&lt;li>Traffic Filtering&lt;/li>
&lt;li>Local DNS servers cache IPs of TLD servers, allowing root server bypass&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bombard TLD servers
&lt;ul>
&lt;li>Potentially more dangerous&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redirect attacks
&lt;ul>
&lt;li>Man-in-middle
&lt;ul>
&lt;li>Intercept queries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS poisoning
&lt;ul>
&lt;li>Send bogus replies to DNS server, which caches&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Peer-to-peer File Distribution&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>P2P architecture
&lt;ul>
&lt;li>No always-on server&lt;/li>
&lt;li>Arbitrary end systems directly communicate&lt;/li>
&lt;li>Self scalibility&lt;/li>
&lt;li>Peers are intermittently connected and change IP address&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>File distribution - BitTorrent&lt;/li>
&lt;li>Streaming - KanKan&lt;/li>
&lt;li>Volp - Skype&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>File Distribution (Client-Server)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/client_server_file.png" alt="client_server_file">&lt;/p>
&lt;ul>
&lt;li>Server transmission
&lt;ul>
&lt;li>Must send/upload N file copies&lt;/li>
&lt;li>Time: NF/U(s)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Client
&lt;ul>
&lt;li>Each client must download one file copy&lt;/li>
&lt;li>Slowest time: F/d(min)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Time to distribute F to N
&lt;ul>
&lt;li>D(c-s) &amp;gt;= max {NF/U(s), F/d(min)}&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>File Distribution (P2P)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Server transmission
&lt;ul>
&lt;li>Must upload at least one copy&lt;/li>
&lt;li>Time: F/U(s)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Client
&lt;ul>
&lt;li>Each client must download one file copy&lt;/li>
&lt;li>Slowest time: F/d(min)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>All clients
&lt;ul>
&lt;li>As aggregate must download NF bits&lt;/li>
&lt;li>Max upload rate: U(s)+NU(i)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Time to distribute F to N
&lt;ul>
&lt;li>D(P2P) &amp;gt;= max {F/U(s), F/d(min), NF/(U(s)+Sum(U(i)))}&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Client-Server vs. P2P&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/p2p_cs.png" alt="p2p_cs">&lt;/p>
&lt;p>&lt;strong>P2P File Distribution: BitTorrent&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Procedure
&lt;ul>
&lt;li>File divided into 256KB chunks&lt;/li>
&lt;li>Peers in torrent send/receive file chucks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Roles
&lt;ul>
&lt;li>Tracker
&lt;ul>
&lt;li>Track peers participating in torrent&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Torrent
&lt;ul>
&lt;li>Group of peers exchanging chucks of a file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Actions
&lt;ul>
&lt;li>Requesting chunks
&lt;ul>
&lt;li>Ask each peer for chunks they have&lt;/li>
&lt;li>Request missing chunks (rarest piece first)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sending chunks (tit-for-tat)
&lt;ul>
&lt;li>Send chunks to peers who currently sending her chunks at highest rate&lt;/li>
&lt;li>Randomly select another peers and send chunks (for new peers)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>A Look at Tik-Tok</title><link>https://jpg6.com/en/2020/10/16/ecom6013_discussion_topic4/</link><pubDate>Fri, 16 Oct 2020 09:19:19 +0800</pubDate><guid>https://jpg6.com/en/2020/10/16/ecom6013_discussion_topic4/</guid><description>&lt;h1 id="a-look-at-tik-tok">A Look at Tik-Tok&lt;/h1>
&lt;h2 id="given-there-are-many-social-media-platforms-already-existing-in-us-what-makes-tik-tok-so-successful-that-it-becomes-a-big-enough-threat-to-cause-the-us-government-to-act-the-way-it-did-towards-a-commercial-company-ignore-political-factors">Given there are many social media platforms already existing in US, what makes Tik-Tok so successful that it becomes a big enough threat to cause the US Government to act the way it did towards a commercial company (ignore political factors)&lt;/h2>
&lt;p>Economically, at about 2016, US tech giants such as Facebook or Google mainly focused on long video platform instead of the short video platform. A company called Musical.ly (later acquired by ByteDance and became a part of Tik-Tok) grasped this opportunity to extend the US market and gained a massive amount of market share. Generally, the US market is relatively a free market that encourages new products (startups) to participate in the competition. In addition to acquiring Musical.ly, which already played an essential role in the short video market, Tik-Tok also utilized targeted strategies to fulfil the US market&amp;rsquo;s needs and fashion to gain and retain more users.&lt;/p>
&lt;p>Socially, the majority of users of short video platform are young people, and they tend to follow fashions and do more social interactions. Tik-Tok carries out new creative forms of videos for users to easily create, share and connect interesting videos in their social circle, which brings the long tail influence on the spread of Tik-Tok videos. Besides, some organizations or even official medias also joined the Tik-Tok platform to please their audience or get more subscribers, which further increase the social influence of Tik-Tok.&lt;/p>
&lt;p>Technically, as the rapid development of Internet and smartphone industry, short video has gradually become a mainstream form of creation and entertainment. US people especially young people get more accustomed to using their smartphones to entertain or do social interactions, like watching or shooting videos in their leisure time. What&amp;rsquo;s more, the recommendation system and mechanism applying artificial intelligence and machine learning algorithms become more powerful and smart, keeping attracting their users&amp;rsquo; attention.&lt;/p>
&lt;p>To sum up, Tik-Tok chose the right market expanding strategy, successfully meets the market demand and captures their users&amp;rsquo; needs to get its market share. And it makes fair use of their technical benefits and most advanced innovation like machine learning algorithms to continually improve their product, making them become a very influential platform.&lt;/p></description></item><item><title>ECOM6013 Topic 8 Blockchain and Cybercurrency</title><link>https://jpg6.com/en/2020/10/09/ecom6013_topic8/</link><pubDate>Fri, 09 Oct 2020 11:01:28 +0800</pubDate><guid>https://jpg6.com/en/2020/10/09/ecom6013_topic8/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-8-blockchain-and-cybercurrency">Topic 8 Blockchain and Cybercurrency&lt;/h2>
&lt;p>&lt;strong>Form of Money&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Token money
&lt;ul>
&lt;li>Physical token&lt;/li>
&lt;li>Value is lost without the token&lt;/li>
&lt;li>No intermediary is required for spending&lt;/li>
&lt;li>Requires faith in the issuer (a government or a bank)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Notationary money
&lt;ul>
&lt;li>Notation/entry in a ledger, passbook, or database&lt;/li>
&lt;li>Can&amp;rsquo;t be lost&lt;/li>
&lt;li>Requires an intermediary&lt;/li>
&lt;li>Requires faith in the maintainer of the ledger&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hybrid money
&lt;ul>
&lt;li>Requires both a token and a ledger account&lt;/li>
&lt;li>Can be lost&lt;/li>
&lt;li>Requires an intermediary&lt;/li>
&lt;li>Requires faith in the issuer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Virtual money
&lt;ul>
&lt;li>No token/ledger&lt;/li>
&lt;li>Can be lost&lt;/li>
&lt;li>No intermediary required&lt;/li>
&lt;li>No issuer, no government backing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Digital money
&lt;ul>
&lt;li>String of bytes (data) stored on a device&lt;/li>
&lt;li>Value is lost/stolen when devices fail/invaded&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cybercurrency
&lt;ul>
&lt;li>Bitcoin is the most influential one&lt;/li>
&lt;li>Based on blockchain&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Bitcoin&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Designed for the &amp;ldquo;online society&amp;rdquo;&lt;/li>
&lt;li>An important example application of Blockchain&lt;/li>
&lt;li>Relationship with national currencies
&lt;ul>
&lt;li>Decentralized and independent of national currencies&lt;/li>
&lt;li>Easily convertible to national currencies&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Excellent application Scenarios
&lt;ul>
&lt;li>Anonymous transactions&lt;/li>
&lt;li>E-Commerce&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Land Deeds - A Blockchain Analogy&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/land_deeds.png" alt="land_deeds">&lt;/p>
&lt;ul>
&lt;li>A &amp;ldquo;chain of title&amp;rdquo; (a sequence of deeds leading from the original owner to the present owner)&lt;/li>
&lt;li>Deeds are recorded in the Land Registry&lt;/li>
&lt;li>Ownership is established by searching the Registry&lt;/li>
&lt;li>The Land Registry is ledger holder&lt;/li>
&lt;li>Double-selling is prevented by timestamps&lt;/li>
&lt;li>If the Registry is altered, ownership can be lost&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>5 elements of Bitcoin&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Currency
&lt;ul>
&lt;li>Send units of value&lt;/li>
&lt;li>Convertible&lt;/li>
&lt;li>Divisible&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Commodity
&lt;ul>
&lt;li>Scarcity stores wealth&lt;/li>
&lt;li>Market fluctuates with speculation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Brand
&lt;ul>
&lt;li>Marketing message&lt;/li>
&lt;li>Commodity and sharing knowledge&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Protocol
&lt;ul>
&lt;li>Decentralized trust&lt;/li>
&lt;li>Distributed ledger&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Technology
&lt;ul>
&lt;li>Blockchain&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>How to Get Bitcoin&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Sell something&lt;/li>
&lt;li>Salary (some companies)&lt;/li>
&lt;li>Bitcoin exchange&lt;/li>
&lt;li>Mining
&lt;ul>
&lt;li>No more than 21 million BTCs&lt;/li>
&lt;li>Divisible into units as small as 1/100 millionth of a BTC&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Bitcoin and Encryption Technologies&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Hash functions&lt;/li>
&lt;li>Public-private key (asymmetric) encryption&lt;/li>
&lt;li>Digital signatures&lt;/li>
&lt;li>All of these technologies are mature and trusted&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Bitcoin Characteristics&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>No physical object (not a character string)
&lt;ul>
&lt;li>&amp;ldquo;Bitcoin&amp;rdquo; - protocol&lt;/li>
&lt;li>&amp;ldquo;bitcoin&amp;rdquo; - value&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A chain of digitally signed transaction records leading from the original owner to the current owner&lt;/li>
&lt;li>Transaction records
&lt;ul>
&lt;li>Hashes&lt;/li>
&lt;li>Addresses&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>No Bitcoin registry&lt;/li>
&lt;li>No central authority&lt;/li>
&lt;li>Broadcast to everyone
&lt;ul>
&lt;li>Everyone can verify the Bitcoin blockchain&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Bitcoin Protocol&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Invented in 2008 by Satoshi Nakamoto, &lt;a href="https://bitcoin.org/bitcoin.pdf">&lt;em>Bitcoin: A Peer-to-Peer Electronic Cash System&lt;/em>&lt;/a>&lt;/li>
&lt;li>Publicly available, Open source software&lt;/li>
&lt;li>Everyone can obtain and run a Bitcoin client&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Bitcoin addresses&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>An elliptic curve public key
&lt;ul>
&lt;li>25-44 characters for users&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Send Bitcoins
&lt;ul>
&lt;li>Receiving address (public)&lt;/li>
&lt;li>Amount&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Receive Bitcoins
&lt;ul>
&lt;li>Receiving address (public)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Addresses are not directly registered to users&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Possible Vulnerabilities&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>No way to reverse a transaction without the payee’s cooperation&lt;/li>
&lt;li>Software bugs&lt;/li>
&lt;li>Bank robbery by hackers&lt;/li>
&lt;li>Malware attacks against wallets&lt;/li>
&lt;li>Government attempts to control&lt;/li>
&lt;li>Competing digital currencies easy to make (fork)
&lt;ul>
&lt;li>Auroracoin&lt;/li>
&lt;li>Dogecoin&lt;/li>
&lt;li>Namecoin&lt;/li>
&lt;li>Primecoin&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Challenges for Bitcoin&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Scalability&lt;/li>
&lt;li>Time to solve a block (security concerns in algorithms)&lt;/li>
&lt;li>Energy consumption&lt;/li>
&lt;li>Meaningless and highly inefficient&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Possible Future of Bitcoin/Virtual Currencies (Social)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>For the world’s unbanked&lt;/li>
&lt;li>For small businesses, freelancers and startups&lt;/li>
&lt;li>Inevitable development of &amp;ldquo;money&amp;rdquo;&lt;/li>
&lt;li>Distributed trust&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Possible Future of Bitcoin/Virtual Currencies (Economic/Political)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A future with digital currencies and decentralized stores&lt;/li>
&lt;li>National adoption of decentralized currencies may bring political transparency and economic neutrality&lt;/li>
&lt;li>Developing nations seeking to curb corruption and break free of economic dependence on other countries could see potential in these technologies&lt;/li>
&lt;li>Central Bank Digital Currency (CBDC)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Retail Money Key Attributes&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/retail_money.png" alt="retail_money">&lt;/p>
&lt;p>&lt;strong>Different Degrees of Responsibilities for the Central Bank&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/central_bank.png" alt="central_bank">&lt;/p></description></item><item><title>ICOM6012 Topic 2 The Big Picture</title><link>https://jpg6.com/en/2020/10/05/icom6012_topic2/</link><pubDate>Mon, 05 Oct 2020 09:06:09 +0800</pubDate><guid>https://jpg6.com/en/2020/10/05/icom6012_topic2/</guid><description>&lt;h1 id="icom6012-internet-infrastructure-technologies">ICOM6012 Internet Infrastructure Technologies&lt;/h1>
&lt;h2 id="topic-2-the-big-picture">Topic 2 The Big Picture&lt;/h2>
&lt;p>&lt;strong>The Internet: &amp;ldquo;nuts and bolts&amp;rdquo; view&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Billions of connected computing devices
&lt;ul>
&lt;li>Host = end system&lt;/li>
&lt;li>Running network apps&lt;/li>
&lt;li>Internet of things (IoT)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Packet switches
&lt;ul>
&lt;li>routers&lt;/li>
&lt;li>switchers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Communication links
&lt;ul>
&lt;li>Fiber, copper, radio, satellite&lt;/li>
&lt;li>Transmission rate: bandwidth&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Networks
&lt;ul>
&lt;li>Collection of devices, routers, switches, links&lt;/li>
&lt;li>Managed by an organization&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Internet: &amp;ldquo;network of networks&amp;rdquo;
&lt;ul>
&lt;li>Interconnected ISPs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Protocols
&lt;ul>
&lt;li>Control sending, receiving of messages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Internet standards
&lt;ul>
&lt;li>RFC: Requests for Comments&lt;/li>
&lt;li>IETF: Internet Engineering Task Force&lt;/li>
&lt;li>IEEE: Institute of Electronical &amp;amp; Electronic Engineering&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The Internet: a &amp;ldquo;service&amp;rdquo; view&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Infrastructure
&lt;ul>
&lt;li>Web&lt;/li>
&lt;li>Streaming video&lt;/li>
&lt;li>Multimedia teleconferencing&lt;/li>
&lt;li>Email&lt;/li>
&lt;li>Games&lt;/li>
&lt;li>E‐Commerce&lt;/li>
&lt;li>Social media&lt;/li>
&lt;li>Inter‐connected appliances&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Programming interface
&lt;ul>
&lt;li>Sending/receiving apps&lt;/li>
&lt;li>Service options&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Protocol&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Activities in the Internet involving two or more remote entities are governed by a protocol&lt;/li>
&lt;li>Protocols are running everywhere in the Internet&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or other event.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;strong>Network Standards&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ietf.org/standards/">IETF&lt;/a>
&lt;ul>
&lt;li>Application&lt;/li>
&lt;li>Transport&lt;/li>
&lt;li>Network&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://ieeexplore.ieee.org/browse/standards/collection/ieee">IEEE&lt;/a>
&lt;ul>
&lt;li>Data link&lt;/li>
&lt;li>Physical&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Network Edge&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Hosts
&lt;ul>
&lt;li>Clients&lt;/li>
&lt;li>Servers (always in data centers)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Access Networks, Physical Media&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Residential access networks (cable-based)
&lt;ul>
&lt;li>Frequency Division Multiplexing (FDM)
&lt;ul>
&lt;li>Different channels transmitted in different frequency bands&lt;/li>
&lt;li>Modem = Modulator + Demodulator
&lt;ul>
&lt;li>A device that converts data from digital format into one suitable for a transmission medium&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HFC: hybrid fiber coax
&lt;ul>
&lt;li>Asymmetric: up to 40 Mbps – 1.2 Gbs downstream transmission rate, 30‐100 Mbps upstream transmission rate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Network of cable, fiber attaches homes to ISP router
&lt;ul>
&lt;li>Homes share access network to cable headend&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Residential access networks: digital subscriber line (DSL)
&lt;ul>
&lt;li>Use existing telephone line to central office DSLAM
&lt;ul>
&lt;li>Data over DSL phone line goes to Internet&lt;/li>
&lt;li>Voice over DSL phone line goes to telephone network&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wireless access networks
&lt;ul>
&lt;li>Wireless local area networks (WLANs)
&lt;ul>
&lt;li>Within or around building (~100ft)&lt;/li>
&lt;li>802.11b/g/n (WiFi) - 11,54,450 Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wide-area cellular access networks
&lt;ul>
&lt;li>Mobile (10km)&lt;/li>
&lt;li>4G/5G cellular networks - 10 Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IoT
&lt;ul>
&lt;li>BLE&lt;/li>
&lt;li>ZigBee&lt;/li>
&lt;li>LoRa&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Remote areas
&lt;ul>
&lt;li>Satellite network: Geosynchronous Equatorial Orbit (GEO)
&lt;ul>
&lt;li>35,786 km above equator&lt;/li>
&lt;li>Large RTT (Round trip time): 0.5s&lt;/li>
&lt;li>Expensive&lt;/li>
&lt;li>Slow&lt;/li>
&lt;li>Examples
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=OFGW2sZsUiQ">&amp;ldquo;Project Loon&amp;rdquo; &amp;ndash; Google&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=giQ8xEWjnBs&amp;amp;t=13s">Starlink ‐‐ SpaceX&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Enterprise access networks (school, company)
&lt;ul>
&lt;li>Mix of wired, wireless link technologies
&lt;ul>
&lt;li>Ethernet
&lt;ul>
&lt;li>Wired access at 100Mbps, 1Gbps, 10Gbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WiFi
&lt;ul>
&lt;li>Wireless access points at 11, 54, 450 Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>History of IEEE 802.11 (Use CSMA/CA)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Unlicensed ISM - 1985&lt;/li>
&lt;li>802.11 - 1997
&lt;ul>
&lt;li>2.4GHz&lt;/li>
&lt;li>DSSS &amp;amp; FHSS&lt;/li>
&lt;li>1,2Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>802.11b - 1999 (WiFi-1)
&lt;ul>
&lt;li>2.4GHz&lt;/li>
&lt;li>DSSS&lt;/li>
&lt;li>11Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>802.11a - 1999 (WiFi-2)
&lt;ul>
&lt;li>5GHz&lt;/li>
&lt;li>OFDM&lt;/li>
&lt;li>54Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WiFi Alliance - 1999&lt;/li>
&lt;li>802.11g - 2003 (WiFi-3)
&lt;ul>
&lt;li>2.4GHz&lt;/li>
&lt;li>54Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>802.11-2007 - 2007
&lt;ul>
&lt;li>Combined 802.11a/b/g&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>802.11n - 2009 (WiFi-4)
&lt;ul>
&lt;li>MIMO, 2.4 or 5GHz&lt;/li>
&lt;li>600Mbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>802.11-2012
&lt;ul>
&lt;li>Combined 802.11a/b/g/n&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>802.11ac - 2013 (WiFi-5)
&lt;ul>
&lt;li>5GHz&lt;/li>
&lt;li>7Gbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>802.11ah - 2017&lt;/li>
&lt;li>802.11ax - 2020 (WiFi-6)
&lt;ul>
&lt;li>5GHz&lt;/li>
&lt;li>OFDMA&lt;/li>
&lt;li>9.6Gbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Links: Physical Media&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Twisted pair (TP)
&lt;ul>
&lt;li>Two insulated copper wires
&lt;ul>
&lt;li>Category 5: 100Mbos, 1Gbps Ethernet&lt;/li>
&lt;li>Category 6: 10Gbps Ethernet&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Coaxial cable
&lt;ul>
&lt;li>Two concentric copper conductors&lt;/li>
&lt;li>Bidiretional&lt;/li>
&lt;li>Broadband
&lt;ul>
&lt;li>Multiple frequency channels on cable&lt;/li>
&lt;li>100 Mbps per channel&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://youtu.be/jZOg39v73c4">Fiber optic cable&lt;/a>
&lt;ul>
&lt;li>Glass fiber carrying light pulse a bit (each pulse a bit)&lt;/li>
&lt;li>High-speed point-to-point transmission (10-100Gbps)&lt;/li>
&lt;li>Low error rate
&lt;ul>
&lt;li>Repeaters spaced far apart&lt;/li>
&lt;li>Immune to electromagnetic noise&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wireless radio
&lt;ul>
&lt;li>Signal carried in electromagnetic spectrum&lt;/li>
&lt;li>No physical &amp;ldquo;wire&amp;rdquo;&lt;/li>
&lt;li>Propagation environment effects
&lt;ul>
&lt;li>Reflection&lt;/li>
&lt;li>Obstruction by objects&lt;/li>
&lt;li>Interference&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Network Core&lt;/strong>&lt;/p>
&lt;p>&lt;em>Mesh of interconnected routers&lt;/em>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Packet-switching (hosts break application-layer messages into packets)&lt;/p>
&lt;ul>
&lt;li>Forward packets from one router to the next&lt;/li>
&lt;li>Each packet transmitted a full link capacity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Packet transmission delay&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/packet_switch.png" alt="packet_switch">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> Packet transmission &lt;span class="nv">delay&lt;/span> &lt;span class="o">=&lt;/span> L &lt;span class="o">(&lt;/span>bits&lt;span class="o">)&lt;/span> / R &lt;span class="o">(&lt;/span>bits/sec&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>End-end delay&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/store_and_forward.png" alt="store_and_forward">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> End-end &lt;span class="nv">delay&lt;/span> &lt;span class="o">=&lt;/span> 2L &lt;span class="o">(&lt;/span>bits&lt;span class="o">)&lt;/span> / R &lt;span class="o">(&lt;/span>bits/sec&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>Assuming zero propagation delay&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Store and forward: entire packet must arrive at router before it can be transmitted on next link&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Packet queuing and loss&lt;/p>
&lt;ul>
&lt;li>If arrival rate &amp;gt; transmission rate, packets will queue&lt;/li>
&lt;li>If memory fills up, packets can be dropped&lt;/li>
&lt;li>Bigger buffer can bring lower packet loss but higher delay+buffer cost&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Two key network-core functios&lt;/p>
&lt;ul>
&lt;li>Forwarding
&lt;ul>
&lt;li>Local action: input link -&amp;gt; output link&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Routing
&lt;ul>
&lt;li>Global action: source -&amp;gt; destinatin&lt;/li>
&lt;li>Routing algorithms&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Circuit switching&lt;/p>
&lt;ul>
&lt;li>End-end resources allocated to, reserved for &amp;ldquo;call&amp;rdquo; between source&amp;amp;dest&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/circuit_switching.png" alt="circuit_switching">&lt;/p>
&lt;ul>
&lt;li>Frequency Division Multiplexing (FDM)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fdm.png" alt="fdm">&lt;/p>
&lt;ul>
&lt;li>Time Division Multiplexing (TDM)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/tdm.png" alt="tdm">&lt;/p>
&lt;p>&lt;strong>Packet Switching vs. Circuit Switching&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Packet switching is great for bursty data
&lt;ul>
&lt;li>Resource sharing&lt;/li>
&lt;li>Simpler, no call setup&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Packet switching can cause excessive congestion&lt;/li>
&lt;li>Combined: Virtual Circuit Packet Switching&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Internet Structure: Network of networks&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Hosts connected to internet&lt;/li>
&lt;li>Access ISPs (Internet Service Providers)
&lt;ul>
&lt;li>To ensure every two hosts can send packets to each other, access ISPs must be interconnected&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/isp_tiers.png" alt="isp_tiers">&lt;/p>
&lt;ul>
&lt;li>Tier-1 ISP
&lt;ul>
&lt;li>Sprint, AT&amp;amp;T, NTT&lt;/li>
&lt;li>National &amp;amp; international coverage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Content provider network (private network)
&lt;ul>
&lt;li>Google&lt;/li>
&lt;li>Facebook&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Delay and Loss&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Nodal processing&lt;/li>
&lt;li>Queueing delay&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/queueing_delay.png" alt="queueing_delay">
&lt;ul>
&lt;li>R: link bandwidth (bps)&lt;/li>
&lt;li>L: packet length (bits)&lt;/li>
&lt;li>a: average packet arrival rate&lt;/li>
&lt;li>Traffic intensity = La / R&lt;/li>
&lt;li>E(x) = La/R / (1 - La/R)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transmission delay
&lt;ul>
&lt;li>L(packet length) / R (link bandwidth)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Propagation delay
&lt;ul>
&lt;li>d (length of physical link) / s (propagation speed)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/packet_delay.png" alt="packet_delay">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> d&lt;span class="o">(&lt;/span>nodal&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> d&lt;span class="o">(&lt;/span>proc&lt;span class="o">)&lt;/span> + d&lt;span class="o">(&lt;/span>queue&lt;span class="o">)&lt;/span> + d&lt;span class="o">(&lt;/span>trans&lt;span class="o">)&lt;/span> + d&lt;span class="o">(&lt;/span>prop&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Example&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> Number of &lt;span class="nv">hops&lt;/span> &lt;span class="o">=&lt;/span> M
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Per-hop processing &lt;span class="nv">delay&lt;/span> &lt;span class="o">=&lt;/span> d&lt;span class="o">(&lt;/span>proc&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Link propagation &lt;span class="nv">delay&lt;/span> &lt;span class="o">=&lt;/span> d&lt;span class="o">(&lt;/span>prop&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Packet transmission &lt;span class="nv">delay&lt;/span> &lt;span class="o">=&lt;/span> d&lt;span class="o">(&lt;/span>trans&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Message &lt;span class="nv">size&lt;/span> &lt;span class="o">=&lt;/span> N packets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> End-to-end Delay &lt;span class="o">(&lt;/span>ignoring queueing delay&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">=&lt;/span> M * d&lt;span class="o">(&lt;/span>prop&lt;span class="o">)&lt;/span> + N * d&lt;span class="o">(&lt;/span>trans&lt;span class="o">)&lt;/span> + &lt;span class="o">(&lt;/span>M-1&lt;span class="o">)&lt;/span> * d&lt;span class="o">(&lt;/span>trans&lt;span class="o">)&lt;/span> + &lt;span class="o">(&lt;/span>M-1&lt;span class="o">)&lt;/span> * d&lt;span class="o">(&lt;/span>proc&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/timing_diagram.png" alt="timing_diagram">&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;Real&amp;rdquo; Internet delays and routes: traceroute &lt;a href="https://www.youtube.com">YouTube&lt;/a> (macOS)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="line">&lt;span class="cl">➜ ~ traceroute youtube.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">traceroute to youtube.com &lt;span class="o">(&lt;/span>216.58.197.110&lt;span class="o">)&lt;/span>, &lt;span class="m">64&lt;/span> hops max, &lt;span class="m">52&lt;/span> byte packets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> 172.24.172.1 &lt;span class="o">(&lt;/span>172.24.172.1&lt;span class="o">)&lt;/span> 14.211 ms 1.584 ms 1.635 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">2&lt;/span> 118.140.125.65 &lt;span class="o">(&lt;/span>118.140.125.65&lt;span class="o">)&lt;/span> 13.122 ms 23.362 ms 7.402 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">3&lt;/span> 10.30.31.17 &lt;span class="o">(&lt;/span>10.30.31.17&lt;span class="o">)&lt;/span> 7.024 ms 23.736 ms 54.474 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">4&lt;/span> 10.28.21.37 &lt;span class="o">(&lt;/span>10.28.21.37&lt;span class="o">)&lt;/span> 5.924 ms 3.565 ms 2.954 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">5&lt;/span> * * *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">6&lt;/span> * 218.188.28.165 &lt;span class="o">(&lt;/span>218.188.28.165&lt;span class="o">)&lt;/span> 214.507 ms 3.344 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">7&lt;/span> 108.170.241.65 &lt;span class="o">(&lt;/span>108.170.241.65&lt;span class="o">)&lt;/span> 3.595 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 72.14.222.9 &lt;span class="o">(&lt;/span>72.14.222.9&lt;span class="o">)&lt;/span> 10.840 ms 3.377 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">8&lt;/span> 108.170.241.65 &lt;span class="o">(&lt;/span>108.170.241.65&lt;span class="o">)&lt;/span> 3.156 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 216.239.62.59 &lt;span class="o">(&lt;/span>216.239.62.59&lt;span class="o">)&lt;/span> 3.495 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 216.239.62.57 &lt;span class="o">(&lt;/span>216.239.62.57&lt;span class="o">)&lt;/span> 2.733 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">9&lt;/span> 216.239.62.59 &lt;span class="o">(&lt;/span>216.239.62.59&lt;span class="o">)&lt;/span> 4.698 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hkg12s01-in-f14.1e100.net &lt;span class="o">(&lt;/span>216.58.197.110&lt;span class="o">)&lt;/span> 3.252 ms 4.355 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Packet Loss&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Queen (buffer) preceding link in buffer has finite capcity&lt;/li>
&lt;li>Packet arriving to full queue dropped (lost)&lt;/li>
&lt;li>Lost packet may be retransmitted by previous node, end system or not at all&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/packet_loss.png" alt="packet_loss">&lt;/p>
&lt;p>&lt;strong>Throughput&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Rate (bits/time) at which bits transferred from sender to receiver
&lt;ul>
&lt;li>Instantaneous: rate at given point in time&lt;/li>
&lt;li>Average: rate over longer period of time&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bottleneck link
&lt;ul>
&lt;li>link on end-end path that constrains end-end throughput&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/throughput.png" alt="throughput">&lt;/li>
&lt;li>Per-connection end-end throughput
&lt;ul>
&lt;li>min(Rc, Rs, R/10)&lt;/li>
&lt;li>In practice, Rc or Rs is often bottleneck&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Why Layering&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Explicit structure allows identification, relationship of complex system&amp;rsquo;s pieces&lt;/li>
&lt;li>Modularization eases maintenance, updating of system&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Internet Protocol Stack&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Application - supporting network applications
&lt;ul>
&lt;li>FTP&lt;/li>
&lt;li>SMTP&lt;/li>
&lt;li>HTTP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transport - process data transfer
&lt;ul>
&lt;li>TCP&lt;/li>
&lt;li>UDP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Network - routing of datagrams from source to destination
&lt;ul>
&lt;li>IP&lt;/li>
&lt;li>Routing protocol&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Link - data transfer between neighboring network elements
&lt;ul>
&lt;li>Ethernet&lt;/li>
&lt;li>WiFi&lt;/li>
&lt;li>PPP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Physical - bits &amp;ldquo;on the wire&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>ISO/OSI Reference Model (Implemented in Application)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Presentation
&lt;ul>
&lt;li>Allow applications to interpret meaning of data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Session
&lt;ul>
&lt;li>Synchronization, checkpoint, recovery of data exchange&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Encapsulation&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/encapsulation.png" alt="encapsulation">&lt;/p>
&lt;p>&lt;strong>Network Security&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Fields of network security
&lt;ul>
&lt;li>How bad guys can attack computer networks&lt;/li>
&lt;li>How we can defend networks against attacks&lt;/li>
&lt;li>How to design architectures that are immune to attacks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Internet not originally designed with much security in mind&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Bad Guys&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Malware
&lt;ul>
&lt;li>From
&lt;ul>
&lt;li>Virus&lt;/li>
&lt;li>Worm&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Spyware malware&lt;/li>
&lt;li>Usage
&lt;ul>
&lt;li>Botnet&lt;/li>
&lt;li>Spam&lt;/li>
&lt;li>DDos attacks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Denial of service (DoS)
&lt;ul>
&lt;li>Make resources (server, bandwidth) unavailable to legitimate traffic by overwhelming resource with fake traffic&lt;/li>
&lt;li>Procedures
&lt;ol>
&lt;li>Select target&lt;/li>
&lt;li>Break into hosts around the network&lt;/li>
&lt;li>Send packets to target from compromised hosts&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Packet interception
&lt;ul>
&lt;li>Packet &amp;ldquo;sniffing&amp;rdquo;&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/packet_sniffing.png" alt="packet_sniffing">
&lt;ul>
&lt;li>Broadcast media (shared ethernet, wireless)&lt;/li>
&lt;li>Promiscuous network interface reads/records all packets&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Fake identity
&lt;ul>
&lt;li>IP spoofing: send packet with false source address&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ip_spoffing.png" alt="ip_spoffing">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Use&amp;rsquo;s View Of Internet&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Single large (global) network
&lt;ul>
&lt;li>Achieved through software that implements abstractions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>User&amp;rsquo;s computers all attach directly&lt;/li>
&lt;li>No other structure visible&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/user_view_internet.png" alt="user_view_internet">
&lt;strong>Internet History&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Early packet-switching principles (1961-1972)&lt;/li>
&lt;li>Internetworking, new and proprietary nets (1972-1980)&lt;/li>
&lt;li>New protocols, a proliferation of networks (1980-1990)&lt;/li>
&lt;li>Commercialization, the Web, new apps (1990&amp;rsquo;s, 2000&amp;rsquo;s)&lt;/li>
&lt;li>More new applications, Internet is &amp;ldquo;everywhere&amp;rdquo; (2005-Present)&lt;/li>
&lt;/ul></description></item><item><title>COMP7404 Topic 3 Adversarial Search</title><link>https://jpg6.com/en/2020/10/05/comp7404_topic3/</link><pubDate>Mon, 05 Oct 2020 00:30:11 +0800</pubDate><guid>https://jpg6.com/en/2020/10/05/comp7404_topic3/</guid><description>&lt;h1 id="comp7404-computational-intelligence-and-machine-learning">COMP7404 Computational Intelligence and Machine Learning&lt;/h1>
&lt;h2 id="topic-3-adversarial-search">Topic 3 Adversarial Search&lt;/h2>
&lt;p>&lt;strong>A Multi-agent Competitive Environment&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Other agents are planning against us&lt;/li>
&lt;li>Goals are in conflict (not necessarily)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Game Definition&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A game can be defined as
&lt;ul>
&lt;li>s : States&lt;/li>
&lt;li>s0: Initial state&lt;/li>
&lt;li>Player(s) : Defines which player has the move&lt;/li>
&lt;li>Actions(s) : Returns a set of legal moves&lt;/li>
&lt;li>Result(s,a) : Defines the result of a move&lt;/li>
&lt;li>TerminalTest(s) : True when game is over, false otherwise&lt;/li>
&lt;li>Utility(s,p) : Defines the final numeric value for a game that ends in terminal state s for player p&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A game tree can be constructed
&lt;ul>
&lt;li>Nodes are game states and edges are moves&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Tic-Tac-Toe Game Tree&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/tic_tac_toe_game_tree.png" alt="tic_tac_toe_game_tree">&lt;/p>
&lt;p>&lt;strong>Minimax Search&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A state-space search tree&lt;/li>
&lt;li>Players alternate turns&lt;/li>
&lt;li>Compute each node’s minimax value
&lt;ul>
&lt;li>the best achievable utility against a rational (optimal) adversary&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/minimax.png" alt="minimax">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Will lead to optimal strategy
&lt;ul>
&lt;li>Best achievable payoff against best play&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Example
&lt;ul>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/minimax_example.png" alt="minimax_example">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Implementation
&lt;ul>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/minimax_implementation.png" alt="minimax_implementation">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Properties
&lt;ul>
&lt;li>Complete - Yes, if tree is finite&lt;/li>
&lt;li>Optimal - In general no, yes against an optimal opponent&lt;/li>
&lt;li>Time complexity - O(b^m)&lt;/li>
&lt;li>Space complexity - O(bm)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Depth-Limit Search (DLS)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A depth limit search (DLS)
&lt;ul>
&lt;li>Search only to a limited depth in the tree&lt;/li>
&lt;li>Replace terminal utilities with an evaluation function for non-terminal positions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Problems
&lt;ul>
&lt;li>Guarantee of optimal play is gone&lt;/li>
&lt;li>Need to design evaluation function&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An evaluation function
&lt;ul>
&lt;li>An evaluation function Eval(s) scores non-terminals in depth-limited search
&lt;ul>
&lt;li>An estimate of the expected utility of the game from a given position&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ideal function
&lt;ul>
&lt;li>The actual minimax value of the position&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The performance of a game-playing program depends strongly on the quality of its evaluation functio&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>𝛼-𝛽 Pruning Algorithm&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/pruning_algorithm.png" alt="pruning_algorithm">&lt;/p>
&lt;ul>
&lt;li>Min version
&lt;ul>
&lt;li>Consider Min’s value at some node n&lt;/li>
&lt;li>n will decrease (or stay constant) while the descendants of n are examined&lt;/li>
&lt;li>Let m be the best value that Max can get at any choice point along the current path from the root&lt;/li>
&lt;li>If n becomes worse (&amp;lt;) than m
&lt;ul>
&lt;li>Max will avoid it&lt;/li>
&lt;li>Stop considering n’s other children&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Max version is symmetric&lt;/li>
&lt;li>Properties
&lt;ul>
&lt;li>Pruning has no effect on the minimax value at the root&lt;/li>
&lt;li>Values of intermediate nodes might be wrong
&lt;ul>
&lt;li>Action selection not appropriate for this simple version of alpha-beta pruning&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Move ordering
&lt;ul>
&lt;li>The effectiveness of alpha-beta pruning is highly dependent on the order in which states are examined&lt;/li>
&lt;li>It is worthwhile to try to examine first the successors that are likely best
&lt;ul>
&lt;li>Examine only O(b^(m/2)) nodes to pick the best move, instead of O(bm) for minimax&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;a href="https://kartikkukreja.wordpress.com/2014/06/29/alphabetasearch/">A Reference Note&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Expectimax Search&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/expectimax_search.png" alt="expectimax_search">&lt;/p>
&lt;ul>
&lt;li>Values reflect average case outcomes, not worst case outcomes&lt;/li>
&lt;li>Expectimax search computes the expected score under optimal play
&lt;ul>
&lt;li>Max nodes as in minimax search&lt;/li>
&lt;li>Chance nodes are like min nodes but the outcome is uncertain&lt;/li>
&lt;li>Calculate their expected utilities
&lt;ul>
&lt;li>i.e., take weighted average of children&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Expectiminimax
&lt;ul>
&lt;li>Environment is an extra &amp;ldquo;random agent&amp;rdquo; player that moves after each min/max agent&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Multi-Agent Utilities&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/multi_agent.png" alt="multi_agent">&lt;/p>
&lt;ul>
&lt;li>Generalisation of minimax
&lt;ul>
&lt;li>Terminals and nodes have utility vectors&lt;/li>
&lt;li>Each player maximizes its own component&lt;/li>
&lt;li>Gives rise to cooperation and competition dynamically&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/46706438">A Reference Note1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kartikkukreja.wordpress.com/2015/07/04/adversarial-search/">A Reference Note2&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>COMP7404 Topic 2 Beyond Classical Search</title><link>https://jpg6.com/en/2020/10/04/comp7404_topic2/</link><pubDate>Sun, 04 Oct 2020 21:30:11 +0800</pubDate><guid>https://jpg6.com/en/2020/10/04/comp7404_topic2/</guid><description>&lt;h1 id="comp7404-computational-intelligence-and-machine-learning">COMP7404 Computational Intelligence and Machine Learning&lt;/h1>
&lt;h2 id="topic-2-beyond-classical-search">Topic 2 Beyond Classical Search&lt;/h2>
&lt;p>&lt;strong>Planning vs Identification&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Planing: sequence of actions
&lt;ul>
&lt;li>The path to the goal is the important thing&lt;/li>
&lt;li>Paths have various costs, depths&lt;/li>
&lt;li>Heuristics to guide, frontier to keep backups&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Identification: assignments to variables
&lt;ul>
&lt;li>The goal itself is important, not the path&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Local Search can find solutions faster for specific types of identification problems&lt;/em>&lt;/p>
&lt;p>&lt;strong>Local Search&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Evaluate and modify one current state rather than systematically explore paths from an initial state&lt;/li>
&lt;li>Suitable for problems were all that matters in the solution state and not the path cost to reach it&lt;/li>
&lt;li>Although local search algorithms are not systematic they have two advantages
&lt;ul>
&lt;li>Require very little memory&lt;/li>
&lt;li>Often find reasonable solutions in large spaces&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Local Search Algorithm&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> Randomly initialize currentState
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> If cost of &lt;span class="nv">currentState&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="k">return&lt;/span> currentState
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> If min&lt;span class="o">(&lt;/span>cost&lt;span class="o">(&lt;/span>getNeighbors&lt;span class="o">(&lt;/span>currentState&lt;span class="o">)))&lt;/span> &amp;gt; cost&lt;span class="o">(&lt;/span>currentState&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> goto step &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span>we have reached a &lt;span class="nb">local&lt;/span> minimum&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Select cheapest neighbor as currentState and goto step2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Example: 8-Queens&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>States
&lt;ul>
&lt;li>Each state has 8 queens on board, one per column&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Successors
&lt;ul>
&lt;li>All possible states generated by moving single queen to another square in the same column&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cost function
&lt;ul>
&lt;li>Number of pairs of queens that are attacking each other, either directly and indirectly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Constraint Satisfaction Problems&lt;/strong>&lt;/p>
&lt;p>CSPs use a factored representation for states&lt;/p>
&lt;ul>
&lt;li>A set of variables, each of which has a value&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Defining CSPs&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A CSP consists of three components
&lt;ul>
&lt;li>A set of variables, X = {X1,&amp;hellip;,Xn}&lt;/li>
&lt;li>A set of domains, D = {D1,&amp;hellip;,Dn}, where Di = {V1,&amp;hellip;,Vk} for each variable Xi&lt;/li>
&lt;li>A set of constraints C which specify allowable combinations of values&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>To solve a CSP we need to define a state space
&lt;ul>
&lt;li>Each state is defined by an assignment of values to some or all variables {Xi = Vi, Xj = Vj,&amp;hellip;}&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Solving CSPs&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>States are defined by the values assigned so far&lt;/li>
&lt;li>Initial state
&lt;ul>
&lt;li>Empty assignment {}&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Successor function
&lt;ul>
&lt;li>Assign a value to an unassigned variable&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Goal test
&lt;ul>
&lt;li>Current assignment is complete and consistent&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Solutiona to CSPs&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Consistent - No constraints are violated&lt;/li>
&lt;li>Complete - Every variable is assigned&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Backtracking Search (The basic algorithm for solving CSPs)&lt;/strong>&lt;/p>
&lt;p>Idea&lt;/p>
&lt;ul>
&lt;li>Only consider assignments to a single variable at each point&lt;/li>
&lt;li>Only allow legal assignemnts to each point&lt;/li>
&lt;/ul>
&lt;p>DFS with these two ideas is called backtracking search&lt;/p>
&lt;p>&lt;strong>Improving Backchecking&lt;/strong>&lt;/p>
&lt;p>Idea&lt;/p>
&lt;ul>
&lt;li>Forward checking (FC)&lt;/li>
&lt;li>Constraint propagation (AC-3)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Filtering: Forward Checking&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Filtering
&lt;ul>
&lt;li>Keep track of domains for unassigned variables and cross off bad options&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Forward checking
&lt;ul>
&lt;li>Cross off values that violate a constraint when added to the existing assignment&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Improving Backtracking Further&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Variable Ordering
&lt;ul>
&lt;li>Minimum remaining values (MRV)
&lt;ul>
&lt;li>Choose the variable with the fewest legal left values in its domain
&lt;ul>
&lt;li>Most constraint variable&lt;/li>
&lt;li>Fail-first heuristic&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tie-breaker among MRV variables
&lt;ul>
&lt;li>Degree Heuristic (Deg)
&lt;ul>
&lt;li>Choose the variable with the most constraints on remaining variables&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Value Ordering
&lt;ul>
&lt;li>Least constraining value (LCV)
&lt;ul>
&lt;li>Choose the value that rules out the fewest values in the remaining variables&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Mobile Payment Systems Case Study</title><link>https://jpg6.com/en/2020/10/01/ecom6013_discussion_topic3/</link><pubDate>Thu, 01 Oct 2020 22:25:19 +0800</pubDate><guid>https://jpg6.com/en/2020/10/01/ecom6013_discussion_topic3/</guid><description>&lt;h1 id="mobile-payment-systems">Mobile Payment Systems&lt;/h1>
&lt;h2 id="why-has-china-been-an-ideal-environment-to-support-mobile-payment-systems">Why has China been an ideal environment to support mobile payment systems&lt;/h2>
&lt;p>Politically, payment licenses are controlled by government (relative financial institutions) and under strict regulation. So, tech giants like Alibaba who are qualified can increasingly develop their payment business in the early age. Plus, in the early stage of mobile payment, laws and rules are not so completed. Payment platform can utilize smart market strategies (like very high return rate) to attract more new potential users and enhance existing users’ engagement, which is effective in market expanding stage.&lt;/p>
&lt;p>Economically and socially, China’s economic development was relatively slower than major developed countries such as the U. S. or Japan. And the majority of Chinese get used to spending money they already have instead of ahead-of-time consumption. Thus, credit card payment hasn’t been so popular in the past few decades (only about 0.31 credit card per capita) compared to western countries. Since the credit card payment (mainly related to the bank) is not the dominant way for daily payment, it’s possible for a new payment method to grow and domain the payment market in a “free compete” environment.&lt;/p>
&lt;p>Technically, E-Commerce and internet technology has been developing rapidly in China recently. As a country with huge population and strong consumption ability, the market urgently needs a new way of payment. With the new utilization of established technologies (4G, mobile phone development, cyber security, etc.) and emerging technologies (QR-Code, information system architecture, etc.), payment platform can integrate various functions into the existing system and provide a more powerful and advantageous platform.&lt;/p>
&lt;p>To sum up, China has been an ideal environment to support mobile payment systems.&lt;/p></description></item><item><title>ECOM6013 Topic 7 E-Payment Systems</title><link>https://jpg6.com/en/2020/09/27/ecom6013_topic7/</link><pubDate>Sun, 27 Sep 2020 11:30:28 +0800</pubDate><guid>https://jpg6.com/en/2020/09/27/ecom6013_topic7/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-7-e-payment-systems">Topic 7 E-Payment Systems&lt;/h2>
&lt;p>&lt;strong>Payment System Stakeholders&amp;rsquo; Priorities&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Customer
&lt;ol>
&lt;li>Low-risk&lt;/li>
&lt;li>Low-cost&lt;/li>
&lt;li>Refutable&lt;/li>
&lt;li>Convenience&lt;/li>
&lt;li>Reliable&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Merchants
&lt;ol>
&lt;li>Low-risks&lt;/li>
&lt;li>Low-cost&lt;/li>
&lt;li>Irrefutable&lt;/li>
&lt;li>Secure&lt;/li>
&lt;li>Reliable&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Financial intermediaries
&lt;ol>
&lt;li>Secure&lt;/li>
&lt;li>Low-risk&lt;/li>
&lt;li>Maximizing profit&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Government regulators
&lt;ol>
&lt;li>Secure&lt;/li>
&lt;li>Trust&lt;/li>
&lt;li>Protecting participants and enforcing reporting&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Type of Payment Systems&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Cash&lt;/li>
&lt;li>Cheque transfer&lt;/li>
&lt;li>Credit card&lt;/li>
&lt;li>Stored value&lt;/li>
&lt;li>Accumulating balance&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>B2C Payment System&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Credit cards&lt;/li>
&lt;li>Financial cybermediaries&lt;/li>
&lt;li>Electronic bill presentment and payment&lt;/li>
&lt;li>Smart cards&lt;/li>
&lt;li>Mobile payment&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Features&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Make large purchases&lt;/li>
&lt;li>Will not pay with credit card or financial cybermediary&lt;/li>
&lt;li>Use financial EDI (Electronic Data Interchange)&lt;/li>
&lt;li>Pay for many purchases at once&lt;/li>
&lt;li>Likely that cloud-based payment gateway (or other Internet-based technology) will eventually take over completely!&lt;/li>
&lt;li>FPS - HKMA &amp;amp; HKICL Payment Gateway Faster Payment System (FPS)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>E-Commere Payment Systems&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/online_credit_transaction.png" alt="online_credit_transaction">&lt;/p>
&lt;ul>
&lt;li>Credit cards&lt;/li>
&lt;li>Debit cards&lt;/li>
&lt;li>Digital wallets&lt;/li>
&lt;li>Digital cash&lt;/li>
&lt;li>Digital checking&lt;/li>
&lt;li>Online stored value systems
&lt;ul>
&lt;li>PayPal, AliPay, WeChat Pay&lt;/li>
&lt;li>Smart cards
&lt;ul>
&lt;li>Contact&lt;/li>
&lt;li>Contactless
&lt;ul>
&lt;li>EZPass, Octopus card&lt;/li>
&lt;li>Radio Frequency ID (RFID)&lt;/li>
&lt;li>Near Field Communications (NFC)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Future Payment System&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Exporting existing payment systems that work in traditional commerce to E-Commerce causes problems&lt;/li>
&lt;li>Need a payment/financial system designed for the online world
&lt;ul>
&lt;li>Cybercurrencies / digital currency&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>ECOM6013 Topic 6 E-Commerce Security</title><link>https://jpg6.com/en/2020/09/26/ecom6013_topic6/</link><pubDate>Sat, 26 Sep 2020 15:46:28 +0800</pubDate><guid>https://jpg6.com/en/2020/09/26/ecom6013_topic6/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-6-e-commerce-security">Topic 6 E-Commerce Security&lt;/h2>
&lt;p>&lt;strong>Good E-Commerce Security&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Highest degree of security
&lt;ul>
&lt;li>New technologies&lt;/li>
&lt;li>Organizational policies and procedures&lt;/li>
&lt;li>Industry standards and government law&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Other factors
&lt;ul>
&lt;li>Cost of security vs. potential loss&lt;/li>
&lt;li>Security often breaks at weakest link&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The Tense Between Security and Other Values&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Security vs. Easy of use
&lt;ul>
&lt;li>More Secure -&amp;gt; More difficult to use + slower&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Security vs. Desire of individuals to act anonmously&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Basic E-Commerce Security Issues and Landscape&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>E-Commerce security requirements
&lt;ul>
&lt;li>Authentication (verify the real identity)&lt;/li>
&lt;li>Authorization (determine the entity&amp;rsquo;s access)&lt;/li>
&lt;li>Auditing&lt;/li>
&lt;li>Availability&lt;/li>
&lt;li>Nonrepudiation (assurance that trading partners can&amp;rsquo;t falsely deny their purchase or transaction)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Risk (a vulnerability will be known and used)&lt;/li>
&lt;li>Social engineering (non-technical attack, trick users to do some certain actions)&lt;/li>
&lt;li>Spam&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>E-Commerce of Today&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Threats
&lt;ul>
&lt;li>Money thefts&lt;/li>
&lt;li>Identity thefts&lt;/li>
&lt;li>Malware&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Solutions
&lt;ul>
&lt;li>Authentication&lt;/li>
&lt;li>Intrusion checking&lt;/li>
&lt;li>Firewalls&lt;/li>
&lt;li>Education&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Security Threats in the E-Commerce Environment&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Three key points of vulnerability
&lt;ul>
&lt;li>Client&lt;/li>
&lt;li>Server&lt;/li>
&lt;li>Communication pipeline (network channels)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/vulnerable_points_in_ecommerce.png" alt="vulnerable_points_in_ecommerce">&lt;/p>
&lt;p>&lt;strong>Most Common Security Threats&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Malicious code
&lt;ul>
&lt;li>Viruses&lt;/li>
&lt;li>Worms&lt;/li>
&lt;li>Ransomeware&lt;/li>
&lt;li>Trojan horses&lt;/li>
&lt;li>Backdoors&lt;/li>
&lt;li>Bots, botnets&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Unwanted programs
&lt;ul>
&lt;li>Browser parasites&lt;/li>
&lt;li>Adware&lt;/li>
&lt;li>Spyware&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Phishing
&lt;ul>
&lt;li>Deceptive online attack to obtain confidential information&lt;/li>
&lt;li>Social engineering, e-mail scams, spoofing legitimate websites&lt;/li>
&lt;li>Used for identity fraud and theft&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hacking and cybervandalism
&lt;ul>
&lt;li>Hackers vs. Crackers&lt;/li>
&lt;li>Cybervandalism (intentionally disrupting, defacing, destroying websites)&lt;/li>
&lt;li>Hacktivism&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data breach&lt;/li>
&lt;li>Credit card fraud/theft&lt;/li>
&lt;li>Spoofing&lt;/li>
&lt;li>Pharming&lt;/li>
&lt;li>Spam / junk websites&lt;/li>
&lt;li>Denial of sevices (DoS) attack (useless traffic to overwhelm network)&lt;/li>
&lt;li>Distributed denial of service (DDoS) attack (multiple computers to attack target network)&lt;/li>
&lt;li>Sniffing (eavesdropping program that monitors information traveling over a network)&lt;/li>
&lt;li>Insider jobs
&lt;ul>
&lt;li>Single financial threats&lt;/li>
&lt;li>Poorly designed security policy and server / client software&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Social network issues&lt;/li>
&lt;li>Mobile platform issues&lt;/li>
&lt;li>Cloud security issues&lt;/li>
&lt;li>IoT security issues&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The Information Assurance Model and Defense Objectives&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>CIA security triad
&lt;ul>
&lt;li>Confidentiality&lt;/li>
&lt;li>Integrity&lt;/li>
&lt;li>Availability&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Three Dimensions in Internet Security&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Integrity&lt;/li>
&lt;li>Nonrepudiation&lt;/li>
&lt;li>Authenticity&lt;/li>
&lt;li>Confidentiality&lt;/li>
&lt;li>Privacy&lt;/li>
&lt;li>Availability&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Technology Solutions&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Protecting internet communications
&lt;ul>
&lt;li>Cryptography&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Securing channels of communication
&lt;ul>
&lt;li>SSL, TLS
&lt;ul>
&lt;li>Establishes a secure, negotiated client-server session in which URL of requested document, along with contents, is encrypted&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ssl_protect.png" alt="ssl_protect">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>S-HTTP
&lt;ul>
&lt;li>Provides a secure message-oriented communications protocol designed for use in conjunction with HTTP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>VPNs
&lt;ul>
&lt;li>Allows remote users to securely access internal network via the Internet, using Point-to-Point Tunneling Protocol (PPTP)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wi-Fi&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Protecting networks
&lt;ul>
&lt;li>Firewalls&lt;/li>
&lt;li>Proxy servers&lt;/li>
&lt;li>Intrusion Detection System (IDS)&lt;/li>
&lt;li>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/firewall.png" alt="firewall">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Protecting servers and clients
&lt;ul>
&lt;li>OS security
&lt;ul>
&lt;li>Upgrades&lt;/li>
&lt;li>Patches&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Anti-virus software
&lt;ul>
&lt;li>Easiest and least expensive way to prevent threats to system integrity&lt;/li>
&lt;li>Requires daily updates&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Managing Risks&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Technology&lt;/li>
&lt;li>Effective management policies&lt;/li>
&lt;li>Public laws and active enforcement&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>A Security Plan: Management Policies&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Risk assessment&lt;/li>
&lt;li>Security policy&lt;/li>
&lt;li>Implementation plan
&lt;ul>
&lt;li>Security organization&lt;/li>
&lt;li>Access controls&lt;/li>
&lt;li>Authentication procedures, including biometrics&lt;/li>
&lt;li>Authorization policies, authorization management systems&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Security audit&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/security_plan.png" alt="security_plan">&lt;/p>
&lt;p>&lt;strong>Basic Concepts of User Authentication&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Something you know
&lt;ul>
&lt;li>Password&lt;/li>
&lt;li>PIN&lt;/li>
&lt;li>OTP&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Something you have
&lt;ul>
&lt;li>Physical key&lt;/li>
&lt;li>Token&lt;/li>
&lt;li>Magnetic card&lt;/li>
&lt;li>Smartcard&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Something you are
&lt;ul>
&lt;li>Fingerprint&lt;/li>
&lt;li>Voice&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Best use 2 Factors Authentication (2FA)&lt;/em>&lt;/p>
&lt;p>&lt;strong>Encryption&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Transfer data into cipher text readable only by sender and receiver&lt;/li>
&lt;li>Secures stored information and information transmission&lt;/li>
&lt;li>Provide 4/6 key dimensions of E-Commerce security
&lt;ul>
&lt;li>authentication&lt;/li>
&lt;li>Confidentiality&lt;/li>
&lt;li>Message Integrity&lt;/li>
&lt;li>Nonrepudiation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Symmetric Key Cryptography&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Sender and receiver use same digital key to encrypt and decrypt message&lt;/li>
&lt;li>Requires different set of keys for each transaction&lt;/li>
&lt;li>Strength of encryption
&lt;ul>
&lt;li>Length of binary key used to encrypt data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Standards
&lt;ul>
&lt;li>Data Encryption Standard (DES, 1977)&lt;/li>
&lt;li>Advanced Encryption Standard (AES, 2000)&lt;/li>
&lt;li>Other standards use keys with up to 2,048 bits&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Public Key Cryptography&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Uses two mathematically related digital keys
&lt;ul>
&lt;li>Public key (widely disseminated)&lt;/li>
&lt;li>Private key (kept secret by owner)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Both keys used to encrypt and decrypt message
&lt;ul>
&lt;li>Once key used to encrypt message, same key cannot be used to decrypt message&lt;/li>
&lt;li>Sender uses recipient’s public key to encrypt message&lt;/li>
&lt;li>Recipient uses his/her private key to decrypt it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/public_key_cryptography.png" alt="public_key_cryptography">&lt;/p>
&lt;p>&lt;strong>Public Key Encryption Using Digital Signatures and Hash Digests&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Hash function
&lt;ul>
&lt;li>Mathematical algorithm (e.g. MD5 and SHA-1) that produces fixed-length number called message or hash digest&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sender applies hash function to the message and then encrypts the message AND the hash digest with recipient’s public key&lt;/li>
&lt;li>Sender then encrypts the whole package with sender’s private key, creating digital signature for authenticity, nonrepudiation&lt;/li>
&lt;li>Recipient first uses sender’s public key to authenticate the message and then the recipient’s private key to decrypt the hash digest and the message&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/public_key_cryptography_digital_signature.png" alt="public_key_cryptography_digital_signature">&lt;/p>
&lt;p>&lt;strong>Digital Envelop&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Addresses weaknesses of
&lt;ul>
&lt;li>Public key encryption (computationally slow)&lt;/li>
&lt;li>Symmetric key encryption (insecure transmission lines)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Uses symmetric key encryption to encrypt document&lt;/li>
&lt;li>Uses public key encryption to encrypt and send symmetric key&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/digital_envelop.png" alt="digital_envelop">&lt;/p>
&lt;p>&lt;strong>Digital Certificates and Public Key Infrastructure (PKI)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Digital certificate
&lt;ul>
&lt;li>Name of subjects/company&lt;/li>
&lt;li>Subject&amp;rsquo;s public key&lt;/li>
&lt;li>Digital certificate serial number&lt;/li>
&lt;li>Expiration date, issuance date&lt;/li>
&lt;li>Digital signature of certification authority (trusted third party institution) that issues certificate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Public Key Infrastructure (PKI)
&lt;ul>
&lt;li>CAs and digital certificate procedures that are accepted by all parties&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/digital_certificate.png" alt="digital_certificate">&lt;/p>
&lt;p>&lt;strong>Limits to Encryption Solutions&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Doesn’t protect storage of private key&lt;/li>
&lt;li>No guarantee that verifying computer of merchant is secure&lt;/li>
&lt;li>CAs are unregulated, self-selecting organizations&lt;/li>
&lt;/ul></description></item><item><title>ECOM6013 Topic 5 Mobile Commerce</title><link>https://jpg6.com/en/2020/09/21/ecom6013_topic5/</link><pubDate>Mon, 21 Sep 2020 10:44:28 +0800</pubDate><guid>https://jpg6.com/en/2020/09/21/ecom6013_topic5/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-5-mobile-commerce">Topic 5 Mobile Commerce&lt;/h2>
&lt;p>&lt;strong>Basic Principle of Mobile Technology&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>FDMA (Frequency Division Multiple Access)&lt;/li>
&lt;li>TDMA (Time Division Multiple Access)&lt;/li>
&lt;li>CDMA (Code Division Multiple Access)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Fundamental Mobility: Cellphones&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cellphones.png" alt="cellphones">&lt;/p>
&lt;p>&lt;strong>Cell Handover&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cell_handover.png" alt="cell_handover">&lt;/p>
&lt;p>&lt;strong>4G vs. 5G&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>4G
&lt;ul>
&lt;li>10 ms&lt;/li>
&lt;li>100 Thousand Connections / km^2&lt;/li>
&lt;li>1 Gbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>5G
&lt;ul>
&lt;li>&amp;lt; 1ms&lt;/li>
&lt;li>1 Million Connections / km^2&lt;/li>
&lt;li>20 Gbps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>E-Commerce vs. M-Commerce&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>E-Commerce
&lt;ul>
&lt;li>Device: PC&lt;/li>
&lt;li>Network: Internet (HTTP)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>M-Commerce
&lt;ul>
&lt;li>Device: Mobile devices&lt;/li>
&lt;li>Network
&lt;ul>
&lt;li>Mobile carrier network&lt;/li>
&lt;li>WiFi&lt;/li>
&lt;li>Local frequency (RFID/NFC)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Definition of M-Commerce&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Buying and Selling via mobile devices&lt;/li>
&lt;li>Paying via mobile devices&lt;/li>
&lt;li>Use of any technologies to support the above&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Mobile Devices&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Devices
&lt;ul>
&lt;li>Mobile phone/smart phone&lt;/li>
&lt;li>Tablet computer&lt;/li>
&lt;li>Wearable technology&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Usages
&lt;ul>
&lt;li>Transact&lt;/li>
&lt;li>Communicate&lt;/li>
&lt;li>Entertain&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Roles in M-Commerce&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Users
&lt;ul>
&lt;li>End users/system users&lt;/li>
&lt;li>Suppliers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Network operators (offer transport facility and network infrastructure)&lt;/li>
&lt;li>Service providers (develop new devices)&lt;/li>
&lt;li>Content providers (aggregate contents)&lt;/li>
&lt;li>Commerce mediators (provide solutions and services)&lt;/li>
&lt;li>Finance organizations (provide framework and infrasture for payment)&lt;/li>
&lt;li>Mobile device (interacting with all roles)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>M-Commerce Services and Applications&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Sevices
&lt;ul>
&lt;li>Mobile ticketing&lt;/li>
&lt;li>Mobile money transfer&lt;/li>
&lt;li>Conetent purchase and delivery&lt;/li>
&lt;li>Information services&lt;/li>
&lt;li>Mobile banking&lt;/li>
&lt;li>Mobile browsing&lt;/li>
&lt;li>Mobile purchase&lt;/li>
&lt;li>Mobile marketing and advertising&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Applications
&lt;ul>
&lt;li>Entertainment
&lt;ul>
&lt;li>Music&lt;/li>
&lt;li>Games&lt;/li>
&lt;li>graphics&lt;/li>
&lt;li>Video&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Communications
&lt;ul>
&lt;li>Short messaging&lt;/li>
&lt;li>Multi-media messaging&lt;/li>
&lt;li>Unified messaging&lt;/li>
&lt;li>E-mail&lt;/li>
&lt;li>Social&lt;/li>
&lt;li>Video conferencing&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transactions
&lt;ul>
&lt;li>Banking&lt;/li>
&lt;li>&lt;a href="https://www.merriam-webster.com/dictionary/broking">Broking&lt;/a>&lt;/li>
&lt;li>Shopping&lt;/li>
&lt;li>Auctions&lt;/li>
&lt;li>Betting&lt;/li>
&lt;li>Booking &amp;amp; reservations&lt;/li>
&lt;li>Mobile wallet&lt;/li>
&lt;li>Mobile purse&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Information
&lt;ul>
&lt;li>News&lt;/li>
&lt;li>City guides&lt;/li>
&lt;li>Directory services&lt;/li>
&lt;li>Maps&lt;/li>
&lt;li>Traffic and weather&lt;/li>
&lt;li>Corporate information&lt;/li>
&lt;li>Market data&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>PTDs (Personal Trusted Devices)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Location and orientation&lt;/li>
&lt;li>Multiple types of networking (NFC/Bluetooth)&lt;/li>
&lt;li>&lt;a href="https://www.merriam-webster.com/dictionary/accelerometers">Accelerometers&lt;/a>&lt;/li>
&lt;li>Camera&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>QR Code (Quick Response Code)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Originally designed as a two-dimensional barcode (not for mobile)&lt;/li>
&lt;li>Standardized (ISO/IEC 18004:2006)&lt;/li>
&lt;li>Oatented (but free license)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Other Enabling Technologies&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>GPS
&lt;ul>
&lt;li>Widely available on most devices&lt;/li>
&lt;li>Geo-loctaion and &lt;a href="https://buildfire.com/what-is-geofencing/">geo-fencing&lt;/a>&lt;/li>
&lt;li>Doesn&amp;rsquo;t work inside buildings&lt;/li>
&lt;li>High battery consumption&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NFC/RFID
&lt;ul>
&lt;li>Great accuracy&lt;/li>
&lt;li>Low cost&lt;/li>
&lt;li>Not support on all devices&lt;/li>
&lt;li>20cm range&lt;/li>
&lt;li>High battery consumption&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Obstacles&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Mobile device power
&lt;ul>
&lt;li>GPS/network calls cost hign power&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Privacy
&lt;ul>
&lt;li>Continuous tracking&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Network
&lt;ul>
&lt;li>Bandwidth&lt;/li>
&lt;li>Congestion&lt;/li>
&lt;li>Processing speed&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>New iPad Air 4 (2020) Presence by Apple Inc.</title><link>https://jpg6.com/en/2020/09/18/ecom6013_discussion_topic2/</link><pubDate>Fri, 18 Sep 2020 01:25:19 +0800</pubDate><guid>https://jpg6.com/en/2020/09/18/ecom6013_discussion_topic2/</guid><description>&lt;h1 id="e-commerce-presence-look-around">E-Commerce Presence Look Around&lt;/h1>
&lt;h2 id="new-ipad-air-4-2020-presence-by-apple-inc">New iPad Air 4 (2020) Presence by Apple Inc&lt;/h2>
&lt;p>&lt;a href="https://www.apple.com/hk/en/ipad-air/">&lt;strong>Website Link&lt;/strong>&lt;/a>&lt;/p>
&lt;p>The iPad Air 4 (2020) got shown off at Apple&amp;rsquo;s September event held on September 16. There is a specific designed website (mobile version included) for this product. I&amp;rsquo;d like to do an analysis towards this very impressive E-Commerce presence.&lt;/p>
&lt;p>Apple iPad Air product line is mainly targeted to educators/students, staffs and kids/teenagers. So, the most premium features this new product wants to convey to customers is its fancy appearance and powerful A14 Bionic for creation, study and entertainment. Rather than directly shows all parameter, the company presents a series of beautiful pictures (with impressive animations) to catch audiences’ attention at first glance.&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ipad_air_presence_1.png" alt="ipad_air_presence_1">&lt;/p>
&lt;p>Then potential audiences may want to get more detailed information about the appearance or performance they are interested in and scroll down to see more.&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ipad_air_presence_2.png" alt="ipad_air_presence_2">&lt;/p>
&lt;p>The most important part of this presence is the description of features. Considered major audiences are educators/students, relatively young staffs in a company and kids/teenagers in the family, every introduction part starts with an attractive header with the keywords like “work”, “working”, “class”, “together”, “leisure time” and so on. These headers help or guide audiences to think about their current status when stduying, working or entertaining and realize their needs or how this product can improve it.&lt;/p>
&lt;p>Plus, after depicting magic usages in the classroom, workplace or home, the website lists some purchase links of the compatible ipad accessories, guiding audiences to know (and also buy) more related products.&lt;/p>
&lt;p>However, there are some negative aspects of this presence. First, the fontsize of “Available in October” (the coming date) is really small with a light-gray color, which is not obvious. Second, the price of the product is listed on another website page by clicking a small “View pricing” button. Normally, when audiences view some products on the internet, they always want to know how much it costs and how they can buy it immediately. If this information is not easy or convienient to find, lots of them will lose patience.&lt;/p></description></item><item><title>ECOM6013 Topic 4 Website Design, Testing and Maintenance</title><link>https://jpg6.com/en/2020/09/16/ecom6013_topic4/</link><pubDate>Wed, 16 Sep 2020 21:25:28 +0800</pubDate><guid>https://jpg6.com/en/2020/09/16/ecom6013_topic4/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-4-website-design-testing-and-maintenance">Topic 4 Website Design, Testing and Maintenance&lt;/h2>
&lt;p>&lt;strong>Planing: The Systems Development Life Cycle&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Systems analysis/planing
&lt;ul>
&lt;li>Busisess objectives&lt;/li>
&lt;li>System functionalities&lt;/li>
&lt;li>Information requirements&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Systems design&lt;/li>
&lt;li>Building the system&lt;/li>
&lt;li>Testing&lt;/li>
&lt;li>Implementation&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/website_life_cycle.png" alt="website_life_cycle">&lt;/p>
&lt;p>&lt;strong>Quality Consideration&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Navigation&lt;/li>
&lt;li>Accessibility&lt;/li>
&lt;li>Scalability&lt;/li>
&lt;li>Reliability&lt;/li>
&lt;li>Maintainability&lt;/li>
&lt;li>Usability&lt;/li>
&lt;li>Compatibility and interoperability&lt;/li>
&lt;li>Security&lt;/li>
&lt;li>Readability&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>In-House / Outsourcing (Hiring vendors to provide services)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Build own / outsourcing&lt;/li>
&lt;li>Host own / outsourcing (preferred)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Implementation, Maintenance, and Optimization&lt;/strong>&lt;/p>
&lt;p>&lt;em>Systems break down unpredictably&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Ongoing maintenance&lt;/li>
&lt;li>Benchmarking&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Website Optimization&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Page generation&lt;/li>
&lt;li>Page delivery&lt;/li>
&lt;li>Page Content&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Simple vs. Multi-tier Website Architecture&lt;/strong>&lt;/p>
&lt;p>&lt;em>System architecture: Arrangement of software, machinery, and tasks in an information system&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Two-tier&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Web server&lt;/li>
&lt;li>Database server&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/two_tier_architecture.png" alt="two_tier_architecture">&lt;/p>
&lt;p>&lt;em>&lt;strong>Three-tier&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Web application servers&lt;/li>
&lt;li>Backend, legacy databases&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/three_tier_architecture.png" alt="three_tier_architecture">&lt;/p>
&lt;p>&lt;strong>Web Server Software&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Appache
&lt;ul>
&lt;li>Leading web server software&lt;/li>
&lt;li>works on UNIX, Linux OS&lt;/li>
&lt;li>Reliable&lt;/li>
&lt;li>Stable&lt;/li>
&lt;li>Open source&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Microsoft&amp;rsquo;s Internet Information Server (IIS)
&lt;ul>
&lt;li>Second major web server software&lt;/li>
&lt;li>works on Windows OS&lt;/li>
&lt;li>Integrated&lt;/li>
&lt;li>Easy to use&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Basic Functionality Provided by Web Servers&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Processing of HTTP requests&lt;/li>
&lt;li>Security services (Secure Sockets Layer) / Transport Layer Security&lt;/li>
&lt;li>File transfer protocol&lt;/li>
&lt;li>Search engine&lt;/li>
&lt;li>Data capture&lt;/li>
&lt;li>E-mail&lt;/li>
&lt;li>Site management tools
&lt;ul>
&lt;li>Verify links&lt;/li>
&lt;li>Identify files&lt;/li>
&lt;li>Monitor customer purchases&lt;/li>
&lt;li>Marketing campign effictiveness&lt;/li>
&lt;li>Track hits and other statistics&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Dynamic Page Generation Tools&lt;/strong>&lt;/p>
&lt;p>&lt;em>Contents stored in database and fetched when needed&lt;/em>&lt;/p>
&lt;ul>
&lt;li>CGI&lt;/li>
&lt;li>ASP&lt;/li>
&lt;li>JSP&lt;/li>
&lt;li>ODBC&lt;/li>
&lt;li>JDBC&lt;/li>
&lt;/ul>
&lt;p>Advantages&lt;/p>
&lt;ul>
&lt;li>Lower menu costs&lt;/li>
&lt;li>Permits easy online market segmentation&lt;/li>
&lt;li>Enables cost-free price discrimination&lt;/li>
&lt;li>Enable content management system (CMS)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Application Servers&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Provide specific business functionality required for a website&lt;/li>
&lt;li>Isolate business applictaions from Web servers and databases (middleware)&lt;/li>
&lt;li>Sigle-function applictaions being replaced by integrated software tools that combine all functionality needed for e-commerce site&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>E-Commerce Merchants Server Software&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Provides basic functions for sales
&lt;ul>
&lt;li>Online catalog&lt;/li>
&lt;li>Shopping cart&lt;/li>
&lt;li>Credit card processing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Packages&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Integrated environment that includes most of functionality needed
&lt;ul>
&lt;li>Shopping cart&lt;/li>
&lt;li>Merchandises display&lt;/li>
&lt;li>Order management&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Different options for different-sized businesses
&lt;ul>
&lt;li>Small, Medium - Yahoo Small Business, open-source solutions&lt;/li>
&lt;li>Mid-range - IBM Wbsphere Commerce Express,&amp;hellip;&lt;/li>
&lt;li>Hign-end - IBM WebSphere Professional/Enterprise,&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cloud-based SaaS solutions&lt;/li>
&lt;li>Key factors
&lt;ul>
&lt;li>Functionality&lt;/li>
&lt;li>Support for different models (e.g. m-commerce)&lt;/li>
&lt;li>Business process modeling tools&lt;/li>
&lt;li>Visual site management and reporting&lt;/li>
&lt;li>Performance and scalability&lt;/li>
&lt;li>Connectivity to existing business systems&lt;/li>
&lt;li>Compliance with standards&lt;/li>
&lt;li>Global and multicultural capability&lt;/li>
&lt;li>Local sales tax and shipping rules&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Hardware Platform&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Demand Side (overall customer demand)
&lt;ul>
&lt;li>Number of simultaneous users in peak periods&lt;/li>
&lt;li>User profile&lt;/li>
&lt;li>Type of content (dynamic/static)&lt;/li>
&lt;li>Required security&lt;/li>
&lt;li>Number of items in inventory&lt;/li>
&lt;li>Number of page requests&lt;/li>
&lt;li>Speed of legacy application&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Supply Side
&lt;ul>
&lt;li>Scalability
&lt;ul>
&lt;li>Vertically (increase processing power of individual components)&lt;/li>
&lt;li>Horizontally (multiple computers to share workload)&lt;/li>
&lt;li>Improve processing architecture&lt;/li>
&lt;li>Outsource hosting&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Eight Most Important Factors in Successful E-Commerce Site Design&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Functionality&lt;/li>
&lt;li>Informational&lt;/li>
&lt;li>Ease of use&lt;/li>
&lt;li>Redundant navigation&lt;/li>
&lt;li>Ease of purchase&lt;/li>
&lt;li>Multi-browser functionality&lt;/li>
&lt;li>Simple graphics&lt;/li>
&lt;li>Legible text&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Personalization Tools&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Persinalization (personal preference, prior history)&lt;/li>
&lt;li>Customization (better fit the needs)&lt;/li>
&lt;li>Cookies (primary method to achieve personalization)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Policy Set&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Privacy policy&lt;/li>
&lt;li>Accessibility (mainly for the disabled)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Mobile Website/Applications&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Type of m-commerce software
&lt;ul>
&lt;li>Moble website&lt;/li>
&lt;li>Mobile web app&lt;/li>
&lt;li>Native app&lt;/li>
&lt;li>Hybrid app&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Mobile Presence&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Identify business objectives, system functionality, and information requirements
&lt;ul>
&lt;li>Driving sales&lt;/li>
&lt;li>Branding&lt;/li>
&lt;li>Building customer community&lt;/li>
&lt;li>Advertising and promotion&lt;/li>
&lt;li>Gathering customer feedback&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Choices
&lt;ul>
&lt;li>Mobile first design (most efficient)&lt;/li>
&lt;li>Mobile website (least expensive)
&lt;ul>
&lt;li>Responsive web design (RWD) - for different screen resolution
&lt;ul>
&lt;li>Automates the inclusion of content based on profiles&lt;/li>
&lt;li>Fluid design&lt;/li>
&lt;li>Optimized performance&lt;/li>
&lt;li>Technically complex (implement, maintain and test)&lt;/li>
&lt;li>Higher cost, larger database&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Adaptive web design (AWD) - for different devices&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mobile web app (can utilize browser API)&lt;/li>
&lt;li>Native app (most expensive)
&lt;ul>
&lt;li>Use device hardware (usually better performance)&lt;/li>
&lt;li>Offline&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://web.dev/what-are-pwas/">Progressive Web App (PWA)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Platform constraints
&lt;ul>
&lt;li>Graphics&lt;/li>
&lt;li>File size&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Features needed to be considered
&lt;ul>
&lt;li>Hardware&lt;/li>
&lt;li>Connectivity&lt;/li>
&lt;li>Displays&lt;/li>
&lt;li>Interface&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Useful Resources&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.w3schools.com/whatis/">W3School&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/">Mozilla Development Network (MDN)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developers.google.com/web">Google Web Dev&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Build Own Websites&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wix.com">Wix Free Website Builder&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://shopify.com">Shopify Site Builder&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wordpress.com">WordPress&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gohugo.io">Hugo&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>ECOM6013 Topic 3 E-Commerce Presence</title><link>https://jpg6.com/en/2020/09/16/ecom6013_topic3/</link><pubDate>Wed, 16 Sep 2020 20:25:28 +0800</pubDate><guid>https://jpg6.com/en/2020/09/16/ecom6013_topic3/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-3-e-commerce-presence">Topic 3 E-Commerce Presence&lt;/h2>
&lt;p>&lt;strong>Image You E-Commerce Presence&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Idea
&lt;ul>
&lt;li>Mission&lt;/li>
&lt;li>Target audience&lt;/li>
&lt;li>Intended market space&lt;/li>
&lt;li>Strategic analysis&lt;/li>
&lt;li>Marketing matrix&lt;/li>
&lt;li>Development timeline&lt;/li>
&lt;li>Preliminary budget&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>About Money (e.g. Amazon&amp;rsquo;s e-commerce &amp;amp; Amazon&amp;rsquo;s AWS)
&lt;ul>
&lt;li>Business models&lt;/li>
&lt;li>Revenue models&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>About target audience
&lt;ul>
&lt;li>Demographics&lt;/li>
&lt;li>Lifestyle&lt;/li>
&lt;li>Consumption patterns&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Marketplace Characteristics
&lt;ul>
&lt;li>Size&lt;/li>
&lt;li>Growth&lt;/li>
&lt;li>Demographics&lt;/li>
&lt;li>Structure&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Content&lt;/li>
&lt;li>SWOT Analysis&lt;/li>
&lt;li>E-Commerce presence map&lt;/li>
&lt;li>Milestones&lt;/li>
&lt;li>Costs
&lt;ul>
&lt;li>Simple website: US$5000&lt;/li>
&lt;li>Small startup: US$25,000 tp US$50,000&lt;/li>
&lt;li>Large corporate website: US$100,000 + to millions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SWOT Analysis&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ecommerce_swot_analysis.png" alt="ecommerce_swot_analysis">&lt;/p>
&lt;p>&lt;strong>E-Commerce Presence Map&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/ecommerce_presence.png" alt="ecommerce_presence">&lt;/p>
&lt;p>&lt;strong>Building an E-Commerce Site: A Systematic Approach&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Challenges
&lt;ul>
&lt;li>Developing a clear understanding of business objectives&lt;/li>
&lt;li>Knowing how to choose the right technology to achieve those objectives&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Main factors
&lt;ul>
&lt;li>Management&lt;/li>
&lt;li>Hardware architecture&lt;/li>
&lt;li>Software&lt;/li>
&lt;li>Design&lt;/li>
&lt;li>Telecommunications&lt;/li>
&lt;li>Human resources&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>E-Commerce Presence Timeline&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Planing&lt;/li>
&lt;li>Website development&lt;/li>
&lt;li>Web implementation&lt;/li>
&lt;li>Social media plan&lt;/li>
&lt;li>Social media implementation&lt;/li>
&lt;li>Mobile plan&lt;/li>
&lt;/ol></description></item><item><title>ECOM6013 Topic 2 Internet and E-Commerce Infrasture</title><link>https://jpg6.com/en/2020/09/16/ecom6013_topic2/</link><pubDate>Wed, 16 Sep 2020 19:28:28 +0800</pubDate><guid>https://jpg6.com/en/2020/09/16/ecom6013_topic2/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-2-internet-and-e-commerce-infrasture">Topic 2 Internet and E-Commerce Infrasture&lt;/h2>
&lt;p>&lt;strong>Internet&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Interconnected network of thousands of networks and hundreds of millions of computers&lt;/li>
&lt;li>Links businesses, educational institutions, government agencies, and individuals&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>World Wide Web (WWW)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>One of the internet&amp;rsquo;s most popular services&lt;/li>
&lt;li>Provides access to billions, possibly trillions, of Web pages&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Evolution of Internet&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Innovation phase (1961 - 1974)&lt;/li>
&lt;li>Institutionalization phase (1975 - 1995)&lt;/li>
&lt;li>Commercialization Phase (1995 - present)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Packet Switching&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Slices digital messages into packets&lt;/li>
&lt;li>Sends packets along different communication paths as they become available&lt;/li>
&lt;li>Reassembles packets once they arrive at destination&lt;/li>
&lt;/ol>
&lt;p>It uses routers (special purpose computers that interconnect the computer networks that make up the internet and route packets)&lt;/p>
&lt;p>Less expensive, wasteful than circuit-switching&lt;/p>
&lt;p>&lt;strong>TCP/IP&lt;/strong>&lt;/p>
&lt;p>Four TCP/IP Layers&lt;/p>
&lt;ul>
&lt;li>Application layer (HTTPS - Web, Telnet - Terminal, FTP - Files, SMTP - E-mail)&lt;/li>
&lt;li>Transport layer (TCP)&lt;/li>
&lt;li>Internet layer (IP)&lt;/li>
&lt;li>Network interface layer (Ethernet)&lt;/li>
&lt;/ul>
&lt;p>IPv4&lt;/p>
&lt;ul>
&lt;li>32-bit number (handle up to 4 billion addresses)&lt;/li>
&lt;li>Four sets of numbers (201.61.186.227)&lt;/li>
&lt;/ul>
&lt;p>IPv6&lt;/p>
&lt;ul>
&lt;li>128-bit number (handle up to 1 quadrillion addresses)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Domain Names, DNS, and URLs&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Domain Name: IP address expressed in natural language&lt;/li>
&lt;li>Domain Name System (DNS): Allows numeric IP addresses to be expressed in natural language&lt;/li>
&lt;li>Uniform resource locator (URL): Address used by Web browser to identify location of content on the Web&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>DHCP (Dynamic Host Configuration Protocol)&lt;/strong>&lt;/p>
&lt;p>How computer gets its IP Address&lt;/p>
&lt;p>&lt;strong>Client/Server Computing&lt;/strong>&lt;/p>
&lt;p>Powerful personal computers (clients) connectd in network with one or more servers&lt;/p>
&lt;ul>
&lt;li>Storing files&lt;/li>
&lt;li>Software applications&lt;/li>
&lt;li>Access to printers, and so on&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The Mobile Platform&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Tablets&lt;/li>
&lt;li>Smartphones (disruptive technology): New processors &amp;amp; New operating systems&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Cloud Computing&lt;/strong>&lt;/p>
&lt;p>Firms and individuals obtain computing power and software over Internet (public, private and hybrid clouds)&lt;/p>
&lt;p>Three Types of Services&lt;/p>
&lt;ul>
&lt;li>Infrasture as a service (IaaS)&lt;/li>
&lt;li>Software as a service (SaaS)&lt;/li>
&lt;li>Platform as a service (PaaS)&lt;/li>
&lt;/ul>
&lt;p>Reduces Cost of&lt;/p>
&lt;ul>
&lt;li>Building and operating Websites&lt;/li>
&lt;li>Infrasture, IT support&lt;/li>
&lt;li>Hardware, software&lt;/li>
&lt;/ul>
&lt;p>Drawbacks&lt;/p>
&lt;ul>
&lt;li>Security risks&lt;/li>
&lt;li>Shifts responsibility for storage and control to providers&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Internet Infrasture&lt;/strong>&lt;/p>
&lt;p>Internet growth has boomed without disruption because of&lt;/p>
&lt;ul>
&lt;li>Client/server computing mode&lt;/li>
&lt;li>Hourglass, layered architecture&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/hourglass_model.png" alt="hourglass_model">&lt;/p>
&lt;ul>
&lt;li>Applications&lt;/li>
&lt;li>Middleware Services&lt;/li>
&lt;li>Transport Services and Representation Standards&lt;/li>
&lt;li>Network Technology Substrate&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Internet Network Architecture&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/internet_network_architecture.png" alt="internet_network_architecture">&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://www.thousandeyes.com/learning/techtorials/isp-tiers">Three Tiers Internet&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/three_tiers_internet.png" alt="three_tiers_internet">&lt;/p>
&lt;p>&lt;strong>The Internet Backbone&lt;/strong>&lt;/p>
&lt;p>Comprised of fiber-optic cable&lt;/p>
&lt;ul>
&lt;li>Faster speeds and greater bandwidth&lt;/li>
&lt;li>Thinner, lighter cables&lt;/li>
&lt;li>Less interference&lt;/li>
&lt;li>Better data security&lt;/li>
&lt;/ul>
&lt;p>Tier 1 Internet Service Providers (Tier 1 ISPs) or transit ISPs&lt;/p>
&lt;p>Numberous private networks physically connected to each other&lt;/p>
&lt;p>Underseas fiber optics, satellite links&lt;/p>
&lt;p>&lt;strong>Internet Exchange Points (IXPs)&lt;/strong>&lt;/p>
&lt;p>Originally called Network access Points (NAPs) or Metropolitan Area Exchanges (MAEs)&lt;/p>
&lt;ul>
&lt;li>Regional hubs where Tier 1 ISPs physically connect with one another and with regional Tier 2 ISPs&lt;/li>
&lt;li>Tier 2 ISPs provide Tier 3 ISPs with Internet access&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Tier 3 Internet Services Providers&lt;/strong>&lt;/p>
&lt;p>Services&lt;/p>
&lt;ul>
&lt;li>Narrowband&lt;/li>
&lt;li>Broadband&lt;/li>
&lt;li>Digital subscriber line (DSL)&lt;/li>
&lt;li>Cable Internet&lt;/li>
&lt;li>Satellite Internet&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Campus/Corporate Area Networks&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Local area networks operating within single organization&lt;/li>
&lt;li>Lease Internet access directly from regional and national carriers&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Mobile Internet Access&lt;/strong>&lt;/p>
&lt;p>Telephone-based&lt;/p>
&lt;ul>
&lt;li>3G/4G technologies now&lt;/li>
&lt;li>5G - higher bandwidth (10 Gbps), lower latency&lt;/li>
&lt;/ul>
&lt;p>Computer network-based (wireless local area network-based)&lt;/p>
&lt;ul>
&lt;li>Wi-Fi (IEEE 802.11 standards)
&lt;ul>
&lt;li>High speed, fixed broadband wireless LAN (WLAN)&lt;/li>
&lt;li>Wireless access point (Hot Spots)&lt;/li>
&lt;li>Limited range but inexpensive&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Zigbee, Bluetooth, BLE&lt;/li>
&lt;li>Low-power WAN - LoRaWan&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Intranets&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>TCP/IP network located within a single organization for communications and processing&lt;/li>
&lt;li>Used by private and government organizations for iternal networks&lt;/li>
&lt;li>All Internet application can be used in private intranets&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The Internet of Things (IOT)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Objects connected via sensors/RFID to Internet&lt;/li>
&lt;li>Interoperability issues and standards&lt;/li>
&lt;li>Security and privacy concerns&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&amp;ldquo;Smart things&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>&lt;strong>Limitations of the Current Internet&lt;/strong>&lt;/p>
&lt;p>Bandwidth&lt;/p>
&lt;ul>
&lt;li>Slow peak-hour service&lt;/li>
&lt;/ul>
&lt;p>Quality of Service&lt;/p>
&lt;ul>
&lt;li>Lantency&lt;/li>
&lt;/ul>
&lt;p>Network Architecture&lt;/p>
&lt;ul>
&lt;li>Identical requests are processed individually&lt;/li>
&lt;/ul>
&lt;p>Wired Internet&lt;/p>
&lt;ul>
&lt;li>Copper and expensive fiber-optic cables&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Who Governs the Internet?&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Internet Corporation for Assigned Names and Numbers (ICANN)&lt;/li>
&lt;li>Internet Engineering Task Force (IETF)&lt;/li>
&lt;li>Internet Research Task Force (IRTF)&lt;/li>
&lt;li>Internet Engineering Steering Group (IESG)&lt;/li>
&lt;li>Internet Architecture Board (IAB)&lt;/li>
&lt;li>Internet Society (ISOC)&lt;/li>
&lt;li>Internet Governance Forum (IGF)&lt;/li>
&lt;li>World Wide Web Consortium (W3C)&lt;/li>
&lt;li>Internet Network Operators Groups (NOGs)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>The Web&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Web invented (1989 - 1991)&lt;/li>
&lt;li>Mosaic web browser w/GUI (1993)&lt;/li>
&lt;li>Netscape Navigator, first commerical web browser (1994)&lt;/li>
&lt;li>Microsoft Internet Explorer (1995)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Hypertext&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Text formatted with embedded links&lt;/li>
&lt;li>Use Hypertext Transfer Protocol (HTTP) and URLs to locate resources on the web&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Markup Languages&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>HTML - Hypertext Markup Language&lt;/li>
&lt;li>XML - eXtensible Markup Language (Tags used are defined by user)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Web Servers and Clients&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Web server (web servers or physical server)&lt;/li>
&lt;li>Web server softwares (FTP, search engine, data capture, security services)&lt;/li>
&lt;li>Web client (capable of making HTTP requests and displaying HTML pages)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Features of the Internet and Web&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Communication Tools
&lt;ul>
&lt;li>E-mail&lt;/li>
&lt;li>Messaging application&lt;/li>
&lt;li>Online message boards&lt;/li>
&lt;li>Internet telephony (VOIP)&lt;/li>
&lt;li>Video conference, video chat, teleprence&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Search Engines (Google, Bing, Yahoo, baidu,&amp;hellip;)
&lt;ul>
&lt;li>Identify web pages that mach queries based
&lt;ul>
&lt;li>Keyword indexes&lt;/li>
&lt;li>Page ranking&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Downloadable and Streaming Media
&lt;ul>
&lt;li>Downloads&lt;/li>
&lt;li>Streaming technologies&lt;/li>
&lt;li>Podcasting&lt;/li>
&lt;li>Online video viewing (Explosion)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Web 2.0 Features and Services
&lt;ul>
&lt;li>Online Social Networks&lt;/li>
&lt;li>Blogs&lt;/li>
&lt;li>Wikis&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>VR and AR
&lt;ul>
&lt;li>Virtual reality - VR&lt;/li>
&lt;li>Augmented reality - AR (Pokemon Go)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Intelligent Digital Assistants
&lt;ul>
&lt;li>Used by search engine
&lt;ul>
&lt;li>Natural language&lt;/li>
&lt;li>Conversational interfaces, verbal commands&lt;/li>
&lt;li>Situation awareness&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Intelligent Assistants
&lt;ul>
&lt;li>Apple Siri&lt;/li>
&lt;li>Amazon Alexa&lt;/li>
&lt;li>Google Assistant&lt;/li>
&lt;li>Xiaomi Xiaoai&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mobile Apps
&lt;ul>
&lt;li>Wide range of use&lt;/li>
&lt;li>Platforms - IOS, Android&amp;hellip;&lt;/li>
&lt;li>Marketplaces - App Store, Google Play&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>COMP7404 Topic 1 Solving Problems by Searching</title><link>https://jpg6.com/en/2020/09/16/comp7404_topic1/</link><pubDate>Wed, 16 Sep 2020 00:28:11 +0800</pubDate><guid>https://jpg6.com/en/2020/09/16/comp7404_topic1/</guid><description>&lt;h1 id="comp7404-computational-intelligence-and-machine-learning">COMP7404 Computational Intelligence and Machine Learning&lt;/h1>
&lt;h2 id="topic-1-solving-problems-by-searching">Topic 1 Solving Problems by Searching&lt;/h2>
&lt;p>&lt;strong>Types of Search&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Uninformed Search (Know nothing about the problem except definition)&lt;/li>
&lt;li>Informed Search (know something more like how close to the goal)&lt;/li>
&lt;li>Local Search (Randomly initilize a state and make it better, e.g. Deep Learning)&lt;/li>
&lt;li>Constraint Satisfaction Problems (Know more about the problem)&lt;/li>
&lt;li>Adversarial Search (have an opponent, e.g. chess, star craft game)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Is Search the same as Unsupervised/Supervised Learning?&lt;/strong>&lt;/p>
&lt;p>Search is a process that tries to explore all options and find out which one is best. Search itself isn&amp;rsquo;t considered as Machine Learning though it&amp;rsquo;s always combined with Machine Learning in some system to improve the performance. Machine Learning is part of Artificial Intelligence.&lt;/p>
&lt;p>&lt;strong>Search Applications&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Vacuum World&lt;/li>
&lt;li>Pancake Flipping&lt;/li>
&lt;li>8 Puzzle&lt;/li>
&lt;li>Pathing&lt;/li>
&lt;li>TSP&lt;/li>
&lt;li>Game Play (chess, Go)&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Any problem where more than one alternative needs to be explored may try search&lt;/em>&lt;/p>
&lt;p>&lt;strong>Search Problem Definition&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>States - Agent location, dirt location&lt;/li>
&lt;li>Initial State&lt;/li>
&lt;li>Actions and Transition Model
&lt;ul>
&lt;li>available possible actions&lt;/li>
&lt;li>what each action does&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Goal Test&lt;/li>
&lt;li>Path Cost&lt;/li>
&lt;/ul>
&lt;p>&lt;em>A solution is a sequence of actions which transforms the start state to a goal state&lt;/em>&lt;/p>
&lt;p>&lt;strong>State Space (the set of all reachable states)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Usually a graph&lt;/li>
&lt;li>The possible action sequences form a search tree&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>State Space Graph vs. Search Tree&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>State Space Graph (each state occurs only once)
&lt;ul>
&lt;li>Nodes - states&lt;/li>
&lt;li>Arcs (connections between nodes) - action results&lt;/li>
&lt;li>A set of goal nodes - goal test&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Search Tree (states may occur more than once)
&lt;ul>
&lt;li>Root - start state&lt;/li>
&lt;li>Nodes - possible action sequences&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>some related concepts:&lt;/p>
&lt;ul>
&lt;li>depth of tree&lt;/li>
&lt;li>branching factor (max children)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>States vs. State Sequence&lt;/strong>&lt;/p>
&lt;p>A large number of state space -&amp;gt; A huge number of state sequences (e.g. a large number of nodes in the search tree)&lt;/p>
&lt;p>Example: Chess (10^43 possible states and 10^120 possible state sequences)&lt;/p>
&lt;p>&lt;strong>Romania Problem&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>States
&lt;ul>
&lt;li>The cities&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Initial State
&lt;ul>
&lt;li>Arad&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Actions and Transition model
&lt;ul>
&lt;li>Go to neighboring city&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Goal Test
&lt;ul>
&lt;li>In Bucharest?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Path Cost
&lt;ul>
&lt;li>Distance between the cities&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/romania_problem.png" alt="romania_problem">&lt;/p>
&lt;p>Store data in Python dictionary&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">romania&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;O&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;O&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;F&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;O&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;P&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;P&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;F&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;P&amp;#39;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">:[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use dictionart to store neighbors for each cities&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">romania&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Search Strategy&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Defines the order of node expansion&lt;/li>
&lt;li>Evaluated along the following dimensions
&lt;ul>
&lt;li>Completeness (always find a solution if exists)&lt;/li>
&lt;li>Optimality (find a least-cost solution)&lt;/li>
&lt;li>Time complexity (number of nodes generated)&lt;/li>
&lt;li>Space complexity (max number of nodes in memory)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Time/Space complexity&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>b: maximum branching factor of the search tree&lt;/li>
&lt;li>d: distance to root of the shadowest solution&lt;/li>
&lt;li>m: maximum length of any path in the state space&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Search Algorithms&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;del>Tree search algorithm&lt;/del> (TSA)&lt;/li>
&lt;li>&lt;del>Graph search algorithm&lt;/del> (GSA)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Uninformed (Blind) Search Strategies&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Breadth-first search (BFS)
&lt;ul>
&lt;li>BFS-TSA&lt;/li>
&lt;li>BFS-GSA&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Depth-first search (DFS)
&lt;ul>
&lt;li>DFS-TSA&lt;/li>
&lt;li>DFS-GSA&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Uniform-cost search (UCS)
&lt;ul>
&lt;li>UCS-TSA&lt;/li>
&lt;li>UCS-GSA&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>BFS (Time and Space Complexity)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Time - O(b^(d+1))&lt;/li>
&lt;li>Space - O(b^(d+1))&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>DFS (Space Complexity)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Time - O(b^m)&lt;/li>
&lt;li>Space - O(m*b)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>UCS (Time and Space Complexity)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>O(b^(C*/epsilon))&lt;/li>
&lt;/ul>
&lt;p>C*: cost of the optimal solution&lt;/p>
&lt;p>epsilon: smallest path cost&lt;/p>
&lt;p>&lt;strong>Queue&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://docs.python.org/3.8/library/collections.html#collections.deque">&lt;em>&lt;strong>Use deque in Python3&lt;/strong>&lt;/em>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> class collections.deque&lt;span class="o">([&lt;/span>iterable&lt;span class="o">[&lt;/span>, maxlen&lt;span class="o">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Returns a new deque object initialized left-to-right &lt;span class="o">(&lt;/span>using append&lt;span class="o">())&lt;/span> with data from iterable.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> If iterable is not specified, the new deque is empty.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popleft&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popleft&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>TSA - BFS Version&lt;/strong>&lt;/p>
&lt;p>When it applies DFS/UCS, only need to change the &lt;strong>data type of the frontier&lt;/strong> variable.&lt;/p>
&lt;p>&lt;em>&lt;strong>pseudo code&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">function&lt;/span> TSA&lt;span class="o">(&lt;/span>problem&lt;span class="o">)&lt;/span> returns solution
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initialize frontier using initial state of problem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> frontier is not empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> choose a node and remove it from frontier
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> node contains a goal state &lt;span class="k">then&lt;/span> &lt;span class="k">return&lt;/span> corresponding solution
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> explore the node, adding the resulting nodes to the frontier
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>actual python code&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">bfsTsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">startState&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popleft&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;a href="https://py3.codeskulptor.org/#user305_9vJQ4fFg1V_18.py">My demo of this bfsTsa.py&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>GSA - BFS Version&lt;/strong>&lt;/p>
&lt;p>&lt;em>&lt;strong>pseudo code&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">function&lt;/span> GSA &lt;span class="o">(&lt;/span>problem&lt;span class="o">)&lt;/span> returns solution
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initialize frontier using initial state of problem
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initialize explored &lt;span class="nb">set&lt;/span> to be empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> frontier is not empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> choose a node and remove it from frontier
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> node contains a goal state &lt;span class="k">then&lt;/span> &lt;span class="k">return&lt;/span> corresponding solution
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> If node is not in explored &lt;span class="nb">set&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add node to explored &lt;span class="nb">set&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> explore the node, adding the resulting nodes to the frontier
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>&lt;strong>actual python code&lt;/strong>&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">bfsGsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">startState&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exploredSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popleft&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">exploredSet&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exploredSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;a href="https://py3.codeskulptor.org/#user305_y821hvugeL_0.py">My demo of this bfsGsa.py&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>DFS&lt;/strong>&lt;/p>
&lt;p>DFS explores the deepest node in the search tree&lt;/p>
&lt;p>&lt;strong>Stack&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>TSA - DFS Version&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">dfsTsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">startState&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Exploring:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>&lt;span class="s1">&amp;#39;...&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>No results due to revisiting already explored nodes&lt;/em>&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://py3.codeskulptor.org/#user305_EDFKe58dW9_5.py">My demo of this dfsTsa.py&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>GSA - DFS Version&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">collections&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">dfsGsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">startState&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exploredSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">exploredSet&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exploredSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>&lt;a href="https://py3.codeskulptor.org/#user305_9vJQ4fFg1V_26.py">My demo of this dfsGsa.py&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Choices of Search Algorithms&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>BFS vs DFS
&lt;ul>
&lt;li>Don&amp;rsquo;t use BFS when b (maximum branching factor) / d (distance to root of the shadowest solution) is big&lt;/li>
&lt;li>Don&amp;rsquo;t use DFS when m (maximum length of any path) is big&lt;/li>
&lt;li>Choose BFS is solution is close to the root of tree&lt;/li>
&lt;li>Choose DFS is solution is deep inside the search tree&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TSA vs GSA
&lt;ul>
&lt;li>TSA (only frontier)
&lt;ul>
&lt;li>Could stuck in infinite loops&lt;/li>
&lt;li>Explore redundant loops&lt;/li>
&lt;li>Require less memory&lt;/li>
&lt;li>Easier to implement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GSA (froniter + explored set)
&lt;ul>
&lt;li>Avoid infinite loops&lt;/li>
&lt;li>Eliminate many redundant paths&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Both have time complexity issue&lt;/em>&lt;/p>
&lt;p>&lt;strong>UCS (Cheapest First Search)&lt;/strong>&lt;/p>
&lt;p>Explores the cheapest node first&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">romania&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">140&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">118&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">71&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;O&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;O&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">151&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">71&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">118&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">111&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">111&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">70&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span> &lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">120&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">140&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">99&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;F&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">151&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;O&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span> &lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">146&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">97&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;P&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">120&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">138&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;P&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">146&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span> &lt;span class="s1">&amp;#39;F&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">211&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">99&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;P&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">101&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">138&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">97&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">:[]}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Priority Queue in Python (&lt;a href="https://docs.python.org/3.8/library/heapq.html#module-heapq">Use heapq in Python3&lt;/a>)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">heapq&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">heappop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">frontier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">heappop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">heappop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">heappop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>TSA - UCS Version&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">heapq&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">heappop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">ucsTsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">heappop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>GSA - UCS Version&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">heapq&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">heappop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">ucsGsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exploredSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">heappop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">exploredSet&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exploredSet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Informed Search&lt;/strong>&lt;/p>
&lt;p>Employ problem specific knowledge beyond the definition of the problem itself&lt;/p>
&lt;ul>
&lt;li>Heuristic function&lt;/li>
&lt;/ul>
&lt;p>Example&lt;/p>
&lt;ul>
&lt;li>Greedy best-first search&lt;/li>
&lt;li>A* search&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Heuristic Function (designed for a particular search problem)&lt;/strong>&lt;/p>
&lt;p>A function that estimate how close you are to the goal&lt;/p>
&lt;p>h(n)&lt;/p>
&lt;ul>
&lt;li>Cost of the cheapest path from the state at node n to a goal state&lt;/li>
&lt;li>If n is a goal node, h(n) = 0&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Greedy Search (Best-first Search)&lt;/strong>&lt;/p>
&lt;p>Expand the node that has the lowest h(n)&lt;/p>
&lt;p>&lt;strong>Updated Romania Problem Definition (Add h(n))&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">romaniaH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">366&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">160&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;D&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">242&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;E&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">161&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;F&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">176&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;G&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">77&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;H&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">151&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;I&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">226&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;L&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">244&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;M&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">241&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;N&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">234&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;O&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">380&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;P&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;R&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">193&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">253&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;T&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">329&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;U&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;V&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">199&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;Z&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">374&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Greedy TSA Practice&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">heapq&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">heappop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">greedyTsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">startState&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">heappop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>A* Motivation UCS-TSA&lt;/strong>&lt;/p>
&lt;p>orders by backward cost&lt;/p>
&lt;p>g(n)&lt;/p>
&lt;p>&lt;strong>A* Motivation Greedy-TSA&lt;/strong>&lt;/p>
&lt;p>orders by forward cost&lt;/p>
&lt;p>h(n)&lt;/p>
&lt;p>&lt;em>* always means optimal in AI&lt;/em>&lt;/p>
&lt;p>&lt;strong>A* Motivation A*-TSA&lt;/strong>&lt;/p>
&lt;p>orders by backward cost + forward cost&lt;/p>
&lt;p>f(n) = g(n) + h(n)&lt;/p>
&lt;p>&lt;strong>A*-TSA Practice&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">heapq&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">heappush&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">heappop&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">aStarTsa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">goalState&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">frontier&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">startState&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">startState&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">frontier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">heappop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">endswith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">goalState&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">stateSpaceGraph&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">heappush&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frontier&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]],&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">aStarMotivation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">),(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">:[],&lt;/span>&lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;G&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span>&lt;span class="s1">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">:[(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">)]}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">aStarMotivationH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;G&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Admissibility of Heuristic&lt;/strong>&lt;/p>
&lt;p>A heuristic h(n) is admissible (optimistic)&lt;/p>
&lt;p>&lt;em>1 &amp;lt;= h(n) &amp;lt;= h&lt;/em>(n)*&lt;/p>
&lt;p>where h*(n) is the true cost of the nearest goal&lt;/p>
&lt;p>&lt;strong>Optimality of A*&lt;/strong>&lt;/p>
&lt;p>A* is optimal if an admissible heuristic is used&lt;/p>
&lt;p>&lt;strong>Consistency of Heuristic&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Definition
&lt;ul>
&lt;li>Heuristic cost &amp;lt;= actually cost for each arc
&lt;ul>
&lt;li>h(a) - h(c) &amp;lt;= cost (a to c)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Consequence of consistency
&lt;ul>
&lt;li>The f value along a path never decrease
&lt;ul>
&lt;li>h(a) &amp;lt;= cost(a to c) + h(c)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>ICOM6012 Topic 1 Overview</title><link>https://jpg6.com/en/2020/09/09/icom6012_topic1/</link><pubDate>Wed, 09 Sep 2020 20:22:09 +0800</pubDate><guid>https://jpg6.com/en/2020/09/09/icom6012_topic1/</guid><description>&lt;h1 id="icom6012-internet-infrastructure-technologies">ICOM6012 Internet Infrastructure Technologies&lt;/h1>
&lt;h2 id="topic-1-overview">Topic 1 Overview&lt;/h2>
&lt;p>&lt;strong>Internet&amp;rsquo;s Birthday:&lt;/strong> Sept. 2 or Oct. 29, 1969.&lt;/p>
&lt;ul>
&lt;li>ARPANET (1969 -)
&lt;ul>
&lt;li>TCP protocol in 1974&lt;/li>
&lt;li>&amp;ldquo;Internet = Internetworking&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NSFNET (1986 -)&lt;/li>
&lt;li>The Internet (late 1980s)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Some Interesting Topics about Internet (More than Technical)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=XvSBkoAdAPw">Who controls the Internet?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=HqXKEgTYZBQ">What is Net Neutrality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nytimes.com/2020/08/18/opinion/tiktok-wechat-ban-trump.html">A TikTok Ban Is Overdue&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnbc.com/2020/09/01/zooms-stock-surges-41percent-on-earnings-adding-over-37-billion-in-value.html">Zoom’s stock surges 41% after earnings beat, adding over $37 billion in market cap&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Evolution of Computers&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Mainframe&lt;/li>
&lt;li>Mini-Computer&lt;/li>
&lt;li>Workstation&lt;/li>
&lt;li>Personal Computer&lt;/li>
&lt;li>Laptop&lt;/li>
&lt;li>Smart Phone&lt;/li>
&lt;li>mm-scale sensors&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/evolution_of_computers.png" alt="evolution_of_computers">&lt;/p>
&lt;p>&lt;strong>Semiconductors in Computers&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Transistor: a semiconductor device used to amplify or switch electronic signals and electrical power.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/semiconductor.png" alt="semiconductor">&lt;/p>
&lt;ul>
&lt;li>IC: a set of electronic circuits on a small flat piece (&amp;ldquo;chip&amp;rdquo;) of semiconductor. Makes extensive use of transistors.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Electronic circuit: Processing (Computing), DC&lt;/em>&lt;/p>
&lt;p>&lt;em>Electrical circuit: Powering, AC&lt;/em>&lt;/p>
&lt;p>&lt;strong>Integrated Circuit&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>General purpose, microprocessors from Intel&lt;/li>
&lt;li>Application-specific, or ASIC, &lt;a href="https://www.apple.com/hk/en/newsroom/2020/06/apple-announces-mac-transition-to-apple-silicon/">Apple-designed Processors&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>To Make an IC&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Design&lt;/li>
&lt;li>Fabrication (fabrication plants/factories, &amp;ldquo;foundries&amp;rdquo; or &amp;ldquo;fabs&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/fabrication_process.png" alt="fabrication_process">&lt;/p>
&lt;p>&lt;strong>&amp;ldquo;Fabless&amp;rdquo; Chipmakers&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Design and sells chips but outsources the fabrication&lt;/li>
&lt;li>Create significant savings for fabless companies&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;a href="https://vimeo.com/70293585">Gordon Moore: Intel Founder&lt;/a>&lt;/strong>&lt;/p></description></item><item><title>Puma Goes Omni Case Study</title><link>https://jpg6.com/en/2020/09/08/ecom6013_discussion_topic1/</link><pubDate>Tue, 08 Sep 2020 23:30:19 +0800</pubDate><guid>https://jpg6.com/en/2020/09/08/ecom6013_discussion_topic1/</guid><description>&lt;h1 id="puma-goes-omni">Puma Goes Omni&lt;/h1>
&lt;h2 id="about-puma">About Puma&lt;/h2>
&lt;p>&lt;a href="https://about.puma.com">Puma Official Website&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://prezi.com/p/mvnoexfhmijo/puma-goes-omni-babawe17140/">A Fancy Presentation&lt;/a>&lt;/p>
&lt;p>Slogan: &amp;ldquo;Run The Streets. Do You.&amp;rdquo;&lt;/p>
&lt;p>The third largest sportswear manufacture in the world. (2018)&lt;/p>
&lt;p>The company was founded in 1948 by Rudolf Dassler.&lt;/p>
&lt;h2 id="building-a-centralize-website">Building a Centralize Website&lt;/h2>
&lt;p>&lt;strong>Restructuring Strategy&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Replacing multiple e-commerce sites on different platform&lt;/li>
&lt;li>Unifying content and product strategies&lt;/li>
&lt;li>Building multiple teams in different regions, separate tasks&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Content Management System (CMS)&lt;/strong>&lt;/p>
&lt;p>&lt;em>&amp;ldquo;Database software program specifically designed to manage structures, unstructured data and objects in a Website environment.&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>Purpose&lt;/p>
&lt;ul>
&lt;li>Consistent branding&lt;/li>
&lt;li>Enables category managers&lt;/li>
&lt;li>Flexibility to various scales&lt;/li>
&lt;li>Language translation tool&lt;/li>
&lt;li>Other features&lt;/li>
&lt;/ul>
&lt;p>Reason&lt;/p>
&lt;ul>
&lt;li>Better collecting data&lt;/li>
&lt;li>Easily rolling out campaign&lt;/li>
&lt;li>Cohensive brand management&lt;/li>
&lt;li>Convenience&lt;/li>
&lt;/ul>
&lt;h2 id="social-media-multiple-channels">Social Media (Multiple Channels)&lt;/h2>
&lt;ul>
&lt;li>Extensive presence on specific pages&lt;/li>
&lt;li>Driving conversations&lt;/li>
&lt;li>Better understanding&lt;/li>
&lt;li>Maximizing dta driven scale&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Maintain an extensive presence on:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Facebook&lt;/li>
&lt;li>Instagram&lt;/li>
&lt;li>Twitter&lt;/li>
&lt;li>Pinterest&lt;/li>
&lt;li>Youtube&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="other-outstanding-cases">Other Outstanding Cases&lt;/h2>
&lt;ul>
&lt;li>Orient Commercial Joint Stock Bank (OCB)&lt;/li>
&lt;li>Starbucks&lt;/li>
&lt;li>Bibo Mart&lt;/li>
&lt;/ul>
&lt;h2 id="discussion-topic-1-why-did-puma-build-a-single-centralized-website-rather-than-continue-with-multiple-websites-serving-different-countries-and-regions">Discussion Topic #1 Why did Puma build a single centralized website rather than continue with multiple websites serving different countries and regions&lt;/h2>
&lt;p>Puma has been developing for more than 70 years. It’s one of the largest sportswear manufacturers in the world. How to manage such a large scale business and tremendous amount of data has become a major challenge in its development.&lt;/p>
&lt;p>Puma used to deploy multiple websites to present its information according the functions or the locations, which brings several problems. When the company needs to update new products or services, the relevant staffs needs to update all the information on different platform, which is time-costing and unnecessary. Not only should puma hire more staffs to handle these tedious work, but it also increase the risks of making mistakes. In addition, too many different websites especially in different layouts or style will confuse customers, causing negative impacts on forming the brand.&lt;/p>
&lt;p>Firstly, one of the most important benefits brought out by a single centralized website is a consistent brand image. Consistent styles of all platform will bring customers better visual experience and strengthen their impression about the company. Secondly, one integrated website can divide different functions or parts into various category using Content management System (CMS) instead of running different websites at the same time. It&amp;rsquo;s more convenient for company to manage and for customers to get the target products or services. Besides, using responsive design technology will increase the flexibility of the website on different platforms such as laptops, tablets and smartphones. Also, language translation tools can be integrated into the website so as to help potential users can get the information. What&amp;rsquo;s more, company can better collect data from this centralized website system. Using these data Puma can perform better in understanding the clients - their capabilities, desires and so on.&lt;/p></description></item><item><title>ECOM6013 Topic 1 Introduction to E-Commerce Technology</title><link>https://jpg6.com/en/2020/09/06/ecom6013_topic1/</link><pubDate>Sun, 06 Sep 2020 04:28:28 +0800</pubDate><guid>https://jpg6.com/en/2020/09/06/ecom6013_topic1/</guid><description>&lt;h1 id="ecom6013-e-commerce-technologies">ECOM6013 E-Commerce Technologies&lt;/h1>
&lt;h2 id="topic-1-introduction-to-e-commerce-technology">Topic 1 Introduction to E-Commerce Technology&lt;/h2>
&lt;p>&lt;strong>Discussion Topic #1: &lt;a href="https://www.pseudoyu.com/en/2020/09/08/puma-goes-omni-case-study/">Puma Goes Omni&lt;/a>&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>What is the purpose of Puma&amp;rsquo;s content management systems?&lt;/li>
&lt;li>Why did Puma build a single centralized website rather than continue with multiple websites serving different countries and regions? [&lt;strong>choosen&lt;/strong>]&lt;/li>
&lt;li>What social media sites does Puma use, and what do they contribute to Puma&amp;rsquo;s marketing effort?&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Case Study&lt;/strong>&lt;/p>
&lt;p>&lt;em>Alibaba Singles&amp;rsquo; Day 2019&lt;/em>&lt;/p>
&lt;h2 id="core-e-commerce-technologies">Core E-Commerce Technologies&lt;/h2>
&lt;ul>
&lt;li>Introduction to E-Commerce Technology&lt;/li>
&lt;li>Internet and E-Commerce Infrasture&lt;/li>
&lt;li>E-Commerce Presence and Development Life Circle&lt;/li>
&lt;li>Web Design, Implementation and Testing&lt;/li>
&lt;li>Introduction to Mobile Commerce&lt;/li>
&lt;li>Internet and E-Commerce Commerce&lt;/li>
&lt;li>Electronic Payment Systems&lt;/li>
&lt;li>Cybercurrency, Bitcoin and Blockchain&lt;/li>
&lt;li>Emerging Technology &amp;amp; Cloud Computing and IoT&lt;/li>
&lt;li>Artificial Intelligence, Machine Learning and E-Commerce Trends&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>E-Commerce and Data Science&lt;/strong>&lt;/p>
&lt;p>E-Commerce is largely an exercise in understanding the clients - their capabilities, desires, etc.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.shopify.com/enterprise/global-ecommerce-statistics">Global Ecommerce - 11 growth trends and statistics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.shopify.com/enterprise/the-future-of-ecommerce">What Is the Future of Ecommerce?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Traditional Commerce&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Passive consumer&lt;/li>
&lt;li>Sales-force driven&lt;/li>
&lt;li>Fixed prices&lt;/li>
&lt;li>Information asymmetry&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>What Is E-Business?&lt;/strong>&lt;/p>
&lt;p>Digital enablement of transactions and processes within a firm, involving information systems under firm&amp;rsquo;s control. (Does not include commercial transactions involving an exchange of value across organizational boundaries.)&lt;/p>
&lt;p>&lt;strong>What Is E-Commerce?&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Simple: Use of Internet and/or Web to transact business. (Or any networked commerce activity)&lt;/li>
&lt;li>Formal: Digitally enabled commercial transactions between and among organizations and individuals.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Types of E-Commerce&lt;/strong>&lt;/p>
&lt;p>By market relationship&lt;/p>
&lt;ul>
&lt;li>C2C / B2C / G2C&lt;/li>
&lt;li>C2B / B2B / G2B&lt;/li>
&lt;li>C2G / B2G / G2G&lt;/li>
&lt;/ul>
&lt;p>By technology used&lt;/p>
&lt;ul>
&lt;li>P2P(Peer-to-Peer)&lt;/li>
&lt;li>M-Commerce(Mobile Commerce)&lt;/li>
&lt;li>O2O(Online-to-Offline)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Importance of E-Commerce&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Different, more powerful than previous technologies&lt;/li>
&lt;li>Bringing fundamental changes to commerce&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Features of current E-Commerce Technologies&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Ubiquity (everywhere)&lt;/li>
&lt;li>Global reach&lt;/li>
&lt;li>Universal standards&lt;/li>
&lt;li>Information richness&lt;/li>
&lt;li>Interactivity&lt;/li>
&lt;li>Information density&lt;/li>
&lt;li>Personalization/customization&lt;/li>
&lt;li>Social technology&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Current E-Commerce Trends&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>New business models based on social technologies, consumer-generated content, and services (negative impacts of social media)&lt;/li>
&lt;li>Broadband and wireless, 5G&lt;/li>
&lt;li>Mobile E-Commerce is booming&lt;/li>
&lt;li>Traditional media losing subscribers&lt;/li>
&lt;li>E-Commerce has traditionally been early adopters(and influencers) of new technologies, iPhone changed the smartphone industy&lt;/li>
&lt;li>Local-based, AR, AI, VR&amp;hellip;&lt;/li>
&lt;li>All forms of E-Commerce show very strong growth and Covid-19 amplifies this&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Limitations on the Growth of B2C E-Commerce&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Expensive technology&lt;/li>
&lt;li>Sophisticated skill set&lt;/li>
&lt;li>Experiences of traditional markets&lt;/li>
&lt;li>Inequality limiting access to telephones and computers&lt;/li>
&lt;li>Saturation and ceiling effects&lt;/li>
&lt;li>De-Globalization and trade war&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Predictions/Questions/Challenges for the Future&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Technology will propagate through all commercial activity&lt;/li>
&lt;li>Price will rise&lt;/li>
&lt;li>E-Commerce margins and profits will rise&lt;/li>
&lt;li>Traditional giants will play dominant roles but new startup ventures will emerge new products, services&lt;/li>
&lt;li>Pure online stores &amp;lt; Integrated offline/online stores&lt;/li>
&lt;li>Growth of regulatory activity worldwide&lt;/li>
&lt;li>Influence of cost of energy&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Organizing Themes&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Technology: Development and mastery of digital computing and communications technology&lt;/li>
&lt;li>Business: New technologies present businesses with new ways of organizing procuction and transacting business&lt;/li>
&lt;li>Society: Intellectual property, individual privacy, public welfare policy&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Academic Displines Concerned with E-Commerce&lt;/strong>&lt;/p>
&lt;p>Technical Approach&lt;/p>
&lt;ul>
&lt;li>Computer science&lt;/li>
&lt;li>Management science&lt;/li>
&lt;li>Information systems&lt;/li>
&lt;li>Electrical &amp;amp; Electronic Engineering&lt;/li>
&lt;/ul>
&lt;p>Behavioral Approach&lt;/p>
&lt;ul>
&lt;li>Information systems&lt;/li>
&lt;li>Economics&lt;/li>
&lt;li>Marketing&lt;/li>
&lt;li>Management&lt;/li>
&lt;li>Finance/accounting&lt;/li>
&lt;li>Sociology&lt;/li>
&lt;/ul></description></item><item><title>微信小程序云开发项目: 吃什么吖</title><link>https://jpg6.com/en/2020/04/05/mini_program_dev/</link><pubDate>Sun, 05 Apr 2020 23:40:25 +0800</pubDate><guid>https://jpg6.com/en/2020/04/05/mini_program_dev/</guid><description>&lt;h1 id="微信小程序云开发项目-吃什么吖">微信小程序云开发项目: 吃什么吖&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mini_program_logo.png" alt="mini_program_logo">
&lt;a href="https://github.com/pseudoyu/chumu-food">项目 GitHub&lt;/a>&lt;/p>
&lt;h2 id="开发细节">开发细节&lt;/h2>
&lt;p>太懒&amp;hellip;待更新&lt;/p>
&lt;h2 id="云开发功能">云开发功能&lt;/h2>
&lt;p>尝试了微信官方的云开发功能，无需自己部署服务器，且解决了图片过大无法保存在本地（超过小程序上传大小限制）的问题&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/cloud_dev.png" alt="cloud_dev">&lt;/p>
&lt;h2 id="效果图">效果图&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mini_program_pic_1.png" alt="mini_program_pic_1">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mini_program_pic_2.png" alt="mini_program_pic_2">&lt;/p>
&lt;h2 id="体验二维码">体验二维码&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/pseudoyu/image-hosting@master/images/mini_program_qr.png" alt="mini_program_qr">&lt;/p></description></item></channel></rss>